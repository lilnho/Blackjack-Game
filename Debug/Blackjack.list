
Blackjack.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033cc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000264  08003554  08003554  00013554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037b8  080037b8  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080037b8  080037b8  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080037b8  080037b8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037b8  080037b8  000137b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037bc  080037bc  000137bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080037c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000004c  20000074  08003834  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  08003834  000200c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006de4  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000183c  00000000  00000000  00026e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000770  00000000  00000000  000286c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000698  00000000  00000000  00028e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025950  00000000  00000000  000294d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000097f2  00000000  00000000  0004ee20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3349  00000000  00000000  00058612  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013b95b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001dd4  00000000  00000000  0013b9ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000074 	.word	0x20000074
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800353c 	.word	0x0800353c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000078 	.word	0x20000078
 80001c4:	0800353c 	.word	0x0800353c

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <UART_init>:
#define MAX_IDX 9

char input = '\0';

void UART_init(void)
{
 80001dc:	b480      	push	{r7}
 80001de:	af00      	add	r7, sp, #0
	/* enable clock for GPIOA and USART2*/
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOAEN);
 80001e0:	4b39      	ldr	r3, [pc, #228]	; (80002c8 <UART_init+0xec>)
 80001e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001e4:	4a38      	ldr	r2, [pc, #224]	; (80002c8 <UART_init+0xec>)
 80001e6:	f043 0301 	orr.w	r3, r3, #1
 80001ea:	64d3      	str	r3, [r2, #76]	; 0x4c
	RCC->APB1ENR1|= (RCC_APB1ENR1_USART2EN);
 80001ec:	4b36      	ldr	r3, [pc, #216]	; (80002c8 <UART_init+0xec>)
 80001ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80001f0:	4a35      	ldr	r2, [pc, #212]	; (80002c8 <UART_init+0xec>)
 80001f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80001f6:	6593      	str	r3, [r2, #88]	; 0x58

	/* set to alternate function mode */
	GPIOA->MODER &= ~(GPIO_MODER_MODE2 | GPIO_MODER_MODE3);
 80001f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000202:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000206:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (GPIO_MODER_MODE2_1 | GPIO_MODER_MODE3_1);
 8000208:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000212:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000216:	6013      	str	r3, [r2, #0]

	/* enable alternate function registers */
	GPIOA->AFR[0] &= ~(GPIO_AFRL_AFSEL2_Msk | GPIO_AFRL_AFSEL3_Msk); // clear AFR
 8000218:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800021c:	6a1b      	ldr	r3, [r3, #32]
 800021e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000222:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000226:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= ( (0x7UL << GPIO_AFRL_AFSEL2_Pos) | 0x7UL << GPIO_AFRL_AFSEL3_Pos);	// set PA2, PA3
 8000228:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800022c:	6a1b      	ldr	r3, [r3, #32]
 800022e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000232:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8000236:	6213      	str	r3, [r2, #32]

	/* set to high speed (11) */
	GPIOA->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED2 | GPIO_OSPEEDR_OSPEED3);
 8000238:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800023c:	689b      	ldr	r3, [r3, #8]
 800023e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000242:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000246:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR |= (GPIO_OSPEEDR_OSPEED2 | GPIO_OSPEEDR_OSPEED3);
 8000248:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800024c:	689b      	ldr	r3, [r3, #8]
 800024e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000252:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8000256:	6093      	str	r3, [r2, #8]

	/* program the M bits in USART_CR1 to define the word length */
	USART2->CR1 &= ~(USART_CR1_M); // bit 28: set to 00 (8 data bits) 1 char is 8 bits
 8000258:	4b1c      	ldr	r3, [pc, #112]	; (80002cc <UART_init+0xf0>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	4a1b      	ldr	r2, [pc, #108]	; (80002cc <UART_init+0xf0>)
 800025e:	f023 2310 	bic.w	r3, r3, #268439552	; 0x10001000
 8000262:	6013      	str	r3, [r2, #0]
	USART2->CR1 &= ~(USART_CR1_UE); // disable UE to write BRR
 8000264:	4b19      	ldr	r3, [pc, #100]	; (80002cc <UART_init+0xf0>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	4a18      	ldr	r2, [pc, #96]	; (80002cc <UART_init+0xf0>)
 800026a:	f023 0301 	bic.w	r3, r3, #1
 800026e:	6013      	str	r3, [r2, #0]

	/* select the desired baud rate using the USART_BRR register */
	USART2->BRR = (USARTDIV); // set bits of BRR to USARTDIV
 8000270:	4b16      	ldr	r3, [pc, #88]	; (80002cc <UART_init+0xf0>)
 8000272:	22d0      	movs	r2, #208	; 0xd0
 8000274:	60da      	str	r2, [r3, #12]

	/* program the number of stop bits in USART_CR2. */
	USART2->CR2 &= ~(USART_CR2_STOP); // setting stop bit to 1 (00)
 8000276:	4b15      	ldr	r3, [pc, #84]	; (80002cc <UART_init+0xf0>)
 8000278:	685b      	ldr	r3, [r3, #4]
 800027a:	4a14      	ldr	r2, [pc, #80]	; (80002cc <UART_init+0xf0>)
 800027c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000280:	6053      	str	r3, [r2, #4]

	/*enable the USART by writing the UE bit in USART_CR1 register to 1*/
	USART2->CR1 |= (USART_CR1_UE); // setting bit 0 to 1
 8000282:	4b12      	ldr	r3, [pc, #72]	; (80002cc <UART_init+0xf0>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	4a11      	ldr	r2, [pc, #68]	; (80002cc <UART_init+0xf0>)
 8000288:	f043 0301 	orr.w	r3, r3, #1
 800028c:	6013      	str	r3, [r2, #0]

	/*set the TE bit in USART_CR1 to send an idle frame as first transmission*/
	USART2->CR1 |= (USART_CR1_TE); // setting transmission enable to ?
 800028e:	4b0f      	ldr	r3, [pc, #60]	; (80002cc <UART_init+0xf0>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	4a0e      	ldr	r2, [pc, #56]	; (80002cc <UART_init+0xf0>)
 8000294:	f043 0308 	orr.w	r3, r3, #8
 8000298:	6013      	str	r3, [r2, #0]

	/* enable interrupts */
	USART2->CR1 |= USART_CR1_RXNEIE;
 800029a:	4b0c      	ldr	r3, [pc, #48]	; (80002cc <UART_init+0xf0>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	4a0b      	ldr	r2, [pc, #44]	; (80002cc <UART_init+0xf0>)
 80002a0:	f043 0320 	orr.w	r3, r3, #32
 80002a4:	6013      	str	r3, [r2, #0]
	NVIC->ISER[1] = (1 << (USART2_IRQn & 0x1F));
 80002a6:	4b0a      	ldr	r3, [pc, #40]	; (80002d0 <UART_init+0xf4>)
 80002a8:	2240      	movs	r2, #64	; 0x40
 80002aa:	605a      	str	r2, [r3, #4]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80002ac:	b662      	cpsie	i
}
 80002ae:	bf00      	nop
	__enable_irq();

	USART2->CR1 |= (USART_CR1_RE); // setting reception enable to 1 ?
 80002b0:	4b06      	ldr	r3, [pc, #24]	; (80002cc <UART_init+0xf0>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	4a05      	ldr	r2, [pc, #20]	; (80002cc <UART_init+0xf0>)
 80002b6:	f043 0304 	orr.w	r3, r3, #4
 80002ba:	6013      	str	r3, [r2, #0]
}
 80002bc:	bf00      	nop
 80002be:	46bd      	mov	sp, r7
 80002c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop
 80002c8:	40021000 	.word	0x40021000
 80002cc:	40004400 	.word	0x40004400
 80002d0:	e000e100 	.word	0xe000e100

080002d4 <UART_print_char>:


void UART_print_char(char string) // right now just printing one character
{
 80002d4:	b480      	push	{r7}
 80002d6:	b083      	sub	sp, #12
 80002d8:	af00      	add	r7, sp, #0
 80002da:	4603      	mov	r3, r0
 80002dc:	71fb      	strb	r3, [r7, #7]

	/* check the TXE flag*/
	while (!(USART_ISR_TXE & USART2->ISR));// wait until it is ready to be written to, if it is empty then write to it
 80002de:	bf00      	nop
 80002e0:	4b07      	ldr	r3, [pc, #28]	; (8000300 <UART_print_char+0x2c>)
 80002e2:	69db      	ldr	r3, [r3, #28]
 80002e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d0f9      	beq.n	80002e0 <UART_print_char+0xc>
	USART2->TDR = string; // write a char
 80002ec:	4b04      	ldr	r3, [pc, #16]	; (8000300 <UART_print_char+0x2c>)
 80002ee:	79fa      	ldrb	r2, [r7, #7]
 80002f0:	b292      	uxth	r2, r2
 80002f2:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80002f4:	bf00      	nop
 80002f6:	370c      	adds	r7, #12
 80002f8:	46bd      	mov	sp, r7
 80002fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fe:	4770      	bx	lr
 8000300:	40004400 	.word	0x40004400

08000304 <UART_print>:

void UART_print(char* string)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b084      	sub	sp, #16
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
	int i = 0;
 800030c:	2300      	movs	r3, #0
 800030e:	60fb      	str	r3, [r7, #12]
	while(string[i] != '\0')
 8000310:	e009      	b.n	8000326 <UART_print+0x22>
	{
		UART_print_char(string[i]);
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	687a      	ldr	r2, [r7, #4]
 8000316:	4413      	add	r3, r2
 8000318:	781b      	ldrb	r3, [r3, #0]
 800031a:	4618      	mov	r0, r3
 800031c:	f7ff ffda 	bl	80002d4 <UART_print_char>
		i += 1;
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	3301      	adds	r3, #1
 8000324:	60fb      	str	r3, [r7, #12]
	while(string[i] != '\0')
 8000326:	68fb      	ldr	r3, [r7, #12]
 8000328:	687a      	ldr	r2, [r7, #4]
 800032a:	4413      	add	r3, r2
 800032c:	781b      	ldrb	r3, [r3, #0]
 800032e:	2b00      	cmp	r3, #0
 8000330:	d1ef      	bne.n	8000312 <UART_print+0xe>
	}
}
 8000332:	bf00      	nop
 8000334:	bf00      	nop
 8000336:	3710      	adds	r7, #16
 8000338:	46bd      	mov	sp, r7
 800033a:	bd80      	pop	{r7, pc}

0800033c <toString>:
	UART_print(code);
}


void toString(uint32_t value, char *str, int max_index)
{
 800033c:	b480      	push	{r7}
 800033e:	b08d      	sub	sp, #52	; 0x34
 8000340:	af00      	add	r7, sp, #0
 8000342:	60f8      	str	r0, [r7, #12]
 8000344:	60b9      	str	r1, [r7, #8]
 8000346:	607a      	str	r2, [r7, #4]
	char nums[10] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'};
 8000348:	4a33      	ldr	r2, [pc, #204]	; (8000418 <toString+0xdc>)
 800034a:	f107 0310 	add.w	r3, r7, #16
 800034e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000350:	c303      	stmia	r3!, {r0, r1}
 8000352:	801a      	strh	r2, [r3, #0]
	if (value == 0)
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	2b00      	cmp	r3, #0
 8000358:	d107      	bne.n	800036a <toString+0x2e>
	{
		str[0] = '0';
 800035a:	68bb      	ldr	r3, [r7, #8]
 800035c:	2230      	movs	r2, #48	; 0x30
 800035e:	701a      	strb	r2, [r3, #0]
		str[1] = '\0';
 8000360:	68bb      	ldr	r3, [r7, #8]
 8000362:	3301      	adds	r3, #1
 8000364:	2200      	movs	r2, #0
 8000366:	701a      	strb	r2, [r3, #0]
				str[i] = str[i+ gap];
			}
			str[size] = '\0';
		}
	}
}
 8000368:	e04f      	b.n	800040a <toString+0xce>
		uint32_t num = value;
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	62fb      	str	r3, [r7, #44]	; 0x2c
		str[MAX_IDX - 1] = '\0'; // setting index 8 to null
 800036e:	68bb      	ldr	r3, [r7, #8]
 8000370:	3308      	adds	r3, #8
 8000372:	2200      	movs	r2, #0
 8000374:	701a      	strb	r2, [r3, #0]
		int idx = MAX_IDX - 2;   // start adding from the end of the array
 8000376:	2307      	movs	r3, #7
 8000378:	62bb      	str	r3, [r7, #40]	; 0x28
		int size = 0 ;
 800037a:	2300      	movs	r3, #0
 800037c:	627b      	str	r3, [r7, #36]	; 0x24
		while(num)
 800037e:	e020      	b.n	80003c2 <toString+0x86>
			char toprint = nums[num % 10];
 8000380:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000382:	4b26      	ldr	r3, [pc, #152]	; (800041c <toString+0xe0>)
 8000384:	fba3 2301 	umull	r2, r3, r3, r1
 8000388:	08da      	lsrs	r2, r3, #3
 800038a:	4613      	mov	r3, r2
 800038c:	009b      	lsls	r3, r3, #2
 800038e:	4413      	add	r3, r2
 8000390:	005b      	lsls	r3, r3, #1
 8000392:	1aca      	subs	r2, r1, r3
 8000394:	f102 0330 	add.w	r3, r2, #48	; 0x30
 8000398:	443b      	add	r3, r7
 800039a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800039e:	76fb      	strb	r3, [r7, #27]
			str[idx] = toprint;
 80003a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003a2:	68ba      	ldr	r2, [r7, #8]
 80003a4:	4413      	add	r3, r2
 80003a6:	7efa      	ldrb	r2, [r7, #27]
 80003a8:	701a      	strb	r2, [r3, #0]
			idx -= 1;
 80003aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003ac:	3b01      	subs	r3, #1
 80003ae:	62bb      	str	r3, [r7, #40]	; 0x28
			num /= 10;
 80003b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80003b2:	4a1a      	ldr	r2, [pc, #104]	; (800041c <toString+0xe0>)
 80003b4:	fba2 2303 	umull	r2, r3, r2, r3
 80003b8:	08db      	lsrs	r3, r3, #3
 80003ba:	62fb      	str	r3, [r7, #44]	; 0x2c
			size += 1;
 80003bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003be:	3301      	adds	r3, #1
 80003c0:	627b      	str	r3, [r7, #36]	; 0x24
		while(num)
 80003c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d1db      	bne.n	8000380 <toString+0x44>
		if(size < MAX_IDX - 1) // if the number is less than 8 digits
 80003c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003ca:	2b07      	cmp	r3, #7
 80003cc:	dc1d      	bgt.n	800040a <toString+0xce>
			int gap = MAX_IDX - size - 1;
 80003ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003d0:	f1c3 0308 	rsb	r3, r3, #8
 80003d4:	61fb      	str	r3, [r7, #28]
			for(int i = 0; i < size + 1; i++)
 80003d6:	2300      	movs	r3, #0
 80003d8:	623b      	str	r3, [r7, #32]
 80003da:	e00d      	b.n	80003f8 <toString+0xbc>
				str[i] = str[i+ gap];
 80003dc:	6a3a      	ldr	r2, [r7, #32]
 80003de:	69fb      	ldr	r3, [r7, #28]
 80003e0:	4413      	add	r3, r2
 80003e2:	461a      	mov	r2, r3
 80003e4:	68bb      	ldr	r3, [r7, #8]
 80003e6:	441a      	add	r2, r3
 80003e8:	6a3b      	ldr	r3, [r7, #32]
 80003ea:	68b9      	ldr	r1, [r7, #8]
 80003ec:	440b      	add	r3, r1
 80003ee:	7812      	ldrb	r2, [r2, #0]
 80003f0:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < size + 1; i++)
 80003f2:	6a3b      	ldr	r3, [r7, #32]
 80003f4:	3301      	adds	r3, #1
 80003f6:	623b      	str	r3, [r7, #32]
 80003f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80003fa:	6a3b      	ldr	r3, [r7, #32]
 80003fc:	429a      	cmp	r2, r3
 80003fe:	daed      	bge.n	80003dc <toString+0xa0>
			str[size] = '\0';
 8000400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000402:	68ba      	ldr	r2, [r7, #8]
 8000404:	4413      	add	r3, r2
 8000406:	2200      	movs	r2, #0
 8000408:	701a      	strb	r2, [r3, #0]
}
 800040a:	bf00      	nop
 800040c:	3734      	adds	r7, #52	; 0x34
 800040e:	46bd      	mov	sp, r7
 8000410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000414:	4770      	bx	lr
 8000416:	bf00      	nop
 8000418:	08003554 	.word	0x08003554
 800041c:	cccccccd 	.word	0xcccccccd

08000420 <read_input>:

char read_input(void)
{
 8000420:	b480      	push	{r7}
 8000422:	b083      	sub	sp, #12
 8000424:	af00      	add	r7, sp, #0
	//check if input has changed
    while (input == '\0'){}
 8000426:	bf00      	nop
 8000428:	4b08      	ldr	r3, [pc, #32]	; (800044c <read_input+0x2c>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	2b00      	cmp	r3, #0
 800042e:	d0fb      	beq.n	8000428 <read_input+0x8>

    char c = input;
 8000430:	4b06      	ldr	r3, [pc, #24]	; (800044c <read_input+0x2c>)
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	71fb      	strb	r3, [r7, #7]
    input = '\0';
 8000436:	4b05      	ldr	r3, [pc, #20]	; (800044c <read_input+0x2c>)
 8000438:	2200      	movs	r2, #0
 800043a:	701a      	strb	r2, [r3, #0]
    return c;
 800043c:	79fb      	ldrb	r3, [r7, #7]

}
 800043e:	4618      	mov	r0, r3
 8000440:	370c      	adds	r7, #12
 8000442:	46bd      	mov	sp, r7
 8000444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000448:	4770      	bx	lr
 800044a:	bf00      	nop
 800044c:	20000090 	.word	0x20000090

08000450 <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 8000450:	b480      	push	{r7}
 8000452:	af00      	add	r7, sp, #0
	if ((USART2->ISR & USART_ISR_RXNE) !=0)
 8000454:	4b08      	ldr	r3, [pc, #32]	; (8000478 <USART2_IRQHandler+0x28>)
 8000456:	69db      	ldr	r3, [r3, #28]
 8000458:	f003 0320 	and.w	r3, r3, #32
 800045c:	2b00      	cmp	r3, #0
 800045e:	d005      	beq.n	800046c <USART2_IRQHandler+0x1c>
	{
		input = USART2->RDR;
 8000460:	4b05      	ldr	r3, [pc, #20]	; (8000478 <USART2_IRQHandler+0x28>)
 8000462:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000464:	b29b      	uxth	r3, r3
 8000466:	b2da      	uxtb	r2, r3
 8000468:	4b04      	ldr	r3, [pc, #16]	; (800047c <USART2_IRQHandler+0x2c>)
 800046a:	701a      	strb	r2, [r3, #0]
	}
}
 800046c:	bf00      	nop
 800046e:	46bd      	mov	sp, r7
 8000470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop
 8000478:	40004400 	.word	0x40004400
 800047c:	20000090 	.word	0x20000090

08000480 <RNG_init>:
#include <stdlib.h>


//Configure the built in RNG
void RNG_init(void)
{
 8000480:	b480      	push	{r7}
 8000482:	af00      	add	r7, sp, #0
	//enable RNG clock
	RCC->AHB2ENR |= (RCC_AHB2ENR_RNGEN);
 8000484:	4b14      	ldr	r3, [pc, #80]	; (80004d8 <RNG_init+0x58>)
 8000486:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000488:	4a13      	ldr	r2, [pc, #76]	; (80004d8 <RNG_init+0x58>)
 800048a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800048e:	64d3      	str	r3, [r2, #76]	; 0x4c

	//reset RNG
	RCC->AHB2RSTR |= RCC_AHB2RSTR_RNGRST;		//resets RNG
 8000490:	4b11      	ldr	r3, [pc, #68]	; (80004d8 <RNG_init+0x58>)
 8000492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000494:	4a10      	ldr	r2, [pc, #64]	; (80004d8 <RNG_init+0x58>)
 8000496:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800049a:	62d3      	str	r3, [r2, #44]	; 0x2c
	RCC->AHB2RSTR &= ~(RCC_AHB2RSTR_RNGRST);
 800049c:	4b0e      	ldr	r3, [pc, #56]	; (80004d8 <RNG_init+0x58>)
 800049e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004a0:	4a0d      	ldr	r2, [pc, #52]	; (80004d8 <RNG_init+0x58>)
 80004a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80004a6:	62d3      	str	r3, [r2, #44]	; 0x2c


	//enable RNGEN for generation
	RNG->CR |= RNG_CR_RNGEN;
 80004a8:	4b0c      	ldr	r3, [pc, #48]	; (80004dc <RNG_init+0x5c>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	4a0b      	ldr	r2, [pc, #44]	; (80004dc <RNG_init+0x5c>)
 80004ae:	f043 0304 	orr.w	r3, r3, #4
 80004b2:	6013      	str	r3, [r2, #0]

	//configure
	RNG->CR |= (1 << 5);		//CED
 80004b4:	4b09      	ldr	r3, [pc, #36]	; (80004dc <RNG_init+0x5c>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	4a08      	ldr	r2, [pc, #32]	; (80004dc <RNG_init+0x5c>)
 80004ba:	f043 0320 	orr.w	r3, r3, #32
 80004be:	6013      	str	r3, [r2, #0]
	RNG->CR &= ~(RNG_CR_IE);	//disable interrupt enable
 80004c0:	4b06      	ldr	r3, [pc, #24]	; (80004dc <RNG_init+0x5c>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4a05      	ldr	r2, [pc, #20]	; (80004dc <RNG_init+0x5c>)
 80004c6:	f023 0308 	bic.w	r3, r3, #8
 80004ca:	6013      	str	r3, [r2, #0]

}
 80004cc:	bf00      	nop
 80004ce:	46bd      	mov	sp, r7
 80004d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop
 80004d8:	40021000 	.word	0x40021000
 80004dc:	50060800 	.word	0x50060800

080004e0 <deck_init>:

//creates the 52 card deck (not shuffled)
void deck_init(Card deck[])
{
 80004e0:	b5b0      	push	{r4, r5, r7, lr}
 80004e2:	b08e      	sub	sp, #56	; 0x38
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
	uint8_t index = 0;
 80004e8:	2300      	movs	r3, #0
 80004ea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t suitsIndex, number, faceCard;
	char suits[4][9] = {"Spades", "Clubs", "Diamonds", "Hearts"};
 80004ee:	4b80      	ldr	r3, [pc, #512]	; (80006f0 <deck_init+0x210>)
 80004f0:	f107 0410 	add.w	r4, r7, #16
 80004f4:	461d      	mov	r5, r3
 80004f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004fe:	682b      	ldr	r3, [r5, #0]
 8000500:	6023      	str	r3, [r4, #0]
	char faces[3][2] = {"J", "Q", "K"};
 8000502:	4a7c      	ldr	r2, [pc, #496]	; (80006f4 <deck_init+0x214>)
 8000504:	f107 0308 	add.w	r3, r7, #8
 8000508:	e892 0003 	ldmia.w	r2, {r0, r1}
 800050c:	6018      	str	r0, [r3, #0]
 800050e:	3304      	adds	r3, #4
 8000510:	8019      	strh	r1, [r3, #0]

	//put in each suit
	for (suitsIndex = 0; suitsIndex < 4; suitsIndex++)
 8000512:	2300      	movs	r3, #0
 8000514:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8000518:	e0e0      	b.n	80006dc <deck_init+0x1fc>
	{
		//put in each number card
		for (number = 2; number < 11; number++)
 800051a:	2302      	movs	r3, #2
 800051c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8000520:	e044      	b.n	80005ac <deck_init+0xcc>
		{
			deck[index].value = number;
 8000522:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000526:	4613      	mov	r3, r2
 8000528:	005b      	lsls	r3, r3, #1
 800052a:	4413      	add	r3, r2
 800052c:	009b      	lsls	r3, r3, #2
 800052e:	4413      	add	r3, r2
 8000530:	687a      	ldr	r2, [r7, #4]
 8000532:	4413      	add	r3, r2
 8000534:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8000538:	701a      	strb	r2, [r3, #0]
			deck[index].visible = 1;
 800053a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800053e:	4613      	mov	r3, r2
 8000540:	005b      	lsls	r3, r3, #1
 8000542:	4413      	add	r3, r2
 8000544:	009b      	lsls	r3, r3, #2
 8000546:	4413      	add	r3, r2
 8000548:	687a      	ldr	r2, [r7, #4]
 800054a:	4413      	add	r3, r2
 800054c:	2201      	movs	r2, #1
 800054e:	705a      	strb	r2, [r3, #1]
			strcpy(deck[index].suit, suits[suitsIndex]);
 8000550:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000554:	4613      	mov	r3, r2
 8000556:	005b      	lsls	r3, r3, #1
 8000558:	4413      	add	r3, r2
 800055a:	009b      	lsls	r3, r3, #2
 800055c:	4413      	add	r3, r2
 800055e:	687a      	ldr	r2, [r7, #4]
 8000560:	4413      	add	r3, r2
 8000562:	1d18      	adds	r0, r3, #4
 8000564:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8000568:	f107 0110 	add.w	r1, r7, #16
 800056c:	4613      	mov	r3, r2
 800056e:	00db      	lsls	r3, r3, #3
 8000570:	4413      	add	r3, r2
 8000572:	440b      	add	r3, r1
 8000574:	4619      	mov	r1, r3
 8000576:	f002 ffcb 	bl	8003510 <strcpy>
			strcpy(deck[index].face, "X");
 800057a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800057e:	4613      	mov	r3, r2
 8000580:	005b      	lsls	r3, r3, #1
 8000582:	4413      	add	r3, r2
 8000584:	009b      	lsls	r3, r3, #2
 8000586:	4413      	add	r3, r2
 8000588:	687a      	ldr	r2, [r7, #4]
 800058a:	4413      	add	r3, r2
 800058c:	3302      	adds	r3, #2
 800058e:	495a      	ldr	r1, [pc, #360]	; (80006f8 <deck_init+0x218>)
 8000590:	461a      	mov	r2, r3
 8000592:	460b      	mov	r3, r1
 8000594:	881b      	ldrh	r3, [r3, #0]
 8000596:	8013      	strh	r3, [r2, #0]
			index++;
 8000598:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800059c:	3301      	adds	r3, #1
 800059e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		for (number = 2; number < 11; number++)
 80005a2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80005a6:	3301      	adds	r3, #1
 80005a8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80005ac:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80005b0:	2b0a      	cmp	r3, #10
 80005b2:	d9b6      	bls.n	8000522 <deck_init+0x42>
		}

		//put in face cards
		for (faceCard = 0; faceCard < 3; faceCard++)
 80005b4:	2300      	movs	r3, #0
 80005b6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80005ba:	e047      	b.n	800064c <deck_init+0x16c>
		{
			deck[index].value = 10;
 80005bc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80005c0:	4613      	mov	r3, r2
 80005c2:	005b      	lsls	r3, r3, #1
 80005c4:	4413      	add	r3, r2
 80005c6:	009b      	lsls	r3, r3, #2
 80005c8:	4413      	add	r3, r2
 80005ca:	687a      	ldr	r2, [r7, #4]
 80005cc:	4413      	add	r3, r2
 80005ce:	220a      	movs	r2, #10
 80005d0:	701a      	strb	r2, [r3, #0]
			deck[index].visible = 1;
 80005d2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80005d6:	4613      	mov	r3, r2
 80005d8:	005b      	lsls	r3, r3, #1
 80005da:	4413      	add	r3, r2
 80005dc:	009b      	lsls	r3, r3, #2
 80005de:	4413      	add	r3, r2
 80005e0:	687a      	ldr	r2, [r7, #4]
 80005e2:	4413      	add	r3, r2
 80005e4:	2201      	movs	r2, #1
 80005e6:	705a      	strb	r2, [r3, #1]
			strcpy(deck[index].suit, suits[suitsIndex]);
 80005e8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80005ec:	4613      	mov	r3, r2
 80005ee:	005b      	lsls	r3, r3, #1
 80005f0:	4413      	add	r3, r2
 80005f2:	009b      	lsls	r3, r3, #2
 80005f4:	4413      	add	r3, r2
 80005f6:	687a      	ldr	r2, [r7, #4]
 80005f8:	4413      	add	r3, r2
 80005fa:	1d18      	adds	r0, r3, #4
 80005fc:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8000600:	f107 0110 	add.w	r1, r7, #16
 8000604:	4613      	mov	r3, r2
 8000606:	00db      	lsls	r3, r3, #3
 8000608:	4413      	add	r3, r2
 800060a:	440b      	add	r3, r1
 800060c:	4619      	mov	r1, r3
 800060e:	f002 ff7f 	bl	8003510 <strcpy>
			strcpy(deck[index].face, faces[faceCard]);
 8000612:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000616:	4613      	mov	r3, r2
 8000618:	005b      	lsls	r3, r3, #1
 800061a:	4413      	add	r3, r2
 800061c:	009b      	lsls	r3, r3, #2
 800061e:	4413      	add	r3, r2
 8000620:	687a      	ldr	r2, [r7, #4]
 8000622:	4413      	add	r3, r2
 8000624:	1c98      	adds	r0, r3, #2
 8000626:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800062a:	f107 0208 	add.w	r2, r7, #8
 800062e:	005b      	lsls	r3, r3, #1
 8000630:	4413      	add	r3, r2
 8000632:	4619      	mov	r1, r3
 8000634:	f002 ff6c 	bl	8003510 <strcpy>
			index++;
 8000638:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800063c:	3301      	adds	r3, #1
 800063e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		for (faceCard = 0; faceCard < 3; faceCard++)
 8000642:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000646:	3301      	adds	r3, #1
 8000648:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 800064c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000650:	2b02      	cmp	r3, #2
 8000652:	d9b3      	bls.n	80005bc <deck_init+0xdc>
		}

		//put in Ace
		deck[index].value = 1;
 8000654:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000658:	4613      	mov	r3, r2
 800065a:	005b      	lsls	r3, r3, #1
 800065c:	4413      	add	r3, r2
 800065e:	009b      	lsls	r3, r3, #2
 8000660:	4413      	add	r3, r2
 8000662:	687a      	ldr	r2, [r7, #4]
 8000664:	4413      	add	r3, r2
 8000666:	2201      	movs	r2, #1
 8000668:	701a      	strb	r2, [r3, #0]
		deck[index].visible = 1;
 800066a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800066e:	4613      	mov	r3, r2
 8000670:	005b      	lsls	r3, r3, #1
 8000672:	4413      	add	r3, r2
 8000674:	009b      	lsls	r3, r3, #2
 8000676:	4413      	add	r3, r2
 8000678:	687a      	ldr	r2, [r7, #4]
 800067a:	4413      	add	r3, r2
 800067c:	2201      	movs	r2, #1
 800067e:	705a      	strb	r2, [r3, #1]
		strcpy(deck[index].suit, suits[suitsIndex]);
 8000680:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000684:	4613      	mov	r3, r2
 8000686:	005b      	lsls	r3, r3, #1
 8000688:	4413      	add	r3, r2
 800068a:	009b      	lsls	r3, r3, #2
 800068c:	4413      	add	r3, r2
 800068e:	687a      	ldr	r2, [r7, #4]
 8000690:	4413      	add	r3, r2
 8000692:	1d18      	adds	r0, r3, #4
 8000694:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8000698:	f107 0110 	add.w	r1, r7, #16
 800069c:	4613      	mov	r3, r2
 800069e:	00db      	lsls	r3, r3, #3
 80006a0:	4413      	add	r3, r2
 80006a2:	440b      	add	r3, r1
 80006a4:	4619      	mov	r1, r3
 80006a6:	f002 ff33 	bl	8003510 <strcpy>
		strcpy(deck[index].face, "A");
 80006aa:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80006ae:	4613      	mov	r3, r2
 80006b0:	005b      	lsls	r3, r3, #1
 80006b2:	4413      	add	r3, r2
 80006b4:	009b      	lsls	r3, r3, #2
 80006b6:	4413      	add	r3, r2
 80006b8:	687a      	ldr	r2, [r7, #4]
 80006ba:	4413      	add	r3, r2
 80006bc:	3302      	adds	r3, #2
 80006be:	490f      	ldr	r1, [pc, #60]	; (80006fc <deck_init+0x21c>)
 80006c0:	461a      	mov	r2, r3
 80006c2:	460b      	mov	r3, r1
 80006c4:	881b      	ldrh	r3, [r3, #0]
 80006c6:	8013      	strh	r3, [r2, #0]
		index++;
 80006c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80006cc:	3301      	adds	r3, #1
 80006ce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	for (suitsIndex = 0; suitsIndex < 4; suitsIndex++)
 80006d2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80006d6:	3301      	adds	r3, #1
 80006d8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80006dc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80006e0:	2b03      	cmp	r3, #3
 80006e2:	f67f af1a 	bls.w	800051a <deck_init+0x3a>
	}

}
 80006e6:	bf00      	nop
 80006e8:	bf00      	nop
 80006ea:	3738      	adds	r7, #56	; 0x38
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bdb0      	pop	{r4, r5, r7, pc}
 80006f0:	08003568 	.word	0x08003568
 80006f4:	0800358c 	.word	0x0800358c
 80006f8:	08003560 	.word	0x08003560
 80006fc:	08003564 	.word	0x08003564

08000700 <hand_init>:

Hand* hand_init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
	Hand* hand = malloc(sizeof(Hand));
 8000706:	2094      	movs	r0, #148	; 0x94
 8000708:	f002 fe4e 	bl	80033a8 <malloc>
 800070c:	4603      	mov	r3, r0
 800070e:	607b      	str	r3, [r7, #4]
	hand->numCards = 0;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	2200      	movs	r2, #0
 8000714:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	return hand;
 8000718:	687b      	ldr	r3, [r7, #4]
}
 800071a:	4618      	mov	r0, r3
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}

08000722 <addCard>:

void addCard(Hand* hand, Card card)
{
 8000722:	b084      	sub	sp, #16
 8000724:	b490      	push	{r4, r7}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
 800072c:	f107 0014 	add.w	r0, r7, #20
 8000730:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	hand->hand[hand->numCards] = card;
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800073a:	6879      	ldr	r1, [r7, #4]
 800073c:	4613      	mov	r3, r2
 800073e:	005b      	lsls	r3, r3, #1
 8000740:	4413      	add	r3, r2
 8000742:	009b      	lsls	r3, r3, #2
 8000744:	4413      	add	r3, r2
 8000746:	440b      	add	r3, r1
 8000748:	461c      	mov	r4, r3
 800074a:	f107 0314 	add.w	r3, r7, #20
 800074e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000750:	6020      	str	r0, [r4, #0]
 8000752:	6061      	str	r1, [r4, #4]
 8000754:	60a2      	str	r2, [r4, #8]
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	7323      	strb	r3, [r4, #12]
	hand->numCards++;
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000760:	1c5a      	adds	r2, r3, #1
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
 8000768:	bf00      	nop
 800076a:	3708      	adds	r7, #8
 800076c:	46bd      	mov	sp, r7
 800076e:	bc90      	pop	{r4, r7}
 8000770:	b004      	add	sp, #16
 8000772:	4770      	bx	lr

08000774 <calculateHandValue>:

//calculate the total value of target hand
uint8_t calculateHandValue(Hand* hand)
{
 8000774:	b480      	push	{r7}
 8000776:	b085      	sub	sp, #20
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
    uint8_t totalValue = 0;
 800077c:	2300      	movs	r3, #0
 800077e:	73fb      	strb	r3, [r7, #15]
    uint8_t numAces = 0;
 8000780:	2300      	movs	r3, #0
 8000782:	73bb      	strb	r3, [r7, #14]

    for (uint8_t i = 0; i < hand->numCards; i++)
 8000784:	2300      	movs	r3, #0
 8000786:	737b      	strb	r3, [r7, #13]
 8000788:	e01c      	b.n	80007c4 <calculateHandValue+0x50>
    {
        totalValue += hand->hand[i].value;
 800078a:	7b7a      	ldrb	r2, [r7, #13]
 800078c:	6879      	ldr	r1, [r7, #4]
 800078e:	4613      	mov	r3, r2
 8000790:	005b      	lsls	r3, r3, #1
 8000792:	4413      	add	r3, r2
 8000794:	009b      	lsls	r3, r3, #2
 8000796:	4413      	add	r3, r2
 8000798:	440b      	add	r3, r1
 800079a:	781a      	ldrb	r2, [r3, #0]
 800079c:	7bfb      	ldrb	r3, [r7, #15]
 800079e:	4413      	add	r3, r2
 80007a0:	73fb      	strb	r3, [r7, #15]

        //check if card is an Ace
        if (hand->hand[i].value == 1)
 80007a2:	7b7a      	ldrb	r2, [r7, #13]
 80007a4:	6879      	ldr	r1, [r7, #4]
 80007a6:	4613      	mov	r3, r2
 80007a8:	005b      	lsls	r3, r3, #1
 80007aa:	4413      	add	r3, r2
 80007ac:	009b      	lsls	r3, r3, #2
 80007ae:	4413      	add	r3, r2
 80007b0:	440b      	add	r3, r1
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	2b01      	cmp	r3, #1
 80007b6:	d102      	bne.n	80007be <calculateHandValue+0x4a>
        {
            numAces++;
 80007b8:	7bbb      	ldrb	r3, [r7, #14]
 80007ba:	3301      	adds	r3, #1
 80007bc:	73bb      	strb	r3, [r7, #14]
    for (uint8_t i = 0; i < hand->numCards; i++)
 80007be:	7b7b      	ldrb	r3, [r7, #13]
 80007c0:	3301      	adds	r3, #1
 80007c2:	737b      	strb	r3, [r7, #13]
 80007c4:	7b7a      	ldrb	r2, [r7, #13]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80007cc:	429a      	cmp	r2, r3
 80007ce:	dbdc      	blt.n	800078a <calculateHandValue+0x16>
        }

    }

    //change aces value depending on total
    while (numAces > 0 && totalValue + 10 <= 21)
 80007d0:	e005      	b.n	80007de <calculateHandValue+0x6a>
    {
        totalValue += 10;
 80007d2:	7bfb      	ldrb	r3, [r7, #15]
 80007d4:	330a      	adds	r3, #10
 80007d6:	73fb      	strb	r3, [r7, #15]
        numAces--;
 80007d8:	7bbb      	ldrb	r3, [r7, #14]
 80007da:	3b01      	subs	r3, #1
 80007dc:	73bb      	strb	r3, [r7, #14]
    while (numAces > 0 && totalValue + 10 <= 21)
 80007de:	7bbb      	ldrb	r3, [r7, #14]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d002      	beq.n	80007ea <calculateHandValue+0x76>
 80007e4:	7bfb      	ldrb	r3, [r7, #15]
 80007e6:	2b0b      	cmp	r3, #11
 80007e8:	d9f3      	bls.n	80007d2 <calculateHandValue+0x5e>
    }

    return totalValue;
 80007ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	3714      	adds	r7, #20
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr

080007f8 <getRNG>:

//get rng value from RNG data register
uint32_t getRNG(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
	uint32_t data = 0;
 80007fe:	2300      	movs	r3, #0
 8000800:	607b      	str	r3, [r7, #4]

	//wait until rng is ready
	while (!(RNG->SR & RNG_SR_DRDY)){}
 8000802:	bf00      	nop
 8000804:	4b07      	ldr	r3, [pc, #28]	; (8000824 <getRNG+0x2c>)
 8000806:	685b      	ldr	r3, [r3, #4]
 8000808:	f003 0301 	and.w	r3, r3, #1
 800080c:	2b00      	cmp	r3, #0
 800080e:	d0f9      	beq.n	8000804 <getRNG+0xc>

	data = RNG->DR;
 8000810:	4b04      	ldr	r3, [pc, #16]	; (8000824 <getRNG+0x2c>)
 8000812:	689b      	ldr	r3, [r3, #8]
 8000814:	607b      	str	r3, [r7, #4]
	return data;
 8000816:	687b      	ldr	r3, [r7, #4]
}
 8000818:	4618      	mov	r0, r3
 800081a:	370c      	adds	r7, #12
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr
 8000824:	50060800 	.word	0x50060800

08000828 <shuffleDeck>:

//shuffle array using the rng value
void shuffleDeck(Card deck[], int size)
{
 8000828:	b590      	push	{r4, r7, lr}
 800082a:	b089      	sub	sp, #36	; 0x24
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < size; i++)
 8000832:	2300      	movs	r3, #0
 8000834:	61fb      	str	r3, [r7, #28]
 8000836:	e048      	b.n	80008ca <shuffleDeck+0xa2>
	{
		int swap = getRNG() % (size - 1);
 8000838:	f7ff ffde 	bl	80007f8 <getRNG>
 800083c:	4603      	mov	r3, r0
 800083e:	683a      	ldr	r2, [r7, #0]
 8000840:	3a01      	subs	r2, #1
 8000842:	fbb3 f1f2 	udiv	r1, r3, r2
 8000846:	fb01 f202 	mul.w	r2, r1, r2
 800084a:	1a9b      	subs	r3, r3, r2
 800084c:	61bb      	str	r3, [r7, #24]
		Card temp = deck[i];
 800084e:	69fa      	ldr	r2, [r7, #28]
 8000850:	4613      	mov	r3, r2
 8000852:	005b      	lsls	r3, r3, #1
 8000854:	4413      	add	r3, r2
 8000856:	009b      	lsls	r3, r3, #2
 8000858:	4413      	add	r3, r2
 800085a:	687a      	ldr	r2, [r7, #4]
 800085c:	441a      	add	r2, r3
 800085e:	f107 0308 	add.w	r3, r7, #8
 8000862:	4614      	mov	r4, r2
 8000864:	6820      	ldr	r0, [r4, #0]
 8000866:	6861      	ldr	r1, [r4, #4]
 8000868:	68a2      	ldr	r2, [r4, #8]
 800086a:	c307      	stmia	r3!, {r0, r1, r2}
 800086c:	7b22      	ldrb	r2, [r4, #12]
 800086e:	701a      	strb	r2, [r3, #0]
		deck[i] = deck[swap];
 8000870:	69ba      	ldr	r2, [r7, #24]
 8000872:	4613      	mov	r3, r2
 8000874:	005b      	lsls	r3, r3, #1
 8000876:	4413      	add	r3, r2
 8000878:	009b      	lsls	r3, r3, #2
 800087a:	4413      	add	r3, r2
 800087c:	687a      	ldr	r2, [r7, #4]
 800087e:	18d1      	adds	r1, r2, r3
 8000880:	69fa      	ldr	r2, [r7, #28]
 8000882:	4613      	mov	r3, r2
 8000884:	005b      	lsls	r3, r3, #1
 8000886:	4413      	add	r3, r2
 8000888:	009b      	lsls	r3, r3, #2
 800088a:	4413      	add	r3, r2
 800088c:	687a      	ldr	r2, [r7, #4]
 800088e:	4413      	add	r3, r2
 8000890:	460a      	mov	r2, r1
 8000892:	6814      	ldr	r4, [r2, #0]
 8000894:	6850      	ldr	r0, [r2, #4]
 8000896:	6891      	ldr	r1, [r2, #8]
 8000898:	601c      	str	r4, [r3, #0]
 800089a:	6058      	str	r0, [r3, #4]
 800089c:	6099      	str	r1, [r3, #8]
 800089e:	7b12      	ldrb	r2, [r2, #12]
 80008a0:	731a      	strb	r2, [r3, #12]
		deck[swap] = temp;
 80008a2:	69ba      	ldr	r2, [r7, #24]
 80008a4:	4613      	mov	r3, r2
 80008a6:	005b      	lsls	r3, r3, #1
 80008a8:	4413      	add	r3, r2
 80008aa:	009b      	lsls	r3, r3, #2
 80008ac:	4413      	add	r3, r2
 80008ae:	687a      	ldr	r2, [r7, #4]
 80008b0:	4413      	add	r3, r2
 80008b2:	461c      	mov	r4, r3
 80008b4:	f107 0308 	add.w	r3, r7, #8
 80008b8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80008ba:	6020      	str	r0, [r4, #0]
 80008bc:	6061      	str	r1, [r4, #4]
 80008be:	60a2      	str	r2, [r4, #8]
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	7323      	strb	r3, [r4, #12]
	for (int i = 0; i < size; i++)
 80008c4:	69fb      	ldr	r3, [r7, #28]
 80008c6:	3301      	adds	r3, #1
 80008c8:	61fb      	str	r3, [r7, #28]
 80008ca:	69fa      	ldr	r2, [r7, #28]
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	429a      	cmp	r2, r3
 80008d0:	dbb2      	blt.n	8000838 <shuffleDeck+0x10>
	}
}
 80008d2:	bf00      	nop
 80008d4:	bf00      	nop
 80008d6:	3724      	adds	r7, #36	; 0x24
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd90      	pop	{r4, r7, pc}

080008dc <main>:
void print_card(Card card);
void place_bet(int option);


int main(void)
{
 80008dc:	b590      	push	{r4, r7, lr}
 80008de:	f5ad 7d41 	sub.w	sp, sp, #772	; 0x304
 80008e2:	af02      	add	r7, sp, #8

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008e4:	f001 f89b 	bl	8001a1e <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80008e8:	f000 ff36 	bl	8001758 <SystemClock_Config>
  /* Initialize all configured peripherals */
  MX_RNG_Init();
 80008ec:	f000 ff7a 	bl	80017e4 <MX_RNG_Init>

  UART_init();
 80008f0:	f7ff fc74 	bl	80001dc <UART_init>
  RNG_init();
 80008f4:	f7ff fdc4 	bl	8000480 <RNG_init>
  Card deck[52];

  uint8_t dealerScore;
  uint8_t playerScore;

  uint8_t cashed = 0;
 80008f8:	2300      	movs	r3, #0
 80008fa:	f887 32f5 	strb.w	r3, [r7, #757]	; 0x2f5
	  RESET_HANDS,
	  BUY_BACK_IN,
	  SHUFFLE_DECK
  }state_var_type;

  state_var_type state = START_GAME;
 80008fe:	2300      	movs	r3, #0
 8000900:	f887 32f4 	strb.w	r3, [r7, #756]	; 0x2f4

  uint8_t dealerDone = 0;
 8000904:	2300      	movs	r3, #0
 8000906:	f887 32f3 	strb.w	r3, [r7, #755]	; 0x2f3
  char string[7];
  string[0] = '\0';
 800090a:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 800090e:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 8000912:	2200      	movs	r2, #0
 8000914:	701a      	strb	r2, [r3, #0]

  //initialize Hand objects
  dealerHand = hand_init();
 8000916:	f7ff fef3 	bl	8000700 <hand_init>
 800091a:	f8c7 02b4 	str.w	r0, [r7, #692]	; 0x2b4
  playerHand = hand_init();
 800091e:	f7ff feef 	bl	8000700 <hand_init>
 8000922:	f8c7 02b0 	str.w	r0, [r7, #688]	; 0x2b0


  while (1)
  {
	  switch(state)
 8000926:	f897 32f4 	ldrb.w	r3, [r7, #756]	; 0x2f4
 800092a:	2b0b      	cmp	r3, #11
 800092c:	f200 848b 	bhi.w	8001246 <main+0x96a>
 8000930:	a201      	add	r2, pc, #4	; (adr r2, 8000938 <main+0x5c>)
 8000932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000936:	bf00      	nop
 8000938:	08000969 	.word	0x08000969
 800093c:	080009a7 	.word	0x080009a7
 8000940:	08000a8d 	.word	0x08000a8d
 8000944:	08000c65 	.word	0x08000c65
 8000948:	08000d15 	.word	0x08000d15
 800094c:	08000dcd 	.word	0x08000dcd
 8000950:	08000e29 	.word	0x08000e29
 8000954:	08000ee1 	.word	0x08000ee1
 8000958:	08001129 	.word	0x08001129
 800095c:	080011f1 	.word	0x080011f1
 8000960:	08000a01 	.word	0x08000a01
 8000964:	08000a47 	.word	0x08000a47
	  {
	  	  case START_GAME:
	  		  UART_print("\033[H");
 8000968:	48b6      	ldr	r0, [pc, #728]	; (8000c44 <main+0x368>)
 800096a:	f7ff fccb 	bl	8000304 <UART_print>
	  		  UART_print("\033[2J");
 800096e:	48b6      	ldr	r0, [pc, #728]	; (8000c48 <main+0x36c>)
 8000970:	f7ff fcc8 	bl	8000304 <UART_print>
	  		  UART_print("\033[15;15H");
 8000974:	48b5      	ldr	r0, [pc, #724]	; (8000c4c <main+0x370>)
 8000976:	f7ff fcc5 	bl	8000304 <UART_print>
	  		  UART_print("Press Y to GAMBLE");
 800097a:	48b5      	ldr	r0, [pc, #724]	; (8000c50 <main+0x374>)
 800097c:	f7ff fcc2 	bl	8000304 <UART_print>

	  		  //stay in this state until player clicks 'y'
	  		  char start = read_input();
 8000980:	f7ff fd4e 	bl	8000420 <read_input>
 8000984:	4603      	mov	r3, r0
 8000986:	f887 32ac 	strb.w	r3, [r7, #684]	; 0x2ac
	  		  if (start == 'y' || start == 'Y')
 800098a:	f897 32ac 	ldrb.w	r3, [r7, #684]	; 0x2ac
 800098e:	2b79      	cmp	r3, #121	; 0x79
 8000990:	d004      	beq.n	800099c <main+0xc0>
 8000992:	f897 32ac 	ldrb.w	r3, [r7, #684]	; 0x2ac
 8000996:	2b59      	cmp	r3, #89	; 0x59
 8000998:	f040 8458 	bne.w	800124c <main+0x970>
	  		  {
	  			  //start the game
	  			  state = BETTING;
 800099c:	2301      	movs	r3, #1
 800099e:	f887 32f4 	strb.w	r3, [r7, #756]	; 0x2f4
	  		  }

	  		  break;
 80009a2:	f000 bc53 	b.w	800124c <main+0x970>

	  	  case BETTING:
	  		  //check if total money > bet
	  		  if (money >= 500)
 80009a6:	4bab      	ldr	r3, [pc, #684]	; (8000c54 <main+0x378>)
 80009a8:	881b      	ldrh	r3, [r3, #0]
 80009aa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80009ae:	d307      	bcc.n	80009c0 <main+0xe4>
	  		  {
	  			  place_bet(3);
 80009b0:	2003      	movs	r0, #3
 80009b2:	f000 fc81 	bl	80012b8 <place_bet>
	  			  state = SHUFFLE_DECK;
 80009b6:	230b      	movs	r3, #11
 80009b8:	f887 32f4 	strb.w	r3, [r7, #756]	; 0x2f4
	  		  else
	  		  {
	  			  place_bet(0);
	  			  state = BUY_BACK_IN;
	  		  }
	  		  break;
 80009bc:	f000 bc53 	b.w	8001266 <main+0x98a>
	  		  else if (money >= 250)
 80009c0:	4ba4      	ldr	r3, [pc, #656]	; (8000c54 <main+0x378>)
 80009c2:	881b      	ldrh	r3, [r3, #0]
 80009c4:	2bf9      	cmp	r3, #249	; 0xf9
 80009c6:	d907      	bls.n	80009d8 <main+0xfc>
	  			  place_bet(2);
 80009c8:	2002      	movs	r0, #2
 80009ca:	f000 fc75 	bl	80012b8 <place_bet>
	  			  state = SHUFFLE_DECK;
 80009ce:	230b      	movs	r3, #11
 80009d0:	f887 32f4 	strb.w	r3, [r7, #756]	; 0x2f4
	  		  break;
 80009d4:	f000 bc47 	b.w	8001266 <main+0x98a>
	  		  else if (money >= 100)
 80009d8:	4b9e      	ldr	r3, [pc, #632]	; (8000c54 <main+0x378>)
 80009da:	881b      	ldrh	r3, [r3, #0]
 80009dc:	2b63      	cmp	r3, #99	; 0x63
 80009de:	d907      	bls.n	80009f0 <main+0x114>
	  			  place_bet(1);
 80009e0:	2001      	movs	r0, #1
 80009e2:	f000 fc69 	bl	80012b8 <place_bet>
	  			  state = SHUFFLE_DECK;
 80009e6:	230b      	movs	r3, #11
 80009e8:	f887 32f4 	strb.w	r3, [r7, #756]	; 0x2f4
	  		  break;
 80009ec:	f000 bc3b 	b.w	8001266 <main+0x98a>
	  			  place_bet(0);
 80009f0:	2000      	movs	r0, #0
 80009f2:	f000 fc61 	bl	80012b8 <place_bet>
	  			  state = BUY_BACK_IN;
 80009f6:	230a      	movs	r3, #10
 80009f8:	f887 32f4 	strb.w	r3, [r7, #756]	; 0x2f4
	  		  break;
 80009fc:	f000 bc33 	b.w	8001266 <main+0x98a>

	  	  case BUY_BACK_IN:
	  		  UART_print("\033[H");
 8000a00:	4890      	ldr	r0, [pc, #576]	; (8000c44 <main+0x368>)
 8000a02:	f7ff fc7f 	bl	8000304 <UART_print>
	  		  UART_print("\033[2J");
 8000a06:	4890      	ldr	r0, [pc, #576]	; (8000c48 <main+0x36c>)
 8000a08:	f7ff fc7c 	bl	8000304 <UART_print>
	  		  UART_print("\033[15;15H");
 8000a0c:	488f      	ldr	r0, [pc, #572]	; (8000c4c <main+0x370>)
 8000a0e:	f7ff fc79 	bl	8000304 <UART_print>
	  		  UART_print("Buy Back In? [Y]");
 8000a12:	4891      	ldr	r0, [pc, #580]	; (8000c58 <main+0x37c>)
 8000a14:	f7ff fc76 	bl	8000304 <UART_print>

	  		  //stay in this state until player clicks 'y'
	  		  char buyIn = read_input();
 8000a18:	f7ff fd02 	bl	8000420 <read_input>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	f887 32af 	strb.w	r3, [r7, #687]	; 0x2af
	  		  if (buyIn == 'y' || buyIn == 'Y')
 8000a22:	f897 32af 	ldrb.w	r3, [r7, #687]	; 0x2af
 8000a26:	2b79      	cmp	r3, #121	; 0x79
 8000a28:	d004      	beq.n	8000a34 <main+0x158>
 8000a2a:	f897 32af 	ldrb.w	r3, [r7, #687]	; 0x2af
 8000a2e:	2b59      	cmp	r3, #89	; 0x59
 8000a30:	f040 840f 	bne.w	8001252 <main+0x976>
	  		  {
	  			  //start the game
	  			  money = 1000;
 8000a34:	4b87      	ldr	r3, [pc, #540]	; (8000c54 <main+0x378>)
 8000a36:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a3a:	801a      	strh	r2, [r3, #0]
	  			  state = BETTING;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	f887 32f4 	strb.w	r3, [r7, #756]	; 0x2f4
	  		  }

	  		  break;
 8000a42:	f000 bc06 	b.w	8001252 <main+0x976>

	  	  case SHUFFLE_DECK:
	  		  //initialize and shuffle deck
	  		  deck_init(deck);
 8000a46:	f107 0308 	add.w	r3, r7, #8
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f7ff fd48 	bl	80004e0 <deck_init>
	  		  shuffleDeck(deck, 52);
 8000a50:	f107 0308 	add.w	r3, r7, #8
 8000a54:	2134      	movs	r1, #52	; 0x34
 8000a56:	4618      	mov	r0, r3
 8000a58:	f7ff fee6 	bl	8000828 <shuffleDeck>

	  		  print_table(dealerHand, playerHand);
 8000a5c:	f8d7 12b0 	ldr.w	r1, [r7, #688]	; 0x2b0
 8000a60:	f8d7 02b4 	ldr.w	r0, [r7, #692]	; 0x2b4
 8000a64:	f000 fcec 	bl	8001440 <print_table>
	  		  for (int i = 0; i < DELAY; i++){}
 8000a68:	2300      	movs	r3, #0
 8000a6a:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 8000a6e:	e004      	b.n	8000a7a <main+0x19e>
 8000a70:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8000a74:	3301      	adds	r3, #1
 8000a76:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 8000a7a:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8000a7e:	4a77      	ldr	r2, [pc, #476]	; (8000c5c <main+0x380>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	dbf5      	blt.n	8000a70 <main+0x194>

	  		  state = DEAL_FIRST_CARDS;
 8000a84:	2302      	movs	r3, #2
 8000a86:	f887 32f4 	strb.w	r3, [r7, #756]	; 0x2f4
	  		  break;
 8000a8a:	e3ec      	b.n	8001266 <main+0x98a>

	  	  case DEAL_FIRST_CARDS:
	  		  //deal player's first card face up
	  		  addCard(playerHand, deck[deckIndex]);
 8000a8c:	4b74      	ldr	r3, [pc, #464]	; (8000c60 <main+0x384>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	461a      	mov	r2, r3
 8000a92:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8000a96:	f5a3 713c 	sub.w	r1, r3, #752	; 0x2f0
 8000a9a:	4613      	mov	r3, r2
 8000a9c:	005b      	lsls	r3, r3, #1
 8000a9e:	4413      	add	r3, r2
 8000aa0:	009b      	lsls	r3, r3, #2
 8000aa2:	4413      	add	r3, r2
 8000aa4:	440b      	add	r3, r1
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	4611      	mov	r1, r2
 8000aaa:	6858      	ldr	r0, [r3, #4]
 8000aac:	4602      	mov	r2, r0
 8000aae:	689c      	ldr	r4, [r3, #8]
 8000ab0:	4620      	mov	r0, r4
 8000ab2:	7b1b      	ldrb	r3, [r3, #12]
 8000ab4:	f88d 3000 	strb.w	r3, [sp]
 8000ab8:	4603      	mov	r3, r0
 8000aba:	f8d7 02b0 	ldr.w	r0, [r7, #688]	; 0x2b0
 8000abe:	f7ff fe30 	bl	8000722 <addCard>
	  		  deckIndex++;
 8000ac2:	4b67      	ldr	r3, [pc, #412]	; (8000c60 <main+0x384>)
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	b2da      	uxtb	r2, r3
 8000aca:	4b65      	ldr	r3, [pc, #404]	; (8000c60 <main+0x384>)
 8000acc:	701a      	strb	r2, [r3, #0]
	  		  print_table(dealerHand, playerHand);
 8000ace:	f8d7 12b0 	ldr.w	r1, [r7, #688]	; 0x2b0
 8000ad2:	f8d7 02b4 	ldr.w	r0, [r7, #692]	; 0x2b4
 8000ad6:	f000 fcb3 	bl	8001440 <print_table>
	  		  for (int i = 0; i < DELAY; i++){}
 8000ada:	2300      	movs	r3, #0
 8000adc:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 8000ae0:	e004      	b.n	8000aec <main+0x210>
 8000ae2:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 8000aec:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8000af0:	4a5a      	ldr	r2, [pc, #360]	; (8000c5c <main+0x380>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	dbf5      	blt.n	8000ae2 <main+0x206>

	  		  //deal dealer's first card face down
	  		  addCard(dealerHand, deck[deckIndex]);
 8000af6:	4b5a      	ldr	r3, [pc, #360]	; (8000c60 <main+0x384>)
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	461a      	mov	r2, r3
 8000afc:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8000b00:	f5a3 713c 	sub.w	r1, r3, #752	; 0x2f0
 8000b04:	4613      	mov	r3, r2
 8000b06:	005b      	lsls	r3, r3, #1
 8000b08:	4413      	add	r3, r2
 8000b0a:	009b      	lsls	r3, r3, #2
 8000b0c:	4413      	add	r3, r2
 8000b0e:	440b      	add	r3, r1
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	4611      	mov	r1, r2
 8000b14:	6858      	ldr	r0, [r3, #4]
 8000b16:	4602      	mov	r2, r0
 8000b18:	689c      	ldr	r4, [r3, #8]
 8000b1a:	4620      	mov	r0, r4
 8000b1c:	7b1b      	ldrb	r3, [r3, #12]
 8000b1e:	f88d 3000 	strb.w	r3, [sp]
 8000b22:	4603      	mov	r3, r0
 8000b24:	f8d7 02b4 	ldr.w	r0, [r7, #692]	; 0x2b4
 8000b28:	f7ff fdfb 	bl	8000722 <addCard>
	  		  deckIndex++;
 8000b2c:	4b4c      	ldr	r3, [pc, #304]	; (8000c60 <main+0x384>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	3301      	adds	r3, #1
 8000b32:	b2da      	uxtb	r2, r3
 8000b34:	4b4a      	ldr	r3, [pc, #296]	; (8000c60 <main+0x384>)
 8000b36:	701a      	strb	r2, [r3, #0]
	  		  dealerHand->hand[0].visible = 0;
 8000b38:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	705a      	strb	r2, [r3, #1]
	  		  print_table(dealerHand, playerHand);
 8000b40:	f8d7 12b0 	ldr.w	r1, [r7, #688]	; 0x2b0
 8000b44:	f8d7 02b4 	ldr.w	r0, [r7, #692]	; 0x2b4
 8000b48:	f000 fc7a 	bl	8001440 <print_table>
	  		  for (int i = 0; i < DELAY; i++){}
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8000b52:	e004      	b.n	8000b5e <main+0x282>
 8000b54:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8000b58:	3301      	adds	r3, #1
 8000b5a:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8000b5e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8000b62:	4a3e      	ldr	r2, [pc, #248]	; (8000c5c <main+0x380>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	dbf5      	blt.n	8000b54 <main+0x278>

	  		  //deal players second card faceup
	  		  addCard(playerHand, deck[deckIndex]);
 8000b68:	4b3d      	ldr	r3, [pc, #244]	; (8000c60 <main+0x384>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8000b72:	f5a3 713c 	sub.w	r1, r3, #752	; 0x2f0
 8000b76:	4613      	mov	r3, r2
 8000b78:	005b      	lsls	r3, r3, #1
 8000b7a:	4413      	add	r3, r2
 8000b7c:	009b      	lsls	r3, r3, #2
 8000b7e:	4413      	add	r3, r2
 8000b80:	440b      	add	r3, r1
 8000b82:	681a      	ldr	r2, [r3, #0]
 8000b84:	4611      	mov	r1, r2
 8000b86:	6858      	ldr	r0, [r3, #4]
 8000b88:	4602      	mov	r2, r0
 8000b8a:	689c      	ldr	r4, [r3, #8]
 8000b8c:	4620      	mov	r0, r4
 8000b8e:	7b1b      	ldrb	r3, [r3, #12]
 8000b90:	f88d 3000 	strb.w	r3, [sp]
 8000b94:	4603      	mov	r3, r0
 8000b96:	f8d7 02b0 	ldr.w	r0, [r7, #688]	; 0x2b0
 8000b9a:	f7ff fdc2 	bl	8000722 <addCard>
	  		  deckIndex++;
 8000b9e:	4b30      	ldr	r3, [pc, #192]	; (8000c60 <main+0x384>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	b2da      	uxtb	r2, r3
 8000ba6:	4b2e      	ldr	r3, [pc, #184]	; (8000c60 <main+0x384>)
 8000ba8:	701a      	strb	r2, [r3, #0]
	  		  print_table(dealerHand, playerHand);
 8000baa:	f8d7 12b0 	ldr.w	r1, [r7, #688]	; 0x2b0
 8000bae:	f8d7 02b4 	ldr.w	r0, [r7, #692]	; 0x2b4
 8000bb2:	f000 fc45 	bl	8001440 <print_table>
	  		  for (int i = 0; i < DELAY; i++){}
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8000bbc:	e004      	b.n	8000bc8 <main+0x2ec>
 8000bbe:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8000bc8:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8000bcc:	4a23      	ldr	r2, [pc, #140]	; (8000c5c <main+0x380>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	dbf5      	blt.n	8000bbe <main+0x2e2>

	  		  //play dealer's second card face up
	  		  addCard(dealerHand, deck[deckIndex]);
 8000bd2:	4b23      	ldr	r3, [pc, #140]	; (8000c60 <main+0x384>)
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8000bdc:	f5a3 713c 	sub.w	r1, r3, #752	; 0x2f0
 8000be0:	4613      	mov	r3, r2
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	4413      	add	r3, r2
 8000be6:	009b      	lsls	r3, r3, #2
 8000be8:	4413      	add	r3, r2
 8000bea:	440b      	add	r3, r1
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	4611      	mov	r1, r2
 8000bf0:	6858      	ldr	r0, [r3, #4]
 8000bf2:	4602      	mov	r2, r0
 8000bf4:	689c      	ldr	r4, [r3, #8]
 8000bf6:	4620      	mov	r0, r4
 8000bf8:	7b1b      	ldrb	r3, [r3, #12]
 8000bfa:	f88d 3000 	strb.w	r3, [sp]
 8000bfe:	4603      	mov	r3, r0
 8000c00:	f8d7 02b4 	ldr.w	r0, [r7, #692]	; 0x2b4
 8000c04:	f7ff fd8d 	bl	8000722 <addCard>
	  		  deckIndex++;
 8000c08:	4b15      	ldr	r3, [pc, #84]	; (8000c60 <main+0x384>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	b2da      	uxtb	r2, r3
 8000c10:	4b13      	ldr	r3, [pc, #76]	; (8000c60 <main+0x384>)
 8000c12:	701a      	strb	r2, [r3, #0]
	  		  print_table(dealerHand, playerHand);
 8000c14:	f8d7 12b0 	ldr.w	r1, [r7, #688]	; 0x2b0
 8000c18:	f8d7 02b4 	ldr.w	r0, [r7, #692]	; 0x2b4
 8000c1c:	f000 fc10 	bl	8001440 <print_table>
	  		  for (int i = 0; i < DELAY; i++){}
 8000c20:	2300      	movs	r3, #0
 8000c22:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
 8000c26:	e004      	b.n	8000c32 <main+0x356>
 8000c28:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
 8000c32:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 8000c36:	4a09      	ldr	r2, [pc, #36]	; (8000c5c <main+0x380>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	dbf5      	blt.n	8000c28 <main+0x34c>

	  		  state = CALCULATE_HANDS;
 8000c3c:	2303      	movs	r3, #3
 8000c3e:	f887 32f4 	strb.w	r3, [r7, #756]	; 0x2f4
	  		  break;
 8000c42:	e310      	b.n	8001266 <main+0x98a>
 8000c44:	08003594 	.word	0x08003594
 8000c48:	08003598 	.word	0x08003598
 8000c4c:	080035a0 	.word	0x080035a0
 8000c50:	080035ac 	.word	0x080035ac
 8000c54:	20000000 	.word	0x20000000
 8000c58:	080035c0 	.word	0x080035c0
 8000c5c:	002625a0 	.word	0x002625a0
 8000c60:	20000091 	.word	0x20000091

	  	  case CALCULATE_HANDS:
	  		  //check if the dealer/player has 21
	  		  dealerScore = calculateHandValue(dealerHand);
 8000c64:	f8d7 02b4 	ldr.w	r0, [r7, #692]	; 0x2b4
 8000c68:	f7ff fd84 	bl	8000774 <calculateHandValue>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	f887 32f7 	strb.w	r3, [r7, #759]	; 0x2f7
	  		  playerScore = calculateHandValue(playerHand);
 8000c72:	f8d7 02b0 	ldr.w	r0, [r7, #688]	; 0x2b0
 8000c76:	f7ff fd7d 	bl	8000774 <calculateHandValue>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	f887 32f6 	strb.w	r3, [r7, #758]	; 0x2f6

	  		  //set dealer wins flag
	  		  if (dealerScore == 21)
 8000c80:	f897 32f7 	ldrb.w	r3, [r7, #759]	; 0x2f7
 8000c84:	2b15      	cmp	r3, #21
 8000c86:	d105      	bne.n	8000c94 <main+0x3b8>
	  		  {
	  			  dealerWin = 1;
 8000c88:	4bc1      	ldr	r3, [pc, #772]	; (8000f90 <main+0x6b4>)
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	701a      	strb	r2, [r3, #0]
	  			  state = ROUND_DONE;
 8000c8e:	2307      	movs	r3, #7
 8000c90:	f887 32f4 	strb.w	r3, [r7, #756]	; 0x2f4
	  		  }

	  		  //set player wins flag
	  		  if (playerScore == 21)
 8000c94:	f897 32f6 	ldrb.w	r3, [r7, #758]	; 0x2f6
 8000c98:	2b15      	cmp	r3, #21
 8000c9a:	d105      	bne.n	8000ca8 <main+0x3cc>
	  		  {
	  			  playerWin = 1;
 8000c9c:	4bbd      	ldr	r3, [pc, #756]	; (8000f94 <main+0x6b8>)
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	701a      	strb	r2, [r3, #0]
	  			  state = ROUND_DONE;
 8000ca2:	2307      	movs	r3, #7
 8000ca4:	f887 32f4 	strb.w	r3, [r7, #756]	; 0x2f4
	  		  }

	  		  //check if dealer busts
	  		  if (dealerScore > 21)
 8000ca8:	f897 32f7 	ldrb.w	r3, [r7, #759]	; 0x2f7
 8000cac:	2b15      	cmp	r3, #21
 8000cae:	d905      	bls.n	8000cbc <main+0x3e0>
	  		  {
	  			  dealerWin = 2;
 8000cb0:	4bb7      	ldr	r3, [pc, #732]	; (8000f90 <main+0x6b4>)
 8000cb2:	2202      	movs	r2, #2
 8000cb4:	701a      	strb	r2, [r3, #0]
	  			  state = ROUND_DONE;
 8000cb6:	2307      	movs	r3, #7
 8000cb8:	f887 32f4 	strb.w	r3, [r7, #756]	; 0x2f4
	  		  }

	  		  //check if player busts
	  		  if (playerScore > 21)
 8000cbc:	f897 32f6 	ldrb.w	r3, [r7, #758]	; 0x2f6
 8000cc0:	2b15      	cmp	r3, #21
 8000cc2:	d905      	bls.n	8000cd0 <main+0x3f4>
	  		  {
	  			  playerWin = 2;
 8000cc4:	4bb3      	ldr	r3, [pc, #716]	; (8000f94 <main+0x6b8>)
 8000cc6:	2202      	movs	r2, #2
 8000cc8:	701a      	strb	r2, [r3, #0]
	  			  state = ROUND_DONE;
 8000cca:	2307      	movs	r3, #7
 8000ccc:	f887 32f4 	strb.w	r3, [r7, #756]	; 0x2f4
	  		  }

	  		  //if no one wins yet then move to the player's choice
	  		  if ((dealerWin == 0) && (playerWin == 0) && (dealerDone == 0))
 8000cd0:	4baf      	ldr	r3, [pc, #700]	; (8000f90 <main+0x6b4>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d10a      	bne.n	8000cee <main+0x412>
 8000cd8:	4bae      	ldr	r3, [pc, #696]	; (8000f94 <main+0x6b8>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d106      	bne.n	8000cee <main+0x412>
 8000ce0:	f897 32f3 	ldrb.w	r3, [r7, #755]	; 0x2f3
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d102      	bne.n	8000cee <main+0x412>
	  		  {
	  			  state = PLAYER_CHOICE;
 8000ce8:	2304      	movs	r3, #4
 8000cea:	f887 32f4 	strb.w	r3, [r7, #756]	; 0x2f4
	  		  }

	  		if ((dealerWin == 0) && (playerWin == 0) && (dealerDone == 1))
 8000cee:	4ba8      	ldr	r3, [pc, #672]	; (8000f90 <main+0x6b4>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	f040 82b0 	bne.w	8001258 <main+0x97c>
 8000cf8:	4ba6      	ldr	r3, [pc, #664]	; (8000f94 <main+0x6b8>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	f040 82ab 	bne.w	8001258 <main+0x97c>
 8000d02:	f897 32f3 	ldrb.w	r3, [r7, #755]	; 0x2f3
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	f040 82a6 	bne.w	8001258 <main+0x97c>
	  		{
	  			state = ROUND_DONE;
 8000d0c:	2307      	movs	r3, #7
 8000d0e:	f887 32f4 	strb.w	r3, [r7, #756]	; 0x2f4
	  		}
	  		  break;
 8000d12:	e2a1      	b.n	8001258 <main+0x97c>

	  	  case PLAYER_CHOICE:
	  		  print_table(dealerHand, playerHand);
 8000d14:	f8d7 12b0 	ldr.w	r1, [r7, #688]	; 0x2b0
 8000d18:	f8d7 02b4 	ldr.w	r0, [r7, #692]	; 0x2b4
 8000d1c:	f000 fb90 	bl	8001440 <print_table>
	  		  for (int i = 0; i < DELAY; i++){}
 8000d20:	2300      	movs	r3, #0
 8000d22:	f8c7 32d8 	str.w	r3, [r7, #728]	; 0x2d8
 8000d26:	e004      	b.n	8000d32 <main+0x456>
 8000d28:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	f8c7 32d8 	str.w	r3, [r7, #728]	; 0x2d8
 8000d32:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 8000d36:	4a98      	ldr	r2, [pc, #608]	; (8000f98 <main+0x6bc>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	dbf5      	blt.n	8000d28 <main+0x44c>
	  		  UART_print("\033[5;30H");
 8000d3c:	4897      	ldr	r0, [pc, #604]	; (8000f9c <main+0x6c0>)
 8000d3e:	f7ff fae1 	bl	8000304 <UART_print>
	  		  UART_print("\033[0K");		//clear line from cursor to the right
 8000d42:	4897      	ldr	r0, [pc, #604]	; (8000fa0 <main+0x6c4>)
 8000d44:	f7ff fade 	bl	8000304 <UART_print>
	  		  UART_print("Hit[H] or Stand[S]?");
 8000d48:	4896      	ldr	r0, [pc, #600]	; (8000fa4 <main+0x6c8>)
 8000d4a:	f7ff fadb 	bl	8000304 <UART_print>


	  		  char choice = read_input();
 8000d4e:	f7ff fb67 	bl	8000420 <read_input>
 8000d52:	4603      	mov	r3, r0
 8000d54:	f887 32ad 	strb.w	r3, [r7, #685]	; 0x2ad
	  		  //for (int i = 0; i < DELAY; i++){}

	  		  if (choice == 'h' || choice == 'H')
 8000d58:	f897 32ad 	ldrb.w	r3, [r7, #685]	; 0x2ad
 8000d5c:	2b68      	cmp	r3, #104	; 0x68
 8000d5e:	d003      	beq.n	8000d68 <main+0x48c>
 8000d60:	f897 32ad 	ldrb.w	r3, [r7, #685]	; 0x2ad
 8000d64:	2b48      	cmp	r3, #72	; 0x48
 8000d66:	d124      	bne.n	8000db2 <main+0x4d6>
	  		  {
	  			  //deal player another card
	  			  addCard(playerHand, deck[deckIndex]);
 8000d68:	4b8f      	ldr	r3, [pc, #572]	; (8000fa8 <main+0x6cc>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8000d72:	f5a3 713c 	sub.w	r1, r3, #752	; 0x2f0
 8000d76:	4613      	mov	r3, r2
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	4413      	add	r3, r2
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	4413      	add	r3, r2
 8000d80:	440b      	add	r3, r1
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	4611      	mov	r1, r2
 8000d86:	6858      	ldr	r0, [r3, #4]
 8000d88:	4602      	mov	r2, r0
 8000d8a:	689c      	ldr	r4, [r3, #8]
 8000d8c:	4620      	mov	r0, r4
 8000d8e:	7b1b      	ldrb	r3, [r3, #12]
 8000d90:	f88d 3000 	strb.w	r3, [sp]
 8000d94:	4603      	mov	r3, r0
 8000d96:	f8d7 02b0 	ldr.w	r0, [r7, #688]	; 0x2b0
 8000d9a:	f7ff fcc2 	bl	8000722 <addCard>
	  			  deckIndex++;
 8000d9e:	4b82      	ldr	r3, [pc, #520]	; (8000fa8 <main+0x6cc>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	3301      	adds	r3, #1
 8000da4:	b2da      	uxtb	r2, r3
 8000da6:	4b80      	ldr	r3, [pc, #512]	; (8000fa8 <main+0x6cc>)
 8000da8:	701a      	strb	r2, [r3, #0]
	  			  state = CALCULATE_HANDS;
 8000daa:	2303      	movs	r3, #3
 8000dac:	f887 32f4 	strb.w	r3, [r7, #756]	; 0x2f4
	  		  }
	  		  else if (choice == 's' || choice == 'S')
	  		  {
	  			  state = DEALER_FLIPS;
	  		  }
	  		  break;
 8000db0:	e255      	b.n	800125e <main+0x982>
	  		  else if (choice == 's' || choice == 'S')
 8000db2:	f897 32ad 	ldrb.w	r3, [r7, #685]	; 0x2ad
 8000db6:	2b73      	cmp	r3, #115	; 0x73
 8000db8:	d004      	beq.n	8000dc4 <main+0x4e8>
 8000dba:	f897 32ad 	ldrb.w	r3, [r7, #685]	; 0x2ad
 8000dbe:	2b53      	cmp	r3, #83	; 0x53
 8000dc0:	f040 824d 	bne.w	800125e <main+0x982>
	  			  state = DEALER_FLIPS;
 8000dc4:	2305      	movs	r3, #5
 8000dc6:	f887 32f4 	strb.w	r3, [r7, #756]	; 0x2f4
	  		  break;
 8000dca:	e248      	b.n	800125e <main+0x982>

	  	  case DEALER_FLIPS:
	  		  //flip dealers face down card face up
	  		  dealerHand->hand[0].visible = 1;
 8000dcc:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	705a      	strb	r2, [r3, #1]
	  		  print_table(dealerHand, playerHand);
 8000dd4:	f8d7 12b0 	ldr.w	r1, [r7, #688]	; 0x2b0
 8000dd8:	f8d7 02b4 	ldr.w	r0, [r7, #692]	; 0x2b4
 8000ddc:	f000 fb30 	bl	8001440 <print_table>
	  		  for (int i = 0; i < DELAY; i++){}
 8000de0:	2300      	movs	r3, #0
 8000de2:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4
 8000de6:	e004      	b.n	8000df2 <main+0x516>
 8000de8:	f8d7 32d4 	ldr.w	r3, [r7, #724]	; 0x2d4
 8000dec:	3301      	adds	r3, #1
 8000dee:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4
 8000df2:	f8d7 32d4 	ldr.w	r3, [r7, #724]	; 0x2d4
 8000df6:	4a68      	ldr	r2, [pc, #416]	; (8000f98 <main+0x6bc>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	dbf5      	blt.n	8000de8 <main+0x50c>
	  		  //check if dealer hand is > 16
	  		  dealerScore = calculateHandValue(dealerHand);
 8000dfc:	f8d7 02b4 	ldr.w	r0, [r7, #692]	; 0x2b4
 8000e00:	f7ff fcb8 	bl	8000774 <calculateHandValue>
 8000e04:	4603      	mov	r3, r0
 8000e06:	f887 32f7 	strb.w	r3, [r7, #759]	; 0x2f7
	  		  if (dealerScore > 16)
 8000e0a:	f897 32f7 	ldrb.w	r3, [r7, #759]	; 0x2f7
 8000e0e:	2b10      	cmp	r3, #16
 8000e10:	d906      	bls.n	8000e20 <main+0x544>
	  		  {
	  			  //calculate to see who wins
	  			  dealerDone = 1;
 8000e12:	2301      	movs	r3, #1
 8000e14:	f887 32f3 	strb.w	r3, [r7, #755]	; 0x2f3
	  			  state = CALCULATE_HANDS;
 8000e18:	2303      	movs	r3, #3
 8000e1a:	f887 32f4 	strb.w	r3, [r7, #756]	; 0x2f4
	  		  }
	  		  else
	  		  {
	  			  state = DEALER_TURN;
	  		  }
	  		  break;
 8000e1e:	e222      	b.n	8001266 <main+0x98a>
	  			  state = DEALER_TURN;
 8000e20:	2306      	movs	r3, #6
 8000e22:	f887 32f4 	strb.w	r3, [r7, #756]	; 0x2f4
	  		  break;
 8000e26:	e21e      	b.n	8001266 <main+0x98a>

	  	  case DEALER_TURN:
	  		  //add cards to dealer until dealers score is greater than 16
	  		  dealerScore = calculateHandValue(dealerHand);
 8000e28:	f8d7 02b4 	ldr.w	r0, [r7, #692]	; 0x2b4
 8000e2c:	f7ff fca2 	bl	8000774 <calculateHandValue>
 8000e30:	4603      	mov	r3, r0
 8000e32:	f887 32f7 	strb.w	r3, [r7, #759]	; 0x2f7
	  		  print_table(dealerHand, playerHand);
 8000e36:	f8d7 12b0 	ldr.w	r1, [r7, #688]	; 0x2b0
 8000e3a:	f8d7 02b4 	ldr.w	r0, [r7, #692]	; 0x2b4
 8000e3e:	f000 faff 	bl	8001440 <print_table>
	  		  for (int i = 0; i < DELAY; i++){}
 8000e42:	2300      	movs	r3, #0
 8000e44:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
 8000e48:	e004      	b.n	8000e54 <main+0x578>
 8000e4a:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 8000e4e:	3301      	adds	r3, #1
 8000e50:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
 8000e54:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 8000e58:	4a4f      	ldr	r2, [pc, #316]	; (8000f98 <main+0x6bc>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	dbf5      	blt.n	8000e4a <main+0x56e>

	  		  if (dealerScore < 17)
 8000e5e:	f897 32f7 	ldrb.w	r3, [r7, #759]	; 0x2f7
 8000e62:	2b10      	cmp	r3, #16
 8000e64:	d835      	bhi.n	8000ed2 <main+0x5f6>
	  		  {
	  			  //deal more cards to dealer
	  			  addCard(dealerHand, deck[deckIndex]);
 8000e66:	4b50      	ldr	r3, [pc, #320]	; (8000fa8 <main+0x6cc>)
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8000e70:	f5a3 713c 	sub.w	r1, r3, #752	; 0x2f0
 8000e74:	4613      	mov	r3, r2
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	4413      	add	r3, r2
 8000e7a:	009b      	lsls	r3, r3, #2
 8000e7c:	4413      	add	r3, r2
 8000e7e:	440b      	add	r3, r1
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	4611      	mov	r1, r2
 8000e84:	6858      	ldr	r0, [r3, #4]
 8000e86:	4602      	mov	r2, r0
 8000e88:	689c      	ldr	r4, [r3, #8]
 8000e8a:	4620      	mov	r0, r4
 8000e8c:	7b1b      	ldrb	r3, [r3, #12]
 8000e8e:	f88d 3000 	strb.w	r3, [sp]
 8000e92:	4603      	mov	r3, r0
 8000e94:	f8d7 02b4 	ldr.w	r0, [r7, #692]	; 0x2b4
 8000e98:	f7ff fc43 	bl	8000722 <addCard>
	  			  deckIndex++;
 8000e9c:	4b42      	ldr	r3, [pc, #264]	; (8000fa8 <main+0x6cc>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	b2da      	uxtb	r2, r3
 8000ea4:	4b40      	ldr	r3, [pc, #256]	; (8000fa8 <main+0x6cc>)
 8000ea6:	701a      	strb	r2, [r3, #0]
	  			  print_table(dealerHand, playerHand);
 8000ea8:	f8d7 12b0 	ldr.w	r1, [r7, #688]	; 0x2b0
 8000eac:	f8d7 02b4 	ldr.w	r0, [r7, #692]	; 0x2b4
 8000eb0:	f000 fac6 	bl	8001440 <print_table>
		  		  for (int i = 0; i < DELAY; i++){}
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
 8000eba:	e004      	b.n	8000ec6 <main+0x5ea>
 8000ebc:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
 8000ec6:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 8000eca:	4a33      	ldr	r2, [pc, #204]	; (8000f98 <main+0x6bc>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	dbf5      	blt.n	8000ebc <main+0x5e0>
	  		  else
	  		  {
	  			  dealerDone = 1;
	  			  state = CALCULATE_HANDS;
	  		  }
	  		  break;
 8000ed0:	e1c9      	b.n	8001266 <main+0x98a>
	  			  dealerDone = 1;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	f887 32f3 	strb.w	r3, [r7, #755]	; 0x2f3
	  			  state = CALCULATE_HANDS;
 8000ed8:	2303      	movs	r3, #3
 8000eda:	f887 32f4 	strb.w	r3, [r7, #756]	; 0x2f4
	  		  break;
 8000ede:	e1c2      	b.n	8001266 <main+0x98a>

	  	  case ROUND_DONE:
	  		  dealerHand->hand[0].visible = 1;
 8000ee0:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	705a      	strb	r2, [r3, #1]
	  		  print_table(dealerHand, playerHand);
 8000ee8:	f8d7 12b0 	ldr.w	r1, [r7, #688]	; 0x2b0
 8000eec:	f8d7 02b4 	ldr.w	r0, [r7, #692]	; 0x2b4
 8000ef0:	f000 faa6 	bl	8001440 <print_table>
	  		  //for (int i = 0; i < DELAY / 10; i++){}

	  		  //print dealers score at end
	  		  UART_print("\033[1;10H");
 8000ef4:	482d      	ldr	r0, [pc, #180]	; (8000fac <main+0x6d0>)
 8000ef6:	f7ff fa05 	bl	8000304 <UART_print>
	  		  string[0] = '\0';
 8000efa:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8000efe:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 8000f02:	2200      	movs	r2, #0
 8000f04:	701a      	strb	r2, [r3, #0]
	  		  toString(calculateHandValue(dealerHand), string, 7);
 8000f06:	f8d7 02b4 	ldr.w	r0, [r7, #692]	; 0x2b4
 8000f0a:	f7ff fc33 	bl	8000774 <calculateHandValue>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	4618      	mov	r0, r3
 8000f12:	463b      	mov	r3, r7
 8000f14:	2207      	movs	r2, #7
 8000f16:	4619      	mov	r1, r3
 8000f18:	f7ff fa10 	bl	800033c <toString>
	  		  UART_print(string);
 8000f1c:	463b      	mov	r3, r7
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f7ff f9f0 	bl	8000304 <UART_print>

	  		  for (int i = 0; i < DELAY; i++){}
 8000f24:	2300      	movs	r3, #0
 8000f26:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
 8000f2a:	e004      	b.n	8000f36 <main+0x65a>
 8000f2c:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 8000f30:	3301      	adds	r3, #1
 8000f32:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
 8000f36:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 8000f3a:	4a17      	ldr	r2, [pc, #92]	; (8000f98 <main+0x6bc>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	dbf5      	blt.n	8000f2c <main+0x650>

	  		  //dealer and player get blackjack
	  		  if ((dealerWin == 1) && (playerWin == 1))
 8000f40:	4b13      	ldr	r3, [pc, #76]	; (8000f90 <main+0x6b4>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d115      	bne.n	8000f74 <main+0x698>
 8000f48:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <main+0x6b8>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d111      	bne.n	8000f74 <main+0x698>
	  		  {
	  			  //tied
	  			  UART_print("\033[5;30H");
 8000f50:	4812      	ldr	r0, [pc, #72]	; (8000f9c <main+0x6c0>)
 8000f52:	f7ff f9d7 	bl	8000304 <UART_print>
	  			  UART_print("\033[0K");		//clear line from cursor to the right
 8000f56:	4812      	ldr	r0, [pc, #72]	; (8000fa0 <main+0x6c4>)
 8000f58:	f7ff f9d4 	bl	8000304 <UART_print>
	  			  UART_print("Push: Player and Dealer Tied");
 8000f5c:	4814      	ldr	r0, [pc, #80]	; (8000fb0 <main+0x6d4>)
 8000f5e:	f7ff f9d1 	bl	8000304 <UART_print>
	  			  money += currentBet;
 8000f62:	4b14      	ldr	r3, [pc, #80]	; (8000fb4 <main+0x6d8>)
 8000f64:	881a      	ldrh	r2, [r3, #0]
 8000f66:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <main+0x6dc>)
 8000f68:	881b      	ldrh	r3, [r3, #0]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	b29a      	uxth	r2, r3
 8000f6e:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <main+0x6d8>)
 8000f70:	801a      	strh	r2, [r3, #0]
 8000f72:	e0a6      	b.n	80010c2 <main+0x7e6>
	  		  }
	  		  //only dealer gets blackjack
	  		  else if (dealerWin == 1)
 8000f74:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <main+0x6b4>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d121      	bne.n	8000fc0 <main+0x6e4>
	  		  {
	  			  //dealer wins
	  			  UART_print("\033[5;30H");
 8000f7c:	4807      	ldr	r0, [pc, #28]	; (8000f9c <main+0x6c0>)
 8000f7e:	f7ff f9c1 	bl	8000304 <UART_print>
	  			  UART_print("\033[0K");		//clear line from cursor to the right
 8000f82:	4807      	ldr	r0, [pc, #28]	; (8000fa0 <main+0x6c4>)
 8000f84:	f7ff f9be 	bl	8000304 <UART_print>
	  			  UART_print("The House Always Wins");
 8000f88:	480c      	ldr	r0, [pc, #48]	; (8000fbc <main+0x6e0>)
 8000f8a:	f7ff f9bb 	bl	8000304 <UART_print>
 8000f8e:	e098      	b.n	80010c2 <main+0x7e6>
 8000f90:	20000092 	.word	0x20000092
 8000f94:	20000093 	.word	0x20000093
 8000f98:	002625a0 	.word	0x002625a0
 8000f9c:	080035d4 	.word	0x080035d4
 8000fa0:	080035dc 	.word	0x080035dc
 8000fa4:	080035e4 	.word	0x080035e4
 8000fa8:	20000091 	.word	0x20000091
 8000fac:	080035f8 	.word	0x080035f8
 8000fb0:	08003600 	.word	0x08003600
 8000fb4:	20000000 	.word	0x20000000
 8000fb8:	20000094 	.word	0x20000094
 8000fbc:	08003620 	.word	0x08003620
	  		  }
	  		  else if (playerWin == 1)
 8000fc0:	4baa      	ldr	r3, [pc, #680]	; (800126c <main+0x990>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d113      	bne.n	8000ff0 <main+0x714>
	  		  {
	  			  //player wins
	  			  UART_print("\033[5;30H");
 8000fc8:	48a9      	ldr	r0, [pc, #676]	; (8001270 <main+0x994>)
 8000fca:	f7ff f99b 	bl	8000304 <UART_print>
	  			  UART_print("\033[0K");		//clear line from cursor to the right
 8000fce:	48a9      	ldr	r0, [pc, #676]	; (8001274 <main+0x998>)
 8000fd0:	f7ff f998 	bl	8000304 <UART_print>
	  			  UART_print("$$ Nice Hand $$");
 8000fd4:	48a8      	ldr	r0, [pc, #672]	; (8001278 <main+0x99c>)
 8000fd6:	f7ff f995 	bl	8000304 <UART_print>
	  			  money += (currentBet * 2);
 8000fda:	4ba8      	ldr	r3, [pc, #672]	; (800127c <main+0x9a0>)
 8000fdc:	881b      	ldrh	r3, [r3, #0]
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	b29a      	uxth	r2, r3
 8000fe2:	4ba7      	ldr	r3, [pc, #668]	; (8001280 <main+0x9a4>)
 8000fe4:	881b      	ldrh	r3, [r3, #0]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	b29a      	uxth	r2, r3
 8000fea:	4ba5      	ldr	r3, [pc, #660]	; (8001280 <main+0x9a4>)
 8000fec:	801a      	strh	r2, [r3, #0]
 8000fee:	e068      	b.n	80010c2 <main+0x7e6>
	  		  }
	  		  //dealer busts
	  		  else if (dealerWin == 2)
 8000ff0:	4ba4      	ldr	r3, [pc, #656]	; (8001284 <main+0x9a8>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	2b02      	cmp	r3, #2
 8000ff6:	d113      	bne.n	8001020 <main+0x744>
	  		  {
	  			  //player wins
	  			  UART_print("\033[5;30H");
 8000ff8:	489d      	ldr	r0, [pc, #628]	; (8001270 <main+0x994>)
 8000ffa:	f7ff f983 	bl	8000304 <UART_print>
	  			  UART_print("\033[0K");		//clear line from cursor to the right
 8000ffe:	489d      	ldr	r0, [pc, #628]	; (8001274 <main+0x998>)
 8001000:	f7ff f980 	bl	8000304 <UART_print>
	  			  UART_print("$$ Nice Hand $$");
 8001004:	489c      	ldr	r0, [pc, #624]	; (8001278 <main+0x99c>)
 8001006:	f7ff f97d 	bl	8000304 <UART_print>
	  			  money += (currentBet * 2);
 800100a:	4b9c      	ldr	r3, [pc, #624]	; (800127c <main+0x9a0>)
 800100c:	881b      	ldrh	r3, [r3, #0]
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	b29a      	uxth	r2, r3
 8001012:	4b9b      	ldr	r3, [pc, #620]	; (8001280 <main+0x9a4>)
 8001014:	881b      	ldrh	r3, [r3, #0]
 8001016:	4413      	add	r3, r2
 8001018:	b29a      	uxth	r2, r3
 800101a:	4b99      	ldr	r3, [pc, #612]	; (8001280 <main+0x9a4>)
 800101c:	801a      	strh	r2, [r3, #0]
 800101e:	e050      	b.n	80010c2 <main+0x7e6>
	  		  }
	  		  //player busts
	  		  else if (playerWin == 2)
 8001020:	4b92      	ldr	r3, [pc, #584]	; (800126c <main+0x990>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	2b02      	cmp	r3, #2
 8001026:	d109      	bne.n	800103c <main+0x760>
	  		  {
	  			  //dealer wins
	  			  UART_print("\033[5;30H");
 8001028:	4891      	ldr	r0, [pc, #580]	; (8001270 <main+0x994>)
 800102a:	f7ff f96b 	bl	8000304 <UART_print>
	  			  UART_print("\033[0K");		//clear line from cursor to the right
 800102e:	4891      	ldr	r0, [pc, #580]	; (8001274 <main+0x998>)
 8001030:	f7ff f968 	bl	8000304 <UART_print>
	  			  UART_print("The House Always Wins");
 8001034:	4894      	ldr	r0, [pc, #592]	; (8001288 <main+0x9ac>)
 8001036:	f7ff f965 	bl	8000304 <UART_print>
 800103a:	e042      	b.n	80010c2 <main+0x7e6>
	  		  }
	  		  //check scores if neither busted or got blackjack
	  		  else if ((dealerWin == 0) && (playerWin == 0))
 800103c:	4b91      	ldr	r3, [pc, #580]	; (8001284 <main+0x9a8>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d13e      	bne.n	80010c2 <main+0x7e6>
 8001044:	4b89      	ldr	r3, [pc, #548]	; (800126c <main+0x990>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d13a      	bne.n	80010c2 <main+0x7e6>
	  		  {
	  			  if (dealerScore > playerScore)
 800104c:	f897 22f7 	ldrb.w	r2, [r7, #759]	; 0x2f7
 8001050:	f897 32f6 	ldrb.w	r3, [r7, #758]	; 0x2f6
 8001054:	429a      	cmp	r2, r3
 8001056:	d909      	bls.n	800106c <main+0x790>
	  			  {
	  				  //dealer wins
		  			  UART_print("\033[5;30H");
 8001058:	4885      	ldr	r0, [pc, #532]	; (8001270 <main+0x994>)
 800105a:	f7ff f953 	bl	8000304 <UART_print>
		  			  UART_print("\033[0K");		//clear line from cursor to the right
 800105e:	4885      	ldr	r0, [pc, #532]	; (8001274 <main+0x998>)
 8001060:	f7ff f950 	bl	8000304 <UART_print>
		  			  UART_print("The House Always Wins");
 8001064:	4888      	ldr	r0, [pc, #544]	; (8001288 <main+0x9ac>)
 8001066:	f7ff f94d 	bl	8000304 <UART_print>
 800106a:	e02a      	b.n	80010c2 <main+0x7e6>
	  			  }
	  			  else if (dealerScore < playerScore)
 800106c:	f897 22f7 	ldrb.w	r2, [r7, #759]	; 0x2f7
 8001070:	f897 32f6 	ldrb.w	r3, [r7, #758]	; 0x2f6
 8001074:	429a      	cmp	r2, r3
 8001076:	d213      	bcs.n	80010a0 <main+0x7c4>
	  			  {
	  				  //player wins
		  			  UART_print("\033[5;30H");
 8001078:	487d      	ldr	r0, [pc, #500]	; (8001270 <main+0x994>)
 800107a:	f7ff f943 	bl	8000304 <UART_print>
		  			  UART_print("\033[0K");		//clear line from cursor to the right
 800107e:	487d      	ldr	r0, [pc, #500]	; (8001274 <main+0x998>)
 8001080:	f7ff f940 	bl	8000304 <UART_print>
		  			  UART_print("$$ Nice Hand $$");
 8001084:	487c      	ldr	r0, [pc, #496]	; (8001278 <main+0x99c>)
 8001086:	f7ff f93d 	bl	8000304 <UART_print>
		  			  money += (currentBet * 2);
 800108a:	4b7c      	ldr	r3, [pc, #496]	; (800127c <main+0x9a0>)
 800108c:	881b      	ldrh	r3, [r3, #0]
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	b29a      	uxth	r2, r3
 8001092:	4b7b      	ldr	r3, [pc, #492]	; (8001280 <main+0x9a4>)
 8001094:	881b      	ldrh	r3, [r3, #0]
 8001096:	4413      	add	r3, r2
 8001098:	b29a      	uxth	r2, r3
 800109a:	4b79      	ldr	r3, [pc, #484]	; (8001280 <main+0x9a4>)
 800109c:	801a      	strh	r2, [r3, #0]
 800109e:	e010      	b.n	80010c2 <main+0x7e6>
	  			  }
	  			  else
	  			  {
	  				  //tie game
		  			  UART_print("\033[5;30H");
 80010a0:	4873      	ldr	r0, [pc, #460]	; (8001270 <main+0x994>)
 80010a2:	f7ff f92f 	bl	8000304 <UART_print>
		  			  UART_print("\033[0K");		//clear line from cursor to the right
 80010a6:	4873      	ldr	r0, [pc, #460]	; (8001274 <main+0x998>)
 80010a8:	f7ff f92c 	bl	8000304 <UART_print>
		  			  UART_print("Push: Player and Dealer Tied");
 80010ac:	4877      	ldr	r0, [pc, #476]	; (800128c <main+0x9b0>)
 80010ae:	f7ff f929 	bl	8000304 <UART_print>
		  			  money += currentBet;
 80010b2:	4b73      	ldr	r3, [pc, #460]	; (8001280 <main+0x9a4>)
 80010b4:	881a      	ldrh	r2, [r3, #0]
 80010b6:	4b71      	ldr	r3, [pc, #452]	; (800127c <main+0x9a0>)
 80010b8:	881b      	ldrh	r3, [r3, #0]
 80010ba:	4413      	add	r3, r2
 80010bc:	b29a      	uxth	r2, r3
 80010be:	4b70      	ldr	r3, [pc, #448]	; (8001280 <main+0x9a4>)
 80010c0:	801a      	strh	r2, [r3, #0]
	  			  }
	  		  }

	  		  //update player's money
	  		  UART_print("\033[1;50H");
 80010c2:	4873      	ldr	r0, [pc, #460]	; (8001290 <main+0x9b4>)
 80010c4:	f7ff f91e 	bl	8000304 <UART_print>
  			  UART_print("\033[0K");		//clear line from cursor to the right
 80010c8:	486a      	ldr	r0, [pc, #424]	; (8001274 <main+0x998>)
 80010ca:	f7ff f91b 	bl	8000304 <UART_print>
	  		  UART_print("$");
 80010ce:	4871      	ldr	r0, [pc, #452]	; (8001294 <main+0x9b8>)
 80010d0:	f7ff f918 	bl	8000304 <UART_print>
	  		  string[0] = '\0';
 80010d4:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 80010d8:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 80010dc:	2200      	movs	r2, #0
 80010de:	701a      	strb	r2, [r3, #0]
	  		  toString(money, string, 7);
 80010e0:	4b67      	ldr	r3, [pc, #412]	; (8001280 <main+0x9a4>)
 80010e2:	881b      	ldrh	r3, [r3, #0]
 80010e4:	4618      	mov	r0, r3
 80010e6:	463b      	mov	r3, r7
 80010e8:	2207      	movs	r2, #7
 80010ea:	4619      	mov	r1, r3
 80010ec:	f7ff f926 	bl	800033c <toString>
	  		  UART_print(string);
 80010f0:	463b      	mov	r3, r7
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff f906 	bl	8000304 <UART_print>
	  		  string[0] = '\0';
 80010f8:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 80010fc:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 8001100:	2200      	movs	r2, #0
 8001102:	701a      	strb	r2, [r3, #0]

	  		  //delay to see ending result better
	  		  for (int i = 0; i < DELAY * 3; i++){}
 8001104:	2300      	movs	r3, #0
 8001106:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
 800110a:	e004      	b.n	8001116 <main+0x83a>
 800110c:	f8d7 32c4 	ldr.w	r3, [r7, #708]	; 0x2c4
 8001110:	3301      	adds	r3, #1
 8001112:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
 8001116:	f8d7 32c4 	ldr.w	r3, [r7, #708]	; 0x2c4
 800111a:	4a5f      	ldr	r2, [pc, #380]	; (8001298 <main+0x9bc>)
 800111c:	4293      	cmp	r3, r2
 800111e:	ddf5      	ble.n	800110c <main+0x830>


	  		  state = CASH_OUT;
 8001120:	2308      	movs	r3, #8
 8001122:	f887 32f4 	strb.w	r3, [r7, #756]	; 0x2f4
	  		  break;
 8001126:	e09e      	b.n	8001266 <main+0x98a>

	  	  case CASH_OUT:
	  		  UART_print("\033[H");
 8001128:	485c      	ldr	r0, [pc, #368]	; (800129c <main+0x9c0>)
 800112a:	f7ff f8eb 	bl	8000304 <UART_print>
	  		  UART_print("\033[2J");
 800112e:	485c      	ldr	r0, [pc, #368]	; (80012a0 <main+0x9c4>)
 8001130:	f7ff f8e8 	bl	8000304 <UART_print>
	  		  UART_print("\033[15;15H");
 8001134:	485b      	ldr	r0, [pc, #364]	; (80012a4 <main+0x9c8>)
 8001136:	f7ff f8e5 	bl	8000304 <UART_print>
	  		  UART_print("CASH OUT? [Y] [N]");
 800113a:	485b      	ldr	r0, [pc, #364]	; (80012a8 <main+0x9cc>)
 800113c:	f7ff f8e2 	bl	8000304 <UART_print>
	  		  char cash = read_input();
 8001140:	f7ff f96e 	bl	8000420 <read_input>
 8001144:	4603      	mov	r3, r0
 8001146:	f887 32ae 	strb.w	r3, [r7, #686]	; 0x2ae

	  		  if (cash == 'y' || cash == 'Y')
 800114a:	f897 32ae 	ldrb.w	r3, [r7, #686]	; 0x2ae
 800114e:	2b79      	cmp	r3, #121	; 0x79
 8001150:	d003      	beq.n	800115a <main+0x87e>
 8001152:	f897 32ae 	ldrb.w	r3, [r7, #686]	; 0x2ae
 8001156:	2b59      	cmp	r3, #89	; 0x59
 8001158:	d13e      	bne.n	80011d8 <main+0x8fc>
	  		  {
		  		  UART_print("\033[H");
 800115a:	4850      	ldr	r0, [pc, #320]	; (800129c <main+0x9c0>)
 800115c:	f7ff f8d2 	bl	8000304 <UART_print>
		  		  UART_print("\033[2J");
 8001160:	484f      	ldr	r0, [pc, #316]	; (80012a0 <main+0x9c4>)
 8001162:	f7ff f8cf 	bl	8000304 <UART_print>
	  			  for (int i = 0; i < 30; i++)
 8001166:	2300      	movs	r3, #0
 8001168:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
 800116c:	e029      	b.n	80011c2 <main+0x8e6>
	  			  {
	  				  for (int j = 0; j < 30; j++)
 800116e:	2300      	movs	r3, #0
 8001170:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 8001174:	e016      	b.n	80011a4 <main+0x8c8>
	  				  {
	  					  UART_print("$");
 8001176:	4847      	ldr	r0, [pc, #284]	; (8001294 <main+0x9b8>)
 8001178:	f7ff f8c4 	bl	8000304 <UART_print>
	  					  for (int i = 0; i < DELAY / 100; i++){}
 800117c:	2300      	movs	r3, #0
 800117e:	f8c7 32b8 	str.w	r3, [r7, #696]	; 0x2b8
 8001182:	e004      	b.n	800118e <main+0x8b2>
 8001184:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 8001188:	3301      	adds	r3, #1
 800118a:	f8c7 32b8 	str.w	r3, [r7, #696]	; 0x2b8
 800118e:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 8001192:	f246 12a7 	movw	r2, #24999	; 0x61a7
 8001196:	4293      	cmp	r3, r2
 8001198:	ddf4      	ble.n	8001184 <main+0x8a8>
	  				  for (int j = 0; j < 30; j++)
 800119a:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 800119e:	3301      	adds	r3, #1
 80011a0:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 80011a4:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 80011a8:	2b1d      	cmp	r3, #29
 80011aa:	dde4      	ble.n	8001176 <main+0x89a>
	  				  }
	  				UART_print("\033[1B");		//move down 1
 80011ac:	483f      	ldr	r0, [pc, #252]	; (80012ac <main+0x9d0>)
 80011ae:	f7ff f8a9 	bl	8000304 <UART_print>
	  				UART_print("\033[30D");		//move left 30 spaces
 80011b2:	483f      	ldr	r0, [pc, #252]	; (80012b0 <main+0x9d4>)
 80011b4:	f7ff f8a6 	bl	8000304 <UART_print>
	  			  for (int i = 0; i < 30; i++)
 80011b8:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 80011bc:	3301      	adds	r3, #1
 80011be:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
 80011c2:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 80011c6:	2b1d      	cmp	r3, #29
 80011c8:	ddd1      	ble.n	800116e <main+0x892>
	  			  }
	  			  cashed = 1;
 80011ca:	2301      	movs	r3, #1
 80011cc:	f887 32f5 	strb.w	r3, [r7, #757]	; 0x2f5
	  			  state = RESET_HANDS;
 80011d0:	2309      	movs	r3, #9
 80011d2:	f887 32f4 	strb.w	r3, [r7, #756]	; 0x2f4
	  		  }
	  		  else if (cash == 'n' || cash == 'N')
	  		  {
	  			  state = RESET_HANDS;
	  		  }
	  		  break;
 80011d6:	e045      	b.n	8001264 <main+0x988>
	  		  else if (cash == 'n' || cash == 'N')
 80011d8:	f897 32ae 	ldrb.w	r3, [r7, #686]	; 0x2ae
 80011dc:	2b6e      	cmp	r3, #110	; 0x6e
 80011de:	d003      	beq.n	80011e8 <main+0x90c>
 80011e0:	f897 32ae 	ldrb.w	r3, [r7, #686]	; 0x2ae
 80011e4:	2b4e      	cmp	r3, #78	; 0x4e
 80011e6:	d13d      	bne.n	8001264 <main+0x988>
	  			  state = RESET_HANDS;
 80011e8:	2309      	movs	r3, #9
 80011ea:	f887 32f4 	strb.w	r3, [r7, #756]	; 0x2f4
	  		  break;
 80011ee:	e039      	b.n	8001264 <main+0x988>

	  	  case RESET_HANDS:
	  		  //reset globals and hands
	  		  dealerHand->numCards = 0;
 80011f0:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 80011f4:	2200      	movs	r2, #0
 80011f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	  		  playerHand->numCards = 0;
 80011fa:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 80011fe:	2200      	movs	r2, #0
 8001200:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

	  		  dealerScore = 0;
 8001204:	2300      	movs	r3, #0
 8001206:	f887 32f7 	strb.w	r3, [r7, #759]	; 0x2f7
	  		  playerScore = 0;
 800120a:	2300      	movs	r3, #0
 800120c:	f887 32f6 	strb.w	r3, [r7, #758]	; 0x2f6

	  		  dealerWin = 0;
 8001210:	4b1c      	ldr	r3, [pc, #112]	; (8001284 <main+0x9a8>)
 8001212:	2200      	movs	r2, #0
 8001214:	701a      	strb	r2, [r3, #0]
	  		  playerWin = 0;
 8001216:	4b15      	ldr	r3, [pc, #84]	; (800126c <main+0x990>)
 8001218:	2200      	movs	r2, #0
 800121a:	701a      	strb	r2, [r3, #0]

	  		  dealerDone = 0;
 800121c:	2300      	movs	r3, #0
 800121e:	f887 32f3 	strb.w	r3, [r7, #755]	; 0x2f3

	  		  deckIndex = 0;
 8001222:	4b24      	ldr	r3, [pc, #144]	; (80012b4 <main+0x9d8>)
 8001224:	2200      	movs	r2, #0
 8001226:	701a      	strb	r2, [r3, #0]

	  		  if (cashed == 1)
 8001228:	f897 32f5 	ldrb.w	r3, [r7, #757]	; 0x2f5
 800122c:	2b01      	cmp	r3, #1
 800122e:	d106      	bne.n	800123e <main+0x962>
	  		  {
	  			  cashed = 0;
 8001230:	2300      	movs	r3, #0
 8001232:	f887 32f5 	strb.w	r3, [r7, #757]	; 0x2f5
	  			  state = START_GAME;
 8001236:	2300      	movs	r3, #0
 8001238:	f887 32f4 	strb.w	r3, [r7, #756]	; 0x2f4
	  		  }
	  		  else
	  		  {
	  			  state = BETTING;
	  		  }
	  		  break;
 800123c:	e013      	b.n	8001266 <main+0x98a>
	  			  state = BETTING;
 800123e:	2301      	movs	r3, #1
 8001240:	f887 32f4 	strb.w	r3, [r7, #756]	; 0x2f4
	  		  break;
 8001244:	e00f      	b.n	8001266 <main+0x98a>

	  	  default:
	  		  break;
 8001246:	bf00      	nop
 8001248:	f7ff bb6d 	b.w	8000926 <main+0x4a>
	  		  break;
 800124c:	bf00      	nop
 800124e:	f7ff bb6a 	b.w	8000926 <main+0x4a>
	  		  break;
 8001252:	bf00      	nop
 8001254:	f7ff bb67 	b.w	8000926 <main+0x4a>
	  		  break;
 8001258:	bf00      	nop
 800125a:	f7ff bb64 	b.w	8000926 <main+0x4a>
	  		  break;
 800125e:	bf00      	nop
 8001260:	f7ff bb61 	b.w	8000926 <main+0x4a>
	  		  break;
 8001264:	bf00      	nop
	  switch(state)
 8001266:	f7ff bb5e 	b.w	8000926 <main+0x4a>
 800126a:	bf00      	nop
 800126c:	20000093 	.word	0x20000093
 8001270:	080035d4 	.word	0x080035d4
 8001274:	080035dc 	.word	0x080035dc
 8001278:	08003638 	.word	0x08003638
 800127c:	20000094 	.word	0x20000094
 8001280:	20000000 	.word	0x20000000
 8001284:	20000092 	.word	0x20000092
 8001288:	08003620 	.word	0x08003620
 800128c:	08003600 	.word	0x08003600
 8001290:	08003648 	.word	0x08003648
 8001294:	08003650 	.word	0x08003650
 8001298:	007270df 	.word	0x007270df
 800129c:	08003594 	.word	0x08003594
 80012a0:	08003598 	.word	0x08003598
 80012a4:	080035a0 	.word	0x080035a0
 80012a8:	08003654 	.word	0x08003654
 80012ac:	08003668 	.word	0x08003668
 80012b0:	08003670 	.word	0x08003670
 80012b4:	20000091 	.word	0x20000091

080012b8 <place_bet>:
  }

}

void place_bet(int option)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
	if (option == 3)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2b03      	cmp	r3, #3
 80012c4:	d13b      	bne.n	800133e <place_bet+0x86>
	{
		  UART_print("\033[H");
 80012c6:	4854      	ldr	r0, [pc, #336]	; (8001418 <place_bet+0x160>)
 80012c8:	f7ff f81c 	bl	8000304 <UART_print>
		  UART_print("\033[2J");
 80012cc:	4853      	ldr	r0, [pc, #332]	; (800141c <place_bet+0x164>)
 80012ce:	f7ff f819 	bl	8000304 <UART_print>
		  UART_print("\033[15;10H");
 80012d2:	4853      	ldr	r0, [pc, #332]	; (8001420 <place_bet+0x168>)
 80012d4:	f7ff f816 	bl	8000304 <UART_print>
		  UART_print("Place bet: 100[1] 250[2] 500[3]");
 80012d8:	4852      	ldr	r0, [pc, #328]	; (8001424 <place_bet+0x16c>)
 80012da:	f7ff f813 	bl	8000304 <UART_print>
		  char bet = read_input();
 80012de:	f7ff f89f 	bl	8000420 <read_input>
 80012e2:	4603      	mov	r3, r0
 80012e4:	727b      	strb	r3, [r7, #9]
		  //subtract bet from current money
		  if (bet == '1')
 80012e6:	7a7b      	ldrb	r3, [r7, #9]
 80012e8:	2b31      	cmp	r3, #49	; 0x31
 80012ea:	d10a      	bne.n	8001302 <place_bet+0x4a>
		  {
			  currentBet = 100;
 80012ec:	4b4e      	ldr	r3, [pc, #312]	; (8001428 <place_bet+0x170>)
 80012ee:	2264      	movs	r2, #100	; 0x64
 80012f0:	801a      	strh	r2, [r3, #0]
			  money -= currentBet;
 80012f2:	4b4e      	ldr	r3, [pc, #312]	; (800142c <place_bet+0x174>)
 80012f4:	881a      	ldrh	r2, [r3, #0]
 80012f6:	4b4c      	ldr	r3, [pc, #304]	; (8001428 <place_bet+0x170>)
 80012f8:	881b      	ldrh	r3, [r3, #0]
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	b29a      	uxth	r2, r3
 80012fe:	4b4b      	ldr	r3, [pc, #300]	; (800142c <place_bet+0x174>)
 8001300:	801a      	strh	r2, [r3, #0]
		  }
		  if (bet == '2')
 8001302:	7a7b      	ldrb	r3, [r7, #9]
 8001304:	2b32      	cmp	r3, #50	; 0x32
 8001306:	d10a      	bne.n	800131e <place_bet+0x66>
		  {
			  currentBet = 250;
 8001308:	4b47      	ldr	r3, [pc, #284]	; (8001428 <place_bet+0x170>)
 800130a:	22fa      	movs	r2, #250	; 0xfa
 800130c:	801a      	strh	r2, [r3, #0]
			  money -= currentBet;
 800130e:	4b47      	ldr	r3, [pc, #284]	; (800142c <place_bet+0x174>)
 8001310:	881a      	ldrh	r2, [r3, #0]
 8001312:	4b45      	ldr	r3, [pc, #276]	; (8001428 <place_bet+0x170>)
 8001314:	881b      	ldrh	r3, [r3, #0]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	b29a      	uxth	r2, r3
 800131a:	4b44      	ldr	r3, [pc, #272]	; (800142c <place_bet+0x174>)
 800131c:	801a      	strh	r2, [r3, #0]
		  }
		  if (bet == '3')
 800131e:	7a7b      	ldrb	r3, [r7, #9]
 8001320:	2b33      	cmp	r3, #51	; 0x33
 8001322:	d174      	bne.n	800140e <place_bet+0x156>
		  {
			  currentBet = 500;
 8001324:	4b40      	ldr	r3, [pc, #256]	; (8001428 <place_bet+0x170>)
 8001326:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800132a:	801a      	strh	r2, [r3, #0]
			  money -= currentBet;
 800132c:	4b3f      	ldr	r3, [pc, #252]	; (800142c <place_bet+0x174>)
 800132e:	881a      	ldrh	r2, [r3, #0]
 8001330:	4b3d      	ldr	r3, [pc, #244]	; (8001428 <place_bet+0x170>)
 8001332:	881b      	ldrh	r3, [r3, #0]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	b29a      	uxth	r2, r3
 8001338:	4b3c      	ldr	r3, [pc, #240]	; (800142c <place_bet+0x174>)
 800133a:	801a      	strh	r2, [r3, #0]
		  UART_print("\033[15;10H");
		  UART_print("Sorry you do not have enough money to bet");
  		  for (int i = 0; i < DELAY * 3; i++){}
	}

}
 800133c:	e067      	b.n	800140e <place_bet+0x156>
	else if (option == 2)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2b02      	cmp	r3, #2
 8001342:	d12c      	bne.n	800139e <place_bet+0xe6>
		  UART_print("\033[H");
 8001344:	4834      	ldr	r0, [pc, #208]	; (8001418 <place_bet+0x160>)
 8001346:	f7fe ffdd 	bl	8000304 <UART_print>
		  UART_print("\033[2J");
 800134a:	4834      	ldr	r0, [pc, #208]	; (800141c <place_bet+0x164>)
 800134c:	f7fe ffda 	bl	8000304 <UART_print>
		  UART_print("\033[15;10H");
 8001350:	4833      	ldr	r0, [pc, #204]	; (8001420 <place_bet+0x168>)
 8001352:	f7fe ffd7 	bl	8000304 <UART_print>
		  UART_print("Place bet: 100[1] 250[2]");
 8001356:	4836      	ldr	r0, [pc, #216]	; (8001430 <place_bet+0x178>)
 8001358:	f7fe ffd4 	bl	8000304 <UART_print>
		  char bet = read_input();
 800135c:	f7ff f860 	bl	8000420 <read_input>
 8001360:	4603      	mov	r3, r0
 8001362:	72bb      	strb	r3, [r7, #10]
		  if (bet == '1')
 8001364:	7abb      	ldrb	r3, [r7, #10]
 8001366:	2b31      	cmp	r3, #49	; 0x31
 8001368:	d10a      	bne.n	8001380 <place_bet+0xc8>
			  currentBet = 100;
 800136a:	4b2f      	ldr	r3, [pc, #188]	; (8001428 <place_bet+0x170>)
 800136c:	2264      	movs	r2, #100	; 0x64
 800136e:	801a      	strh	r2, [r3, #0]
			  money -= currentBet;
 8001370:	4b2e      	ldr	r3, [pc, #184]	; (800142c <place_bet+0x174>)
 8001372:	881a      	ldrh	r2, [r3, #0]
 8001374:	4b2c      	ldr	r3, [pc, #176]	; (8001428 <place_bet+0x170>)
 8001376:	881b      	ldrh	r3, [r3, #0]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	b29a      	uxth	r2, r3
 800137c:	4b2b      	ldr	r3, [pc, #172]	; (800142c <place_bet+0x174>)
 800137e:	801a      	strh	r2, [r3, #0]
		  if (bet == '2')
 8001380:	7abb      	ldrb	r3, [r7, #10]
 8001382:	2b32      	cmp	r3, #50	; 0x32
 8001384:	d143      	bne.n	800140e <place_bet+0x156>
			  currentBet = 250;
 8001386:	4b28      	ldr	r3, [pc, #160]	; (8001428 <place_bet+0x170>)
 8001388:	22fa      	movs	r2, #250	; 0xfa
 800138a:	801a      	strh	r2, [r3, #0]
			  money -= currentBet;
 800138c:	4b27      	ldr	r3, [pc, #156]	; (800142c <place_bet+0x174>)
 800138e:	881a      	ldrh	r2, [r3, #0]
 8001390:	4b25      	ldr	r3, [pc, #148]	; (8001428 <place_bet+0x170>)
 8001392:	881b      	ldrh	r3, [r3, #0]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	b29a      	uxth	r2, r3
 8001398:	4b24      	ldr	r3, [pc, #144]	; (800142c <place_bet+0x174>)
 800139a:	801a      	strh	r2, [r3, #0]
}
 800139c:	e037      	b.n	800140e <place_bet+0x156>
	else if (option == 1)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d11e      	bne.n	80013e2 <place_bet+0x12a>
		  UART_print("\033[H");
 80013a4:	481c      	ldr	r0, [pc, #112]	; (8001418 <place_bet+0x160>)
 80013a6:	f7fe ffad 	bl	8000304 <UART_print>
		  UART_print("\033[2J");
 80013aa:	481c      	ldr	r0, [pc, #112]	; (800141c <place_bet+0x164>)
 80013ac:	f7fe ffaa 	bl	8000304 <UART_print>
		  UART_print("\033[15;10H");
 80013b0:	481b      	ldr	r0, [pc, #108]	; (8001420 <place_bet+0x168>)
 80013b2:	f7fe ffa7 	bl	8000304 <UART_print>
		  UART_print("Place bet: 100[1]");
 80013b6:	481f      	ldr	r0, [pc, #124]	; (8001434 <place_bet+0x17c>)
 80013b8:	f7fe ffa4 	bl	8000304 <UART_print>
		  char bet = read_input();
 80013bc:	f7ff f830 	bl	8000420 <read_input>
 80013c0:	4603      	mov	r3, r0
 80013c2:	72fb      	strb	r3, [r7, #11]
		  if (bet == '1')
 80013c4:	7afb      	ldrb	r3, [r7, #11]
 80013c6:	2b31      	cmp	r3, #49	; 0x31
 80013c8:	d121      	bne.n	800140e <place_bet+0x156>
			  currentBet = 100;
 80013ca:	4b17      	ldr	r3, [pc, #92]	; (8001428 <place_bet+0x170>)
 80013cc:	2264      	movs	r2, #100	; 0x64
 80013ce:	801a      	strh	r2, [r3, #0]
			  money -= currentBet;
 80013d0:	4b16      	ldr	r3, [pc, #88]	; (800142c <place_bet+0x174>)
 80013d2:	881a      	ldrh	r2, [r3, #0]
 80013d4:	4b14      	ldr	r3, [pc, #80]	; (8001428 <place_bet+0x170>)
 80013d6:	881b      	ldrh	r3, [r3, #0]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	b29a      	uxth	r2, r3
 80013dc:	4b13      	ldr	r3, [pc, #76]	; (800142c <place_bet+0x174>)
 80013de:	801a      	strh	r2, [r3, #0]
}
 80013e0:	e015      	b.n	800140e <place_bet+0x156>
		  UART_print("\033[H");
 80013e2:	480d      	ldr	r0, [pc, #52]	; (8001418 <place_bet+0x160>)
 80013e4:	f7fe ff8e 	bl	8000304 <UART_print>
		  UART_print("\033[2J");
 80013e8:	480c      	ldr	r0, [pc, #48]	; (800141c <place_bet+0x164>)
 80013ea:	f7fe ff8b 	bl	8000304 <UART_print>
		  UART_print("\033[15;10H");
 80013ee:	480c      	ldr	r0, [pc, #48]	; (8001420 <place_bet+0x168>)
 80013f0:	f7fe ff88 	bl	8000304 <UART_print>
		  UART_print("Sorry you do not have enough money to bet");
 80013f4:	4810      	ldr	r0, [pc, #64]	; (8001438 <place_bet+0x180>)
 80013f6:	f7fe ff85 	bl	8000304 <UART_print>
  		  for (int i = 0; i < DELAY * 3; i++){}
 80013fa:	2300      	movs	r3, #0
 80013fc:	60fb      	str	r3, [r7, #12]
 80013fe:	e002      	b.n	8001406 <place_bet+0x14e>
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	3301      	adds	r3, #1
 8001404:	60fb      	str	r3, [r7, #12]
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	4a0c      	ldr	r2, [pc, #48]	; (800143c <place_bet+0x184>)
 800140a:	4293      	cmp	r3, r2
 800140c:	ddf8      	ble.n	8001400 <place_bet+0x148>
}
 800140e:	bf00      	nop
 8001410:	3710      	adds	r7, #16
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	08003594 	.word	0x08003594
 800141c:	08003598 	.word	0x08003598
 8001420:	08003678 	.word	0x08003678
 8001424:	08003684 	.word	0x08003684
 8001428:	20000094 	.word	0x20000094
 800142c:	20000000 	.word	0x20000000
 8001430:	080036a4 	.word	0x080036a4
 8001434:	080036c0 	.word	0x080036c0
 8001438:	080036d4 	.word	0x080036d4
 800143c:	007270df 	.word	0x007270df

08001440 <print_table>:

void print_table(Hand *dealerHand, Hand *playerHand)
{
 8001440:	b590      	push	{r4, r7, lr}
 8001442:	b089      	sub	sp, #36	; 0x24
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	6039      	str	r1, [r7, #0]
	/* UART print codes */
	char *clearScreen = "\033[2J";
 800144a:	4b47      	ldr	r3, [pc, #284]	; (8001568 <print_table+0x128>)
 800144c:	617b      	str	r3, [r7, #20]
	//char *resetCurs = "\033[H";
	char string[7];
	string[0] = '\0';
 800144e:	2300      	movs	r3, #0
 8001450:	733b      	strb	r3, [r7, #12]


	UART_print(clearScreen);
 8001452:	6978      	ldr	r0, [r7, #20]
 8001454:	f7fe ff56 	bl	8000304 <UART_print>

	//print player's money
	UART_print("\033[1;50H");
 8001458:	4844      	ldr	r0, [pc, #272]	; (800156c <print_table+0x12c>)
 800145a:	f7fe ff53 	bl	8000304 <UART_print>
	UART_print("$");
 800145e:	4844      	ldr	r0, [pc, #272]	; (8001570 <print_table+0x130>)
 8001460:	f7fe ff50 	bl	8000304 <UART_print>
	toString(money, string, 7);
 8001464:	4b43      	ldr	r3, [pc, #268]	; (8001574 <print_table+0x134>)
 8001466:	881b      	ldrh	r3, [r3, #0]
 8001468:	4618      	mov	r0, r3
 800146a:	f107 030c 	add.w	r3, r7, #12
 800146e:	2207      	movs	r2, #7
 8001470:	4619      	mov	r1, r3
 8001472:	f7fe ff63 	bl	800033c <toString>
	UART_print(string);
 8001476:	f107 030c 	add.w	r3, r7, #12
 800147a:	4618      	mov	r0, r3
 800147c:	f7fe ff42 	bl	8000304 <UART_print>
	string[0] = '\0';
 8001480:	2300      	movs	r3, #0
 8001482:	733b      	strb	r3, [r7, #12]

	UART_print("\033[H");
 8001484:	483c      	ldr	r0, [pc, #240]	; (8001578 <print_table+0x138>)
 8001486:	f7fe ff3d 	bl	8000304 <UART_print>
	//UART_print(resetCurs);

	//print dealer's cards
	UART_print("Dealer");
 800148a:	483c      	ldr	r0, [pc, #240]	; (800157c <print_table+0x13c>)
 800148c:	f7fe ff3a 	bl	8000304 <UART_print>
	UART_print("\033[1B");		//move down 1
 8001490:	483b      	ldr	r0, [pc, #236]	; (8001580 <print_table+0x140>)
 8001492:	f7fe ff37 	bl	8000304 <UART_print>
	UART_print("\033[6D");		//move left 6 spaces
 8001496:	483b      	ldr	r0, [pc, #236]	; (8001584 <print_table+0x144>)
 8001498:	f7fe ff34 	bl	8000304 <UART_print>

	for (int i = 0; i < dealerHand->numCards; i++)
 800149c:	2300      	movs	r3, #0
 800149e:	61fb      	str	r3, [r7, #28]
 80014a0:	e017      	b.n	80014d2 <print_table+0x92>
	{
		//print card then move cursor location
		print_card(dealerHand->hand[i]);
 80014a2:	6879      	ldr	r1, [r7, #4]
 80014a4:	69fa      	ldr	r2, [r7, #28]
 80014a6:	4613      	mov	r3, r2
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	4413      	add	r3, r2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	4413      	add	r3, r2
 80014b0:	440b      	add	r3, r1
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	4610      	mov	r0, r2
 80014b6:	685a      	ldr	r2, [r3, #4]
 80014b8:	4611      	mov	r1, r2
 80014ba:	689a      	ldr	r2, [r3, #8]
 80014bc:	4614      	mov	r4, r2
 80014be:	7b1a      	ldrb	r2, [r3, #12]
 80014c0:	2300      	movs	r3, #0
 80014c2:	f362 0307 	bfi	r3, r2, #0, #8
 80014c6:	4622      	mov	r2, r4
 80014c8:	f000 f864 	bl	8001594 <print_card>
	for (int i = 0; i < dealerHand->numCards; i++)
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	3301      	adds	r3, #1
 80014d0:	61fb      	str	r3, [r7, #28]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014d8:	69fa      	ldr	r2, [r7, #28]
 80014da:	429a      	cmp	r2, r3
 80014dc:	dbe1      	blt.n	80014a2 <print_table+0x62>
	}

	//print player's cards
	UART_print("\033[1;20H");
 80014de:	482a      	ldr	r0, [pc, #168]	; (8001588 <print_table+0x148>)
 80014e0:	f7fe ff10 	bl	8000304 <UART_print>
	UART_print("Player");
 80014e4:	4829      	ldr	r0, [pc, #164]	; (800158c <print_table+0x14c>)
 80014e6:	f7fe ff0d 	bl	8000304 <UART_print>
	UART_print("\033[1B");		//move down 1
 80014ea:	4825      	ldr	r0, [pc, #148]	; (8001580 <print_table+0x140>)
 80014ec:	f7fe ff0a 	bl	8000304 <UART_print>
	UART_print("\033[6D");		//move left 6 spaces
 80014f0:	4824      	ldr	r0, [pc, #144]	; (8001584 <print_table+0x144>)
 80014f2:	f7fe ff07 	bl	8000304 <UART_print>

	for (int i = 0; i < playerHand->numCards; i++)
 80014f6:	2300      	movs	r3, #0
 80014f8:	61bb      	str	r3, [r7, #24]
 80014fa:	e017      	b.n	800152c <print_table+0xec>
	{

		//print card then move cursor location
		print_card(playerHand->hand[i]);
 80014fc:	6839      	ldr	r1, [r7, #0]
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	4613      	mov	r3, r2
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	4413      	add	r3, r2
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	4413      	add	r3, r2
 800150a:	440b      	add	r3, r1
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	4610      	mov	r0, r2
 8001510:	685a      	ldr	r2, [r3, #4]
 8001512:	4611      	mov	r1, r2
 8001514:	689a      	ldr	r2, [r3, #8]
 8001516:	4614      	mov	r4, r2
 8001518:	7b1a      	ldrb	r2, [r3, #12]
 800151a:	2300      	movs	r3, #0
 800151c:	f362 0307 	bfi	r3, r2, #0, #8
 8001520:	4622      	mov	r2, r4
 8001522:	f000 f837 	bl	8001594 <print_card>
	for (int i = 0; i < playerHand->numCards; i++)
 8001526:	69bb      	ldr	r3, [r7, #24]
 8001528:	3301      	adds	r3, #1
 800152a:	61bb      	str	r3, [r7, #24]
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	429a      	cmp	r2, r3
 8001536:	dbe1      	blt.n	80014fc <print_table+0xbc>
	}

	UART_print("\033[1;30H");
 8001538:	4815      	ldr	r0, [pc, #84]	; (8001590 <print_table+0x150>)
 800153a:	f7fe fee3 	bl	8000304 <UART_print>
	toString(calculateHandValue(playerHand), string, 7);
 800153e:	6838      	ldr	r0, [r7, #0]
 8001540:	f7ff f918 	bl	8000774 <calculateHandValue>
 8001544:	4603      	mov	r3, r0
 8001546:	4618      	mov	r0, r3
 8001548:	f107 030c 	add.w	r3, r7, #12
 800154c:	2207      	movs	r2, #7
 800154e:	4619      	mov	r1, r3
 8001550:	f7fe fef4 	bl	800033c <toString>
	UART_print(string);
 8001554:	f107 030c 	add.w	r3, r7, #12
 8001558:	4618      	mov	r0, r3
 800155a:	f7fe fed3 	bl	8000304 <UART_print>


}
 800155e:	bf00      	nop
 8001560:	3724      	adds	r7, #36	; 0x24
 8001562:	46bd      	mov	sp, r7
 8001564:	bd90      	pop	{r4, r7, pc}
 8001566:	bf00      	nop
 8001568:	08003598 	.word	0x08003598
 800156c:	08003648 	.word	0x08003648
 8001570:	08003650 	.word	0x08003650
 8001574:	20000000 	.word	0x20000000
 8001578:	08003594 	.word	0x08003594
 800157c:	08003700 	.word	0x08003700
 8001580:	08003668 	.word	0x08003668
 8001584:	08003708 	.word	0x08003708
 8001588:	08003710 	.word	0x08003710
 800158c:	08003718 	.word	0x08003718
 8001590:	08003720 	.word	0x08003720

08001594 <print_card>:

void print_card(Card card)
{
 8001594:	b590      	push	{r4, r7, lr}
 8001596:	b087      	sub	sp, #28
 8001598:	af00      	add	r7, sp, #0
 800159a:	463c      	mov	r4, r7
 800159c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	char string[7];
	string[0] = '\0';
 80015a0:	2300      	movs	r3, #0
 80015a2:	743b      	strb	r3, [r7, #16]

	UART_print(" ----- ");
 80015a4:	4860      	ldr	r0, [pc, #384]	; (8001728 <print_card+0x194>)
 80015a6:	f7fe fead 	bl	8000304 <UART_print>
	UART_print("\033[1B");		//move down 1
 80015aa:	4860      	ldr	r0, [pc, #384]	; (800172c <print_card+0x198>)
 80015ac:	f7fe feaa 	bl	8000304 <UART_print>
	UART_print("\033[7D");		//move left 7 spaces
 80015b0:	485f      	ldr	r0, [pc, #380]	; (8001730 <print_card+0x19c>)
 80015b2:	f7fe fea7 	bl	8000304 <UART_print>

	if (card.visible == 0)
 80015b6:	787b      	ldrb	r3, [r7, #1]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d115      	bne.n	80015e8 <print_card+0x54>
	{
		UART_print("|#####|");
 80015bc:	485d      	ldr	r0, [pc, #372]	; (8001734 <print_card+0x1a0>)
 80015be:	f7fe fea1 	bl	8000304 <UART_print>
		UART_print("\033[1B");		//move down 1
 80015c2:	485a      	ldr	r0, [pc, #360]	; (800172c <print_card+0x198>)
 80015c4:	f7fe fe9e 	bl	8000304 <UART_print>
		UART_print("\033[7D");		//move left 7 spaces
 80015c8:	4859      	ldr	r0, [pc, #356]	; (8001730 <print_card+0x19c>)
 80015ca:	f7fe fe9b 	bl	8000304 <UART_print>
		UART_print("|#####|");
 80015ce:	4859      	ldr	r0, [pc, #356]	; (8001734 <print_card+0x1a0>)
 80015d0:	f7fe fe98 	bl	8000304 <UART_print>
		UART_print("\033[1B");		//move down 1
 80015d4:	4855      	ldr	r0, [pc, #340]	; (800172c <print_card+0x198>)
 80015d6:	f7fe fe95 	bl	8000304 <UART_print>
		UART_print("\033[7D");		//move left 7 spaces
 80015da:	4855      	ldr	r0, [pc, #340]	; (8001730 <print_card+0x19c>)
 80015dc:	f7fe fe92 	bl	8000304 <UART_print>
		UART_print("|#####|");
 80015e0:	4854      	ldr	r0, [pc, #336]	; (8001734 <print_card+0x1a0>)
 80015e2:	f7fe fe8f 	bl	8000304 <UART_print>
 80015e6:	e08c      	b.n	8001702 <print_card+0x16e>

	}

	//check if is a face card
	else if (strcmp(card.face, "X"))
 80015e8:	463b      	mov	r3, r7
 80015ea:	3302      	adds	r3, #2
 80015ec:	4952      	ldr	r1, [pc, #328]	; (8001738 <print_card+0x1a4>)
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7fe fdea 	bl	80001c8 <strcmp>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d025      	beq.n	8001646 <print_card+0xb2>
	{
		UART_print("|");
 80015fa:	4850      	ldr	r0, [pc, #320]	; (800173c <print_card+0x1a8>)
 80015fc:	f7fe fe82 	bl	8000304 <UART_print>
		UART_print(card.face);
 8001600:	463b      	mov	r3, r7
 8001602:	3302      	adds	r3, #2
 8001604:	4618      	mov	r0, r3
 8001606:	f7fe fe7d 	bl	8000304 <UART_print>
		UART_print("    |");
 800160a:	484d      	ldr	r0, [pc, #308]	; (8001740 <print_card+0x1ac>)
 800160c:	f7fe fe7a 	bl	8000304 <UART_print>

		UART_print("\033[1B");		//move down 1
 8001610:	4846      	ldr	r0, [pc, #280]	; (800172c <print_card+0x198>)
 8001612:	f7fe fe77 	bl	8000304 <UART_print>
		UART_print("\033[7D");		//move left 7 spaces
 8001616:	4846      	ldr	r0, [pc, #280]	; (8001730 <print_card+0x19c>)
 8001618:	f7fe fe74 	bl	8000304 <UART_print>
		UART_print("|     |");
 800161c:	4849      	ldr	r0, [pc, #292]	; (8001744 <print_card+0x1b0>)
 800161e:	f7fe fe71 	bl	8000304 <UART_print>

		UART_print("\033[1B");		//move down 1
 8001622:	4842      	ldr	r0, [pc, #264]	; (800172c <print_card+0x198>)
 8001624:	f7fe fe6e 	bl	8000304 <UART_print>
		UART_print("\033[7D");		//move left 7 spaces
 8001628:	4841      	ldr	r0, [pc, #260]	; (8001730 <print_card+0x19c>)
 800162a:	f7fe fe6b 	bl	8000304 <UART_print>
		UART_print("|    ");
 800162e:	4846      	ldr	r0, [pc, #280]	; (8001748 <print_card+0x1b4>)
 8001630:	f7fe fe68 	bl	8000304 <UART_print>
		UART_print(card.face);
 8001634:	463b      	mov	r3, r7
 8001636:	3302      	adds	r3, #2
 8001638:	4618      	mov	r0, r3
 800163a:	f7fe fe63 	bl	8000304 <UART_print>
		UART_print("|");
 800163e:	483f      	ldr	r0, [pc, #252]	; (800173c <print_card+0x1a8>)
 8001640:	f7fe fe60 	bl	8000304 <UART_print>
 8001644:	e05d      	b.n	8001702 <print_card+0x16e>

	}
	//check if 2 digits
	else if (card.value > 9)
 8001646:	783b      	ldrb	r3, [r7, #0]
 8001648:	2b09      	cmp	r3, #9
 800164a:	d92d      	bls.n	80016a8 <print_card+0x114>
	{
		toString(card.value, string, 7);
 800164c:	783b      	ldrb	r3, [r7, #0]
 800164e:	4618      	mov	r0, r3
 8001650:	f107 0310 	add.w	r3, r7, #16
 8001654:	2207      	movs	r2, #7
 8001656:	4619      	mov	r1, r3
 8001658:	f7fe fe70 	bl	800033c <toString>
		UART_print("|");
 800165c:	4837      	ldr	r0, [pc, #220]	; (800173c <print_card+0x1a8>)
 800165e:	f7fe fe51 	bl	8000304 <UART_print>
		UART_print(string);
 8001662:	f107 0310 	add.w	r3, r7, #16
 8001666:	4618      	mov	r0, r3
 8001668:	f7fe fe4c 	bl	8000304 <UART_print>
		UART_print("   |");
 800166c:	4837      	ldr	r0, [pc, #220]	; (800174c <print_card+0x1b8>)
 800166e:	f7fe fe49 	bl	8000304 <UART_print>

		UART_print("\033[1B");		//move down 1
 8001672:	482e      	ldr	r0, [pc, #184]	; (800172c <print_card+0x198>)
 8001674:	f7fe fe46 	bl	8000304 <UART_print>
		UART_print("\033[7D");		//move left 7 spaces
 8001678:	482d      	ldr	r0, [pc, #180]	; (8001730 <print_card+0x19c>)
 800167a:	f7fe fe43 	bl	8000304 <UART_print>
		UART_print("|     |");
 800167e:	4831      	ldr	r0, [pc, #196]	; (8001744 <print_card+0x1b0>)
 8001680:	f7fe fe40 	bl	8000304 <UART_print>

		UART_print("\033[1B");		//move down 1
 8001684:	4829      	ldr	r0, [pc, #164]	; (800172c <print_card+0x198>)
 8001686:	f7fe fe3d 	bl	8000304 <UART_print>
		UART_print("\033[7D");		//move left 7 spaces
 800168a:	4829      	ldr	r0, [pc, #164]	; (8001730 <print_card+0x19c>)
 800168c:	f7fe fe3a 	bl	8000304 <UART_print>
		UART_print("|   ");
 8001690:	482f      	ldr	r0, [pc, #188]	; (8001750 <print_card+0x1bc>)
 8001692:	f7fe fe37 	bl	8000304 <UART_print>
		UART_print(string);
 8001696:	f107 0310 	add.w	r3, r7, #16
 800169a:	4618      	mov	r0, r3
 800169c:	f7fe fe32 	bl	8000304 <UART_print>
		UART_print("|");
 80016a0:	4826      	ldr	r0, [pc, #152]	; (800173c <print_card+0x1a8>)
 80016a2:	f7fe fe2f 	bl	8000304 <UART_print>
 80016a6:	e02c      	b.n	8001702 <print_card+0x16e>
	}
	//single digit
	else
	{
		toString(card.value, string, 7);
 80016a8:	783b      	ldrb	r3, [r7, #0]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f107 0310 	add.w	r3, r7, #16
 80016b0:	2207      	movs	r2, #7
 80016b2:	4619      	mov	r1, r3
 80016b4:	f7fe fe42 	bl	800033c <toString>
		UART_print("|");
 80016b8:	4820      	ldr	r0, [pc, #128]	; (800173c <print_card+0x1a8>)
 80016ba:	f7fe fe23 	bl	8000304 <UART_print>
		UART_print(string);
 80016be:	f107 0310 	add.w	r3, r7, #16
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7fe fe1e 	bl	8000304 <UART_print>
		UART_print("    |");
 80016c8:	481d      	ldr	r0, [pc, #116]	; (8001740 <print_card+0x1ac>)
 80016ca:	f7fe fe1b 	bl	8000304 <UART_print>

		UART_print("\033[1B");		//move down 1
 80016ce:	4817      	ldr	r0, [pc, #92]	; (800172c <print_card+0x198>)
 80016d0:	f7fe fe18 	bl	8000304 <UART_print>
		UART_print("\033[7D");		//move left 7 spaces
 80016d4:	4816      	ldr	r0, [pc, #88]	; (8001730 <print_card+0x19c>)
 80016d6:	f7fe fe15 	bl	8000304 <UART_print>
		UART_print("|     |");
 80016da:	481a      	ldr	r0, [pc, #104]	; (8001744 <print_card+0x1b0>)
 80016dc:	f7fe fe12 	bl	8000304 <UART_print>

		UART_print("\033[1B");		//move down 1
 80016e0:	4812      	ldr	r0, [pc, #72]	; (800172c <print_card+0x198>)
 80016e2:	f7fe fe0f 	bl	8000304 <UART_print>
		UART_print("\033[7D");		//move left 7 spaces
 80016e6:	4812      	ldr	r0, [pc, #72]	; (8001730 <print_card+0x19c>)
 80016e8:	f7fe fe0c 	bl	8000304 <UART_print>
		UART_print("|    ");
 80016ec:	4816      	ldr	r0, [pc, #88]	; (8001748 <print_card+0x1b4>)
 80016ee:	f7fe fe09 	bl	8000304 <UART_print>
		UART_print(string);
 80016f2:	f107 0310 	add.w	r3, r7, #16
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7fe fe04 	bl	8000304 <UART_print>
		UART_print("|");
 80016fc:	480f      	ldr	r0, [pc, #60]	; (800173c <print_card+0x1a8>)
 80016fe:	f7fe fe01 	bl	8000304 <UART_print>
	}

	//print bottom of the card
	UART_print("\033[1B");		//move down 1
 8001702:	480a      	ldr	r0, [pc, #40]	; (800172c <print_card+0x198>)
 8001704:	f7fe fdfe 	bl	8000304 <UART_print>
	UART_print("\033[7D");		//move left 7 spaces
 8001708:	4809      	ldr	r0, [pc, #36]	; (8001730 <print_card+0x19c>)
 800170a:	f7fe fdfb 	bl	8000304 <UART_print>
	UART_print(" ----- ");
 800170e:	4806      	ldr	r0, [pc, #24]	; (8001728 <print_card+0x194>)
 8001710:	f7fe fdf8 	bl	8000304 <UART_print>

	UART_print("\033[2B");		//move down 1
 8001714:	480f      	ldr	r0, [pc, #60]	; (8001754 <print_card+0x1c0>)
 8001716:	f7fe fdf5 	bl	8000304 <UART_print>
	UART_print("\033[7D");		//move left 7 spaces
 800171a:	4805      	ldr	r0, [pc, #20]	; (8001730 <print_card+0x19c>)
 800171c:	f7fe fdf2 	bl	8000304 <UART_print>

}
 8001720:	bf00      	nop
 8001722:	371c      	adds	r7, #28
 8001724:	46bd      	mov	sp, r7
 8001726:	bd90      	pop	{r4, r7, pc}
 8001728:	08003728 	.word	0x08003728
 800172c:	08003668 	.word	0x08003668
 8001730:	08003730 	.word	0x08003730
 8001734:	08003738 	.word	0x08003738
 8001738:	08003740 	.word	0x08003740
 800173c:	08003744 	.word	0x08003744
 8001740:	08003748 	.word	0x08003748
 8001744:	08003750 	.word	0x08003750
 8001748:	08003758 	.word	0x08003758
 800174c:	08003760 	.word	0x08003760
 8001750:	08003768 	.word	0x08003768
 8001754:	08003770 	.word	0x08003770

08001758 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b096      	sub	sp, #88	; 0x58
 800175c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800175e:	f107 0314 	add.w	r3, r7, #20
 8001762:	2244      	movs	r2, #68	; 0x44
 8001764:	2100      	movs	r1, #0
 8001766:	4618      	mov	r0, r3
 8001768:	f001 fe26 	bl	80033b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800176c:	463b      	mov	r3, r7
 800176e:	2200      	movs	r2, #0
 8001770:	601a      	str	r2, [r3, #0]
 8001772:	605a      	str	r2, [r3, #4]
 8001774:	609a      	str	r2, [r3, #8]
 8001776:	60da      	str	r2, [r3, #12]
 8001778:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800177a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800177e:	f000 fab7 	bl	8001cf0 <HAL_PWREx_ControlVoltageScaling>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001788:	f000 f840 	bl	800180c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800178c:	2310      	movs	r3, #16
 800178e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001790:	2301      	movs	r3, #1
 8001792:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001794:	2300      	movs	r3, #0
 8001796:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_9;
 8001798:	2390      	movs	r3, #144	; 0x90
 800179a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800179c:	2300      	movs	r3, #0
 800179e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017a0:	f107 0314 	add.w	r3, r7, #20
 80017a4:	4618      	mov	r0, r3
 80017a6:	f000 faf9 	bl	8001d9c <HAL_RCC_OscConfig>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80017b0:	f000 f82c 	bl	800180c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017b4:	230f      	movs	r3, #15
 80017b6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80017b8:	2300      	movs	r3, #0
 80017ba:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017bc:	2300      	movs	r3, #0
 80017be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017c0:	2300      	movs	r3, #0
 80017c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017c4:	2300      	movs	r3, #0
 80017c6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80017c8:	463b      	mov	r3, r7
 80017ca:	2101      	movs	r1, #1
 80017cc:	4618      	mov	r0, r3
 80017ce:	f000 fec1 	bl	8002554 <HAL_RCC_ClockConfig>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <SystemClock_Config+0x84>
  {
    Error_Handler();
 80017d8:	f000 f818 	bl	800180c <Error_Handler>
  }
}
 80017dc:	bf00      	nop
 80017de:	3758      	adds	r7, #88	; 0x58
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80017e8:	4b06      	ldr	r3, [pc, #24]	; (8001804 <MX_RNG_Init+0x20>)
 80017ea:	4a07      	ldr	r2, [pc, #28]	; (8001808 <MX_RNG_Init+0x24>)
 80017ec:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80017ee:	4805      	ldr	r0, [pc, #20]	; (8001804 <MX_RNG_Init+0x20>)
 80017f0:	f001 fd58 	bl	80032a4 <HAL_RNG_Init>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80017fa:	f000 f807 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	20000098 	.word	0x20000098
 8001808:	50060800 	.word	0x50060800

0800180c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001810:	b672      	cpsid	i
}
 8001812:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001814:	e7fe      	b.n	8001814 <Error_Handler+0x8>
	...

08001818 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800181e:	4b0f      	ldr	r3, [pc, #60]	; (800185c <HAL_MspInit+0x44>)
 8001820:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001822:	4a0e      	ldr	r2, [pc, #56]	; (800185c <HAL_MspInit+0x44>)
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	6613      	str	r3, [r2, #96]	; 0x60
 800182a:	4b0c      	ldr	r3, [pc, #48]	; (800185c <HAL_MspInit+0x44>)
 800182c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	607b      	str	r3, [r7, #4]
 8001834:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001836:	4b09      	ldr	r3, [pc, #36]	; (800185c <HAL_MspInit+0x44>)
 8001838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800183a:	4a08      	ldr	r2, [pc, #32]	; (800185c <HAL_MspInit+0x44>)
 800183c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001840:	6593      	str	r3, [r2, #88]	; 0x58
 8001842:	4b06      	ldr	r3, [pc, #24]	; (800185c <HAL_MspInit+0x44>)
 8001844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800184a:	603b      	str	r3, [r7, #0]
 800184c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800184e:	bf00      	nop
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	40021000 	.word	0x40021000

08001860 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b0a6      	sub	sp, #152	; 0x98
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001868:	f107 0310 	add.w	r3, r7, #16
 800186c:	2288      	movs	r2, #136	; 0x88
 800186e:	2100      	movs	r1, #0
 8001870:	4618      	mov	r0, r3
 8001872:	f001 fda1 	bl	80033b8 <memset>
  if(hrng->Instance==RNG)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a19      	ldr	r2, [pc, #100]	; (80018e0 <HAL_RNG_MspInit+0x80>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d12b      	bne.n	80018d8 <HAL_RNG_MspInit+0x78>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8001880:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001884:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 8001886:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800188a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800188e:	2301      	movs	r3, #1
 8001890:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 2;
 8001892:	2302      	movs	r3, #2
 8001894:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001896:	2308      	movs	r3, #8
 8001898:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800189a:	2307      	movs	r3, #7
 800189c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800189e:	2302      	movs	r3, #2
 80018a0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80018a2:	2302      	movs	r3, #2
 80018a4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80018a6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80018aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018ac:	f107 0310 	add.w	r3, r7, #16
 80018b0:	4618      	mov	r0, r3
 80018b2:	f001 f83b 	bl	800292c <HAL_RCCEx_PeriphCLKConfig>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <HAL_RNG_MspInit+0x60>
    {
      Error_Handler();
 80018bc:	f7ff ffa6 	bl	800180c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80018c0:	4b08      	ldr	r3, [pc, #32]	; (80018e4 <HAL_RNG_MspInit+0x84>)
 80018c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c4:	4a07      	ldr	r2, [pc, #28]	; (80018e4 <HAL_RNG_MspInit+0x84>)
 80018c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018cc:	4b05      	ldr	r3, [pc, #20]	; (80018e4 <HAL_RNG_MspInit+0x84>)
 80018ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018d4:	60fb      	str	r3, [r7, #12]
 80018d6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 80018d8:	bf00      	nop
 80018da:	3798      	adds	r7, #152	; 0x98
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	50060800 	.word	0x50060800
 80018e4:	40021000 	.word	0x40021000

080018e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018ec:	e7fe      	b.n	80018ec <NMI_Handler+0x4>

080018ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018ee:	b480      	push	{r7}
 80018f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018f2:	e7fe      	b.n	80018f2 <HardFault_Handler+0x4>

080018f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018f8:	e7fe      	b.n	80018f8 <MemManage_Handler+0x4>

080018fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018fa:	b480      	push	{r7}
 80018fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018fe:	e7fe      	b.n	80018fe <BusFault_Handler+0x4>

08001900 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001904:	e7fe      	b.n	8001904 <UsageFault_Handler+0x4>

08001906 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001906:	b480      	push	{r7}
 8001908:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800190a:	bf00      	nop
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001918:	bf00      	nop
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr

08001922 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001922:	b480      	push	{r7}
 8001924:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001926:	bf00      	nop
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001934:	f000 f8c8 	bl	8001ac8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001938:	bf00      	nop
 800193a:	bd80      	pop	{r7, pc}

0800193c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b086      	sub	sp, #24
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001944:	4a14      	ldr	r2, [pc, #80]	; (8001998 <_sbrk+0x5c>)
 8001946:	4b15      	ldr	r3, [pc, #84]	; (800199c <_sbrk+0x60>)
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001950:	4b13      	ldr	r3, [pc, #76]	; (80019a0 <_sbrk+0x64>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d102      	bne.n	800195e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001958:	4b11      	ldr	r3, [pc, #68]	; (80019a0 <_sbrk+0x64>)
 800195a:	4a12      	ldr	r2, [pc, #72]	; (80019a4 <_sbrk+0x68>)
 800195c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800195e:	4b10      	ldr	r3, [pc, #64]	; (80019a0 <_sbrk+0x64>)
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4413      	add	r3, r2
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	429a      	cmp	r2, r3
 800196a:	d207      	bcs.n	800197c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800196c:	f001 fcf2 	bl	8003354 <__errno>
 8001970:	4603      	mov	r3, r0
 8001972:	220c      	movs	r2, #12
 8001974:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001976:	f04f 33ff 	mov.w	r3, #4294967295
 800197a:	e009      	b.n	8001990 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800197c:	4b08      	ldr	r3, [pc, #32]	; (80019a0 <_sbrk+0x64>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001982:	4b07      	ldr	r3, [pc, #28]	; (80019a0 <_sbrk+0x64>)
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4413      	add	r3, r2
 800198a:	4a05      	ldr	r2, [pc, #20]	; (80019a0 <_sbrk+0x64>)
 800198c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800198e:	68fb      	ldr	r3, [r7, #12]
}
 8001990:	4618      	mov	r0, r3
 8001992:	3718      	adds	r7, #24
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	20018000 	.word	0x20018000
 800199c:	00000400 	.word	0x00000400
 80019a0:	200000a8 	.word	0x200000a8
 80019a4:	200000c0 	.word	0x200000c0

080019a8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80019ac:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <SystemInit+0x20>)
 80019ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019b2:	4a05      	ldr	r2, [pc, #20]	; (80019c8 <SystemInit+0x20>)
 80019b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80019bc:	bf00      	nop
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	e000ed00 	.word	0xe000ed00

080019cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80019cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a04 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019d0:	f7ff ffea 	bl	80019a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019d4:	480c      	ldr	r0, [pc, #48]	; (8001a08 <LoopForever+0x6>)
  ldr r1, =_edata
 80019d6:	490d      	ldr	r1, [pc, #52]	; (8001a0c <LoopForever+0xa>)
  ldr r2, =_sidata
 80019d8:	4a0d      	ldr	r2, [pc, #52]	; (8001a10 <LoopForever+0xe>)
  movs r3, #0
 80019da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019dc:	e002      	b.n	80019e4 <LoopCopyDataInit>

080019de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019e2:	3304      	adds	r3, #4

080019e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019e8:	d3f9      	bcc.n	80019de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ea:	4a0a      	ldr	r2, [pc, #40]	; (8001a14 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019ec:	4c0a      	ldr	r4, [pc, #40]	; (8001a18 <LoopForever+0x16>)
  movs r3, #0
 80019ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019f0:	e001      	b.n	80019f6 <LoopFillZerobss>

080019f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019f4:	3204      	adds	r2, #4

080019f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019f8:	d3fb      	bcc.n	80019f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019fa:	f001 fcb1 	bl	8003360 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019fe:	f7fe ff6d 	bl	80008dc <main>

08001a02 <LoopForever>:

LoopForever:
    b LoopForever
 8001a02:	e7fe      	b.n	8001a02 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001a04:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001a08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a0c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001a10:	080037c0 	.word	0x080037c0
  ldr r2, =_sbss
 8001a14:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001a18:	200000c0 	.word	0x200000c0

08001a1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a1c:	e7fe      	b.n	8001a1c <ADC1_2_IRQHandler>

08001a1e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b082      	sub	sp, #8
 8001a22:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a24:	2300      	movs	r3, #0
 8001a26:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a28:	2003      	movs	r0, #3
 8001a2a:	f000 f91f 	bl	8001c6c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a2e:	200f      	movs	r0, #15
 8001a30:	f000 f80e 	bl	8001a50 <HAL_InitTick>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d002      	beq.n	8001a40 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	71fb      	strb	r3, [r7, #7]
 8001a3e:	e001      	b.n	8001a44 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a40:	f7ff feea 	bl	8001818 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a44:	79fb      	ldrb	r3, [r7, #7]
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
	...

08001a50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001a5c:	4b17      	ldr	r3, [pc, #92]	; (8001abc <HAL_InitTick+0x6c>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d023      	beq.n	8001aac <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001a64:	4b16      	ldr	r3, [pc, #88]	; (8001ac0 <HAL_InitTick+0x70>)
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	4b14      	ldr	r3, [pc, #80]	; (8001abc <HAL_InitTick+0x6c>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a72:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f000 f91d 	bl	8001cba <HAL_SYSTICK_Config>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d10f      	bne.n	8001aa6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2b0f      	cmp	r3, #15
 8001a8a:	d809      	bhi.n	8001aa0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	6879      	ldr	r1, [r7, #4]
 8001a90:	f04f 30ff 	mov.w	r0, #4294967295
 8001a94:	f000 f8f5 	bl	8001c82 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a98:	4a0a      	ldr	r2, [pc, #40]	; (8001ac4 <HAL_InitTick+0x74>)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6013      	str	r3, [r2, #0]
 8001a9e:	e007      	b.n	8001ab0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	73fb      	strb	r3, [r7, #15]
 8001aa4:	e004      	b.n	8001ab0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	73fb      	strb	r3, [r7, #15]
 8001aaa:	e001      	b.n	8001ab0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	2000000c 	.word	0x2000000c
 8001ac0:	20000004 	.word	0x20000004
 8001ac4:	20000008 	.word	0x20000008

08001ac8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001acc:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <HAL_IncTick+0x20>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	4b06      	ldr	r3, [pc, #24]	; (8001aec <HAL_IncTick+0x24>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	4a04      	ldr	r2, [pc, #16]	; (8001aec <HAL_IncTick+0x24>)
 8001ada:	6013      	str	r3, [r2, #0]
}
 8001adc:	bf00      	nop
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	2000000c 	.word	0x2000000c
 8001aec:	200000ac 	.word	0x200000ac

08001af0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  return uwTick;
 8001af4:	4b03      	ldr	r3, [pc, #12]	; (8001b04 <HAL_GetTick+0x14>)
 8001af6:	681b      	ldr	r3, [r3, #0]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	200000ac 	.word	0x200000ac

08001b08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b085      	sub	sp, #20
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f003 0307 	and.w	r3, r3, #7
 8001b16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b18:	4b0c      	ldr	r3, [pc, #48]	; (8001b4c <__NVIC_SetPriorityGrouping+0x44>)
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b1e:	68ba      	ldr	r2, [r7, #8]
 8001b20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b24:	4013      	ands	r3, r2
 8001b26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b3a:	4a04      	ldr	r2, [pc, #16]	; (8001b4c <__NVIC_SetPriorityGrouping+0x44>)
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	60d3      	str	r3, [r2, #12]
}
 8001b40:	bf00      	nop
 8001b42:	3714      	adds	r7, #20
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr
 8001b4c:	e000ed00 	.word	0xe000ed00

08001b50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b54:	4b04      	ldr	r3, [pc, #16]	; (8001b68 <__NVIC_GetPriorityGrouping+0x18>)
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	0a1b      	lsrs	r3, r3, #8
 8001b5a:	f003 0307 	and.w	r3, r3, #7
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr
 8001b68:	e000ed00 	.word	0xe000ed00

08001b6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	4603      	mov	r3, r0
 8001b74:	6039      	str	r1, [r7, #0]
 8001b76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	db0a      	blt.n	8001b96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	b2da      	uxtb	r2, r3
 8001b84:	490c      	ldr	r1, [pc, #48]	; (8001bb8 <__NVIC_SetPriority+0x4c>)
 8001b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8a:	0112      	lsls	r2, r2, #4
 8001b8c:	b2d2      	uxtb	r2, r2
 8001b8e:	440b      	add	r3, r1
 8001b90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b94:	e00a      	b.n	8001bac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	b2da      	uxtb	r2, r3
 8001b9a:	4908      	ldr	r1, [pc, #32]	; (8001bbc <__NVIC_SetPriority+0x50>)
 8001b9c:	79fb      	ldrb	r3, [r7, #7]
 8001b9e:	f003 030f 	and.w	r3, r3, #15
 8001ba2:	3b04      	subs	r3, #4
 8001ba4:	0112      	lsls	r2, r2, #4
 8001ba6:	b2d2      	uxtb	r2, r2
 8001ba8:	440b      	add	r3, r1
 8001baa:	761a      	strb	r2, [r3, #24]
}
 8001bac:	bf00      	nop
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr
 8001bb8:	e000e100 	.word	0xe000e100
 8001bbc:	e000ed00 	.word	0xe000ed00

08001bc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b089      	sub	sp, #36	; 0x24
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	60f8      	str	r0, [r7, #12]
 8001bc8:	60b9      	str	r1, [r7, #8]
 8001bca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f003 0307 	and.w	r3, r3, #7
 8001bd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	f1c3 0307 	rsb	r3, r3, #7
 8001bda:	2b04      	cmp	r3, #4
 8001bdc:	bf28      	it	cs
 8001bde:	2304      	movcs	r3, #4
 8001be0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	3304      	adds	r3, #4
 8001be6:	2b06      	cmp	r3, #6
 8001be8:	d902      	bls.n	8001bf0 <NVIC_EncodePriority+0x30>
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	3b03      	subs	r3, #3
 8001bee:	e000      	b.n	8001bf2 <NVIC_EncodePriority+0x32>
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfe:	43da      	mvns	r2, r3
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	401a      	ands	r2, r3
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c08:	f04f 31ff 	mov.w	r1, #4294967295
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c12:	43d9      	mvns	r1, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c18:	4313      	orrs	r3, r2
         );
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3724      	adds	r7, #36	; 0x24
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
	...

08001c28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	3b01      	subs	r3, #1
 8001c34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c38:	d301      	bcc.n	8001c3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e00f      	b.n	8001c5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c3e:	4a0a      	ldr	r2, [pc, #40]	; (8001c68 <SysTick_Config+0x40>)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	3b01      	subs	r3, #1
 8001c44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c46:	210f      	movs	r1, #15
 8001c48:	f04f 30ff 	mov.w	r0, #4294967295
 8001c4c:	f7ff ff8e 	bl	8001b6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c50:	4b05      	ldr	r3, [pc, #20]	; (8001c68 <SysTick_Config+0x40>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c56:	4b04      	ldr	r3, [pc, #16]	; (8001c68 <SysTick_Config+0x40>)
 8001c58:	2207      	movs	r2, #7
 8001c5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c5c:	2300      	movs	r3, #0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	e000e010 	.word	0xe000e010

08001c6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f7ff ff47 	bl	8001b08 <__NVIC_SetPriorityGrouping>
}
 8001c7a:	bf00      	nop
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b086      	sub	sp, #24
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	4603      	mov	r3, r0
 8001c8a:	60b9      	str	r1, [r7, #8]
 8001c8c:	607a      	str	r2, [r7, #4]
 8001c8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c90:	2300      	movs	r3, #0
 8001c92:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c94:	f7ff ff5c 	bl	8001b50 <__NVIC_GetPriorityGrouping>
 8001c98:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	68b9      	ldr	r1, [r7, #8]
 8001c9e:	6978      	ldr	r0, [r7, #20]
 8001ca0:	f7ff ff8e 	bl	8001bc0 <NVIC_EncodePriority>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001caa:	4611      	mov	r1, r2
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff ff5d 	bl	8001b6c <__NVIC_SetPriority>
}
 8001cb2:	bf00      	nop
 8001cb4:	3718      	adds	r7, #24
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b082      	sub	sp, #8
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f7ff ffb0 	bl	8001c28 <SysTick_Config>
 8001cc8:	4603      	mov	r3, r0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
	...

08001cd4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001cd8:	4b04      	ldr	r3, [pc, #16]	; (8001cec <HAL_PWREx_GetVoltageRange+0x18>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	40007000 	.word	0x40007000

08001cf0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cfe:	d130      	bne.n	8001d62 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d00:	4b23      	ldr	r3, [pc, #140]	; (8001d90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d0c:	d038      	beq.n	8001d80 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d0e:	4b20      	ldr	r3, [pc, #128]	; (8001d90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d16:	4a1e      	ldr	r2, [pc, #120]	; (8001d90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d18:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d1c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d1e:	4b1d      	ldr	r3, [pc, #116]	; (8001d94 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2232      	movs	r2, #50	; 0x32
 8001d24:	fb02 f303 	mul.w	r3, r2, r3
 8001d28:	4a1b      	ldr	r2, [pc, #108]	; (8001d98 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d2e:	0c9b      	lsrs	r3, r3, #18
 8001d30:	3301      	adds	r3, #1
 8001d32:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d34:	e002      	b.n	8001d3c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	3b01      	subs	r3, #1
 8001d3a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d3c:	4b14      	ldr	r3, [pc, #80]	; (8001d90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d3e:	695b      	ldr	r3, [r3, #20]
 8001d40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d48:	d102      	bne.n	8001d50 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d1f2      	bne.n	8001d36 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d50:	4b0f      	ldr	r3, [pc, #60]	; (8001d90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d52:	695b      	ldr	r3, [r3, #20]
 8001d54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d5c:	d110      	bne.n	8001d80 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e00f      	b.n	8001d82 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d62:	4b0b      	ldr	r3, [pc, #44]	; (8001d90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d6e:	d007      	beq.n	8001d80 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d70:	4b07      	ldr	r3, [pc, #28]	; (8001d90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d78:	4a05      	ldr	r2, [pc, #20]	; (8001d90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d7e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3714      	adds	r7, #20
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	40007000 	.word	0x40007000
 8001d94:	20000004 	.word	0x20000004
 8001d98:	431bde83 	.word	0x431bde83

08001d9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b088      	sub	sp, #32
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d101      	bne.n	8001dae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e3ca      	b.n	8002544 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dae:	4b97      	ldr	r3, [pc, #604]	; (800200c <HAL_RCC_OscConfig+0x270>)
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f003 030c 	and.w	r3, r3, #12
 8001db6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001db8:	4b94      	ldr	r3, [pc, #592]	; (800200c <HAL_RCC_OscConfig+0x270>)
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	f003 0303 	and.w	r3, r3, #3
 8001dc0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0310 	and.w	r3, r3, #16
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	f000 80e4 	beq.w	8001f98 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d007      	beq.n	8001de6 <HAL_RCC_OscConfig+0x4a>
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	2b0c      	cmp	r3, #12
 8001dda:	f040 808b 	bne.w	8001ef4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	f040 8087 	bne.w	8001ef4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001de6:	4b89      	ldr	r3, [pc, #548]	; (800200c <HAL_RCC_OscConfig+0x270>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d005      	beq.n	8001dfe <HAL_RCC_OscConfig+0x62>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	699b      	ldr	r3, [r3, #24]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d101      	bne.n	8001dfe <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e3a2      	b.n	8002544 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a1a      	ldr	r2, [r3, #32]
 8001e02:	4b82      	ldr	r3, [pc, #520]	; (800200c <HAL_RCC_OscConfig+0x270>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0308 	and.w	r3, r3, #8
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d004      	beq.n	8001e18 <HAL_RCC_OscConfig+0x7c>
 8001e0e:	4b7f      	ldr	r3, [pc, #508]	; (800200c <HAL_RCC_OscConfig+0x270>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e16:	e005      	b.n	8001e24 <HAL_RCC_OscConfig+0x88>
 8001e18:	4b7c      	ldr	r3, [pc, #496]	; (800200c <HAL_RCC_OscConfig+0x270>)
 8001e1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e1e:	091b      	lsrs	r3, r3, #4
 8001e20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d223      	bcs.n	8001e70 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6a1b      	ldr	r3, [r3, #32]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f000 fd1d 	bl	800286c <RCC_SetFlashLatencyFromMSIRange>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e383      	b.n	8002544 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e3c:	4b73      	ldr	r3, [pc, #460]	; (800200c <HAL_RCC_OscConfig+0x270>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a72      	ldr	r2, [pc, #456]	; (800200c <HAL_RCC_OscConfig+0x270>)
 8001e42:	f043 0308 	orr.w	r3, r3, #8
 8001e46:	6013      	str	r3, [r2, #0]
 8001e48:	4b70      	ldr	r3, [pc, #448]	; (800200c <HAL_RCC_OscConfig+0x270>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a1b      	ldr	r3, [r3, #32]
 8001e54:	496d      	ldr	r1, [pc, #436]	; (800200c <HAL_RCC_OscConfig+0x270>)
 8001e56:	4313      	orrs	r3, r2
 8001e58:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e5a:	4b6c      	ldr	r3, [pc, #432]	; (800200c <HAL_RCC_OscConfig+0x270>)
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	69db      	ldr	r3, [r3, #28]
 8001e66:	021b      	lsls	r3, r3, #8
 8001e68:	4968      	ldr	r1, [pc, #416]	; (800200c <HAL_RCC_OscConfig+0x270>)
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	604b      	str	r3, [r1, #4]
 8001e6e:	e025      	b.n	8001ebc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e70:	4b66      	ldr	r3, [pc, #408]	; (800200c <HAL_RCC_OscConfig+0x270>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a65      	ldr	r2, [pc, #404]	; (800200c <HAL_RCC_OscConfig+0x270>)
 8001e76:	f043 0308 	orr.w	r3, r3, #8
 8001e7a:	6013      	str	r3, [r2, #0]
 8001e7c:	4b63      	ldr	r3, [pc, #396]	; (800200c <HAL_RCC_OscConfig+0x270>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6a1b      	ldr	r3, [r3, #32]
 8001e88:	4960      	ldr	r1, [pc, #384]	; (800200c <HAL_RCC_OscConfig+0x270>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e8e:	4b5f      	ldr	r3, [pc, #380]	; (800200c <HAL_RCC_OscConfig+0x270>)
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	69db      	ldr	r3, [r3, #28]
 8001e9a:	021b      	lsls	r3, r3, #8
 8001e9c:	495b      	ldr	r1, [pc, #364]	; (800200c <HAL_RCC_OscConfig+0x270>)
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d109      	bne.n	8001ebc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6a1b      	ldr	r3, [r3, #32]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f000 fcdd 	bl	800286c <RCC_SetFlashLatencyFromMSIRange>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e343      	b.n	8002544 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ebc:	f000 fc4a 	bl	8002754 <HAL_RCC_GetSysClockFreq>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	4b52      	ldr	r3, [pc, #328]	; (800200c <HAL_RCC_OscConfig+0x270>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	091b      	lsrs	r3, r3, #4
 8001ec8:	f003 030f 	and.w	r3, r3, #15
 8001ecc:	4950      	ldr	r1, [pc, #320]	; (8002010 <HAL_RCC_OscConfig+0x274>)
 8001ece:	5ccb      	ldrb	r3, [r1, r3]
 8001ed0:	f003 031f 	and.w	r3, r3, #31
 8001ed4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ed8:	4a4e      	ldr	r2, [pc, #312]	; (8002014 <HAL_RCC_OscConfig+0x278>)
 8001eda:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001edc:	4b4e      	ldr	r3, [pc, #312]	; (8002018 <HAL_RCC_OscConfig+0x27c>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff fdb5 	bl	8001a50 <HAL_InitTick>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001eea:	7bfb      	ldrb	r3, [r7, #15]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d052      	beq.n	8001f96 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001ef0:	7bfb      	ldrb	r3, [r7, #15]
 8001ef2:	e327      	b.n	8002544 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d032      	beq.n	8001f62 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001efc:	4b43      	ldr	r3, [pc, #268]	; (800200c <HAL_RCC_OscConfig+0x270>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a42      	ldr	r2, [pc, #264]	; (800200c <HAL_RCC_OscConfig+0x270>)
 8001f02:	f043 0301 	orr.w	r3, r3, #1
 8001f06:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f08:	f7ff fdf2 	bl	8001af0 <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f0e:	e008      	b.n	8001f22 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f10:	f7ff fdee 	bl	8001af0 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e310      	b.n	8002544 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f22:	4b3a      	ldr	r3, [pc, #232]	; (800200c <HAL_RCC_OscConfig+0x270>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d0f0      	beq.n	8001f10 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f2e:	4b37      	ldr	r3, [pc, #220]	; (800200c <HAL_RCC_OscConfig+0x270>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a36      	ldr	r2, [pc, #216]	; (800200c <HAL_RCC_OscConfig+0x270>)
 8001f34:	f043 0308 	orr.w	r3, r3, #8
 8001f38:	6013      	str	r3, [r2, #0]
 8001f3a:	4b34      	ldr	r3, [pc, #208]	; (800200c <HAL_RCC_OscConfig+0x270>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6a1b      	ldr	r3, [r3, #32]
 8001f46:	4931      	ldr	r1, [pc, #196]	; (800200c <HAL_RCC_OscConfig+0x270>)
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f4c:	4b2f      	ldr	r3, [pc, #188]	; (800200c <HAL_RCC_OscConfig+0x270>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	69db      	ldr	r3, [r3, #28]
 8001f58:	021b      	lsls	r3, r3, #8
 8001f5a:	492c      	ldr	r1, [pc, #176]	; (800200c <HAL_RCC_OscConfig+0x270>)
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	604b      	str	r3, [r1, #4]
 8001f60:	e01a      	b.n	8001f98 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001f62:	4b2a      	ldr	r3, [pc, #168]	; (800200c <HAL_RCC_OscConfig+0x270>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a29      	ldr	r2, [pc, #164]	; (800200c <HAL_RCC_OscConfig+0x270>)
 8001f68:	f023 0301 	bic.w	r3, r3, #1
 8001f6c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f6e:	f7ff fdbf 	bl	8001af0 <HAL_GetTick>
 8001f72:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f74:	e008      	b.n	8001f88 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f76:	f7ff fdbb 	bl	8001af0 <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d901      	bls.n	8001f88 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	e2dd      	b.n	8002544 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f88:	4b20      	ldr	r3, [pc, #128]	; (800200c <HAL_RCC_OscConfig+0x270>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0302 	and.w	r3, r3, #2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d1f0      	bne.n	8001f76 <HAL_RCC_OscConfig+0x1da>
 8001f94:	e000      	b.n	8001f98 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f96:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0301 	and.w	r3, r3, #1
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d074      	beq.n	800208e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	2b08      	cmp	r3, #8
 8001fa8:	d005      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x21a>
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	2b0c      	cmp	r3, #12
 8001fae:	d10e      	bne.n	8001fce <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	2b03      	cmp	r3, #3
 8001fb4:	d10b      	bne.n	8001fce <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fb6:	4b15      	ldr	r3, [pc, #84]	; (800200c <HAL_RCC_OscConfig+0x270>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d064      	beq.n	800208c <HAL_RCC_OscConfig+0x2f0>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d160      	bne.n	800208c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e2ba      	b.n	8002544 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fd6:	d106      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x24a>
 8001fd8:	4b0c      	ldr	r3, [pc, #48]	; (800200c <HAL_RCC_OscConfig+0x270>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a0b      	ldr	r2, [pc, #44]	; (800200c <HAL_RCC_OscConfig+0x270>)
 8001fde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fe2:	6013      	str	r3, [r2, #0]
 8001fe4:	e026      	b.n	8002034 <HAL_RCC_OscConfig+0x298>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fee:	d115      	bne.n	800201c <HAL_RCC_OscConfig+0x280>
 8001ff0:	4b06      	ldr	r3, [pc, #24]	; (800200c <HAL_RCC_OscConfig+0x270>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a05      	ldr	r2, [pc, #20]	; (800200c <HAL_RCC_OscConfig+0x270>)
 8001ff6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ffa:	6013      	str	r3, [r2, #0]
 8001ffc:	4b03      	ldr	r3, [pc, #12]	; (800200c <HAL_RCC_OscConfig+0x270>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a02      	ldr	r2, [pc, #8]	; (800200c <HAL_RCC_OscConfig+0x270>)
 8002002:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002006:	6013      	str	r3, [r2, #0]
 8002008:	e014      	b.n	8002034 <HAL_RCC_OscConfig+0x298>
 800200a:	bf00      	nop
 800200c:	40021000 	.word	0x40021000
 8002010:	08003778 	.word	0x08003778
 8002014:	20000004 	.word	0x20000004
 8002018:	20000008 	.word	0x20000008
 800201c:	4ba0      	ldr	r3, [pc, #640]	; (80022a0 <HAL_RCC_OscConfig+0x504>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a9f      	ldr	r2, [pc, #636]	; (80022a0 <HAL_RCC_OscConfig+0x504>)
 8002022:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002026:	6013      	str	r3, [r2, #0]
 8002028:	4b9d      	ldr	r3, [pc, #628]	; (80022a0 <HAL_RCC_OscConfig+0x504>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a9c      	ldr	r2, [pc, #624]	; (80022a0 <HAL_RCC_OscConfig+0x504>)
 800202e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002032:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d013      	beq.n	8002064 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800203c:	f7ff fd58 	bl	8001af0 <HAL_GetTick>
 8002040:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002042:	e008      	b.n	8002056 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002044:	f7ff fd54 	bl	8001af0 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	2b64      	cmp	r3, #100	; 0x64
 8002050:	d901      	bls.n	8002056 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e276      	b.n	8002544 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002056:	4b92      	ldr	r3, [pc, #584]	; (80022a0 <HAL_RCC_OscConfig+0x504>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d0f0      	beq.n	8002044 <HAL_RCC_OscConfig+0x2a8>
 8002062:	e014      	b.n	800208e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002064:	f7ff fd44 	bl	8001af0 <HAL_GetTick>
 8002068:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800206a:	e008      	b.n	800207e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800206c:	f7ff fd40 	bl	8001af0 <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b64      	cmp	r3, #100	; 0x64
 8002078:	d901      	bls.n	800207e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e262      	b.n	8002544 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800207e:	4b88      	ldr	r3, [pc, #544]	; (80022a0 <HAL_RCC_OscConfig+0x504>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d1f0      	bne.n	800206c <HAL_RCC_OscConfig+0x2d0>
 800208a:	e000      	b.n	800208e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800208c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d060      	beq.n	800215c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	2b04      	cmp	r3, #4
 800209e:	d005      	beq.n	80020ac <HAL_RCC_OscConfig+0x310>
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	2b0c      	cmp	r3, #12
 80020a4:	d119      	bne.n	80020da <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d116      	bne.n	80020da <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020ac:	4b7c      	ldr	r3, [pc, #496]	; (80022a0 <HAL_RCC_OscConfig+0x504>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d005      	beq.n	80020c4 <HAL_RCC_OscConfig+0x328>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d101      	bne.n	80020c4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e23f      	b.n	8002544 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020c4:	4b76      	ldr	r3, [pc, #472]	; (80022a0 <HAL_RCC_OscConfig+0x504>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	691b      	ldr	r3, [r3, #16]
 80020d0:	061b      	lsls	r3, r3, #24
 80020d2:	4973      	ldr	r1, [pc, #460]	; (80022a0 <HAL_RCC_OscConfig+0x504>)
 80020d4:	4313      	orrs	r3, r2
 80020d6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020d8:	e040      	b.n	800215c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d023      	beq.n	800212a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020e2:	4b6f      	ldr	r3, [pc, #444]	; (80022a0 <HAL_RCC_OscConfig+0x504>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a6e      	ldr	r2, [pc, #440]	; (80022a0 <HAL_RCC_OscConfig+0x504>)
 80020e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ee:	f7ff fcff 	bl	8001af0 <HAL_GetTick>
 80020f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020f4:	e008      	b.n	8002108 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020f6:	f7ff fcfb 	bl	8001af0 <HAL_GetTick>
 80020fa:	4602      	mov	r2, r0
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	2b02      	cmp	r3, #2
 8002102:	d901      	bls.n	8002108 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	e21d      	b.n	8002544 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002108:	4b65      	ldr	r3, [pc, #404]	; (80022a0 <HAL_RCC_OscConfig+0x504>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002110:	2b00      	cmp	r3, #0
 8002112:	d0f0      	beq.n	80020f6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002114:	4b62      	ldr	r3, [pc, #392]	; (80022a0 <HAL_RCC_OscConfig+0x504>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	691b      	ldr	r3, [r3, #16]
 8002120:	061b      	lsls	r3, r3, #24
 8002122:	495f      	ldr	r1, [pc, #380]	; (80022a0 <HAL_RCC_OscConfig+0x504>)
 8002124:	4313      	orrs	r3, r2
 8002126:	604b      	str	r3, [r1, #4]
 8002128:	e018      	b.n	800215c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800212a:	4b5d      	ldr	r3, [pc, #372]	; (80022a0 <HAL_RCC_OscConfig+0x504>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a5c      	ldr	r2, [pc, #368]	; (80022a0 <HAL_RCC_OscConfig+0x504>)
 8002130:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002134:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002136:	f7ff fcdb 	bl	8001af0 <HAL_GetTick>
 800213a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800213c:	e008      	b.n	8002150 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800213e:	f7ff fcd7 	bl	8001af0 <HAL_GetTick>
 8002142:	4602      	mov	r2, r0
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	2b02      	cmp	r3, #2
 800214a:	d901      	bls.n	8002150 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e1f9      	b.n	8002544 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002150:	4b53      	ldr	r3, [pc, #332]	; (80022a0 <HAL_RCC_OscConfig+0x504>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002158:	2b00      	cmp	r3, #0
 800215a:	d1f0      	bne.n	800213e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0308 	and.w	r3, r3, #8
 8002164:	2b00      	cmp	r3, #0
 8002166:	d03c      	beq.n	80021e2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	695b      	ldr	r3, [r3, #20]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d01c      	beq.n	80021aa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002170:	4b4b      	ldr	r3, [pc, #300]	; (80022a0 <HAL_RCC_OscConfig+0x504>)
 8002172:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002176:	4a4a      	ldr	r2, [pc, #296]	; (80022a0 <HAL_RCC_OscConfig+0x504>)
 8002178:	f043 0301 	orr.w	r3, r3, #1
 800217c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002180:	f7ff fcb6 	bl	8001af0 <HAL_GetTick>
 8002184:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002186:	e008      	b.n	800219a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002188:	f7ff fcb2 	bl	8001af0 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b02      	cmp	r3, #2
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e1d4      	b.n	8002544 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800219a:	4b41      	ldr	r3, [pc, #260]	; (80022a0 <HAL_RCC_OscConfig+0x504>)
 800219c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021a0:	f003 0302 	and.w	r3, r3, #2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d0ef      	beq.n	8002188 <HAL_RCC_OscConfig+0x3ec>
 80021a8:	e01b      	b.n	80021e2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021aa:	4b3d      	ldr	r3, [pc, #244]	; (80022a0 <HAL_RCC_OscConfig+0x504>)
 80021ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021b0:	4a3b      	ldr	r2, [pc, #236]	; (80022a0 <HAL_RCC_OscConfig+0x504>)
 80021b2:	f023 0301 	bic.w	r3, r3, #1
 80021b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ba:	f7ff fc99 	bl	8001af0 <HAL_GetTick>
 80021be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021c0:	e008      	b.n	80021d4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021c2:	f7ff fc95 	bl	8001af0 <HAL_GetTick>
 80021c6:	4602      	mov	r2, r0
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d901      	bls.n	80021d4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	e1b7      	b.n	8002544 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021d4:	4b32      	ldr	r3, [pc, #200]	; (80022a0 <HAL_RCC_OscConfig+0x504>)
 80021d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d1ef      	bne.n	80021c2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0304 	and.w	r3, r3, #4
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	f000 80a6 	beq.w	800233c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021f0:	2300      	movs	r3, #0
 80021f2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80021f4:	4b2a      	ldr	r3, [pc, #168]	; (80022a0 <HAL_RCC_OscConfig+0x504>)
 80021f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d10d      	bne.n	800221c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002200:	4b27      	ldr	r3, [pc, #156]	; (80022a0 <HAL_RCC_OscConfig+0x504>)
 8002202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002204:	4a26      	ldr	r2, [pc, #152]	; (80022a0 <HAL_RCC_OscConfig+0x504>)
 8002206:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800220a:	6593      	str	r3, [r2, #88]	; 0x58
 800220c:	4b24      	ldr	r3, [pc, #144]	; (80022a0 <HAL_RCC_OscConfig+0x504>)
 800220e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002210:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002214:	60bb      	str	r3, [r7, #8]
 8002216:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002218:	2301      	movs	r3, #1
 800221a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800221c:	4b21      	ldr	r3, [pc, #132]	; (80022a4 <HAL_RCC_OscConfig+0x508>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002224:	2b00      	cmp	r3, #0
 8002226:	d118      	bne.n	800225a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002228:	4b1e      	ldr	r3, [pc, #120]	; (80022a4 <HAL_RCC_OscConfig+0x508>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a1d      	ldr	r2, [pc, #116]	; (80022a4 <HAL_RCC_OscConfig+0x508>)
 800222e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002232:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002234:	f7ff fc5c 	bl	8001af0 <HAL_GetTick>
 8002238:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800223a:	e008      	b.n	800224e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800223c:	f7ff fc58 	bl	8001af0 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b02      	cmp	r3, #2
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e17a      	b.n	8002544 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800224e:	4b15      	ldr	r3, [pc, #84]	; (80022a4 <HAL_RCC_OscConfig+0x508>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002256:	2b00      	cmp	r3, #0
 8002258:	d0f0      	beq.n	800223c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	2b01      	cmp	r3, #1
 8002260:	d108      	bne.n	8002274 <HAL_RCC_OscConfig+0x4d8>
 8002262:	4b0f      	ldr	r3, [pc, #60]	; (80022a0 <HAL_RCC_OscConfig+0x504>)
 8002264:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002268:	4a0d      	ldr	r2, [pc, #52]	; (80022a0 <HAL_RCC_OscConfig+0x504>)
 800226a:	f043 0301 	orr.w	r3, r3, #1
 800226e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002272:	e029      	b.n	80022c8 <HAL_RCC_OscConfig+0x52c>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	2b05      	cmp	r3, #5
 800227a:	d115      	bne.n	80022a8 <HAL_RCC_OscConfig+0x50c>
 800227c:	4b08      	ldr	r3, [pc, #32]	; (80022a0 <HAL_RCC_OscConfig+0x504>)
 800227e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002282:	4a07      	ldr	r2, [pc, #28]	; (80022a0 <HAL_RCC_OscConfig+0x504>)
 8002284:	f043 0304 	orr.w	r3, r3, #4
 8002288:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800228c:	4b04      	ldr	r3, [pc, #16]	; (80022a0 <HAL_RCC_OscConfig+0x504>)
 800228e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002292:	4a03      	ldr	r2, [pc, #12]	; (80022a0 <HAL_RCC_OscConfig+0x504>)
 8002294:	f043 0301 	orr.w	r3, r3, #1
 8002298:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800229c:	e014      	b.n	80022c8 <HAL_RCC_OscConfig+0x52c>
 800229e:	bf00      	nop
 80022a0:	40021000 	.word	0x40021000
 80022a4:	40007000 	.word	0x40007000
 80022a8:	4b9c      	ldr	r3, [pc, #624]	; (800251c <HAL_RCC_OscConfig+0x780>)
 80022aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ae:	4a9b      	ldr	r2, [pc, #620]	; (800251c <HAL_RCC_OscConfig+0x780>)
 80022b0:	f023 0301 	bic.w	r3, r3, #1
 80022b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022b8:	4b98      	ldr	r3, [pc, #608]	; (800251c <HAL_RCC_OscConfig+0x780>)
 80022ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022be:	4a97      	ldr	r2, [pc, #604]	; (800251c <HAL_RCC_OscConfig+0x780>)
 80022c0:	f023 0304 	bic.w	r3, r3, #4
 80022c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d016      	beq.n	80022fe <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022d0:	f7ff fc0e 	bl	8001af0 <HAL_GetTick>
 80022d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022d6:	e00a      	b.n	80022ee <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022d8:	f7ff fc0a 	bl	8001af0 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e12a      	b.n	8002544 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022ee:	4b8b      	ldr	r3, [pc, #556]	; (800251c <HAL_RCC_OscConfig+0x780>)
 80022f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022f4:	f003 0302 	and.w	r3, r3, #2
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d0ed      	beq.n	80022d8 <HAL_RCC_OscConfig+0x53c>
 80022fc:	e015      	b.n	800232a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022fe:	f7ff fbf7 	bl	8001af0 <HAL_GetTick>
 8002302:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002304:	e00a      	b.n	800231c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002306:	f7ff fbf3 	bl	8001af0 <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	f241 3288 	movw	r2, #5000	; 0x1388
 8002314:	4293      	cmp	r3, r2
 8002316:	d901      	bls.n	800231c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e113      	b.n	8002544 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800231c:	4b7f      	ldr	r3, [pc, #508]	; (800251c <HAL_RCC_OscConfig+0x780>)
 800231e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1ed      	bne.n	8002306 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800232a:	7ffb      	ldrb	r3, [r7, #31]
 800232c:	2b01      	cmp	r3, #1
 800232e:	d105      	bne.n	800233c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002330:	4b7a      	ldr	r3, [pc, #488]	; (800251c <HAL_RCC_OscConfig+0x780>)
 8002332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002334:	4a79      	ldr	r2, [pc, #484]	; (800251c <HAL_RCC_OscConfig+0x780>)
 8002336:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800233a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002340:	2b00      	cmp	r3, #0
 8002342:	f000 80fe 	beq.w	8002542 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800234a:	2b02      	cmp	r3, #2
 800234c:	f040 80d0 	bne.w	80024f0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002350:	4b72      	ldr	r3, [pc, #456]	; (800251c <HAL_RCC_OscConfig+0x780>)
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	f003 0203 	and.w	r2, r3, #3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002360:	429a      	cmp	r2, r3
 8002362:	d130      	bne.n	80023c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236e:	3b01      	subs	r3, #1
 8002370:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002372:	429a      	cmp	r2, r3
 8002374:	d127      	bne.n	80023c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002380:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002382:	429a      	cmp	r2, r3
 8002384:	d11f      	bne.n	80023c6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002390:	2a07      	cmp	r2, #7
 8002392:	bf14      	ite	ne
 8002394:	2201      	movne	r2, #1
 8002396:	2200      	moveq	r2, #0
 8002398:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800239a:	4293      	cmp	r3, r2
 800239c:	d113      	bne.n	80023c6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023a8:	085b      	lsrs	r3, r3, #1
 80023aa:	3b01      	subs	r3, #1
 80023ac:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d109      	bne.n	80023c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023bc:	085b      	lsrs	r3, r3, #1
 80023be:	3b01      	subs	r3, #1
 80023c0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d06e      	beq.n	80024a4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	2b0c      	cmp	r3, #12
 80023ca:	d069      	beq.n	80024a0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80023cc:	4b53      	ldr	r3, [pc, #332]	; (800251c <HAL_RCC_OscConfig+0x780>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d105      	bne.n	80023e4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80023d8:	4b50      	ldr	r3, [pc, #320]	; (800251c <HAL_RCC_OscConfig+0x780>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e0ad      	b.n	8002544 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80023e8:	4b4c      	ldr	r3, [pc, #304]	; (800251c <HAL_RCC_OscConfig+0x780>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a4b      	ldr	r2, [pc, #300]	; (800251c <HAL_RCC_OscConfig+0x780>)
 80023ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023f2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80023f4:	f7ff fb7c 	bl	8001af0 <HAL_GetTick>
 80023f8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023fa:	e008      	b.n	800240e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023fc:	f7ff fb78 	bl	8001af0 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b02      	cmp	r3, #2
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e09a      	b.n	8002544 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800240e:	4b43      	ldr	r3, [pc, #268]	; (800251c <HAL_RCC_OscConfig+0x780>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d1f0      	bne.n	80023fc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800241a:	4b40      	ldr	r3, [pc, #256]	; (800251c <HAL_RCC_OscConfig+0x780>)
 800241c:	68da      	ldr	r2, [r3, #12]
 800241e:	4b40      	ldr	r3, [pc, #256]	; (8002520 <HAL_RCC_OscConfig+0x784>)
 8002420:	4013      	ands	r3, r2
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800242a:	3a01      	subs	r2, #1
 800242c:	0112      	lsls	r2, r2, #4
 800242e:	4311      	orrs	r1, r2
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002434:	0212      	lsls	r2, r2, #8
 8002436:	4311      	orrs	r1, r2
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800243c:	0852      	lsrs	r2, r2, #1
 800243e:	3a01      	subs	r2, #1
 8002440:	0552      	lsls	r2, r2, #21
 8002442:	4311      	orrs	r1, r2
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002448:	0852      	lsrs	r2, r2, #1
 800244a:	3a01      	subs	r2, #1
 800244c:	0652      	lsls	r2, r2, #25
 800244e:	4311      	orrs	r1, r2
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002454:	0912      	lsrs	r2, r2, #4
 8002456:	0452      	lsls	r2, r2, #17
 8002458:	430a      	orrs	r2, r1
 800245a:	4930      	ldr	r1, [pc, #192]	; (800251c <HAL_RCC_OscConfig+0x780>)
 800245c:	4313      	orrs	r3, r2
 800245e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002460:	4b2e      	ldr	r3, [pc, #184]	; (800251c <HAL_RCC_OscConfig+0x780>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a2d      	ldr	r2, [pc, #180]	; (800251c <HAL_RCC_OscConfig+0x780>)
 8002466:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800246a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800246c:	4b2b      	ldr	r3, [pc, #172]	; (800251c <HAL_RCC_OscConfig+0x780>)
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	4a2a      	ldr	r2, [pc, #168]	; (800251c <HAL_RCC_OscConfig+0x780>)
 8002472:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002476:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002478:	f7ff fb3a 	bl	8001af0 <HAL_GetTick>
 800247c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800247e:	e008      	b.n	8002492 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002480:	f7ff fb36 	bl	8001af0 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b02      	cmp	r3, #2
 800248c:	d901      	bls.n	8002492 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e058      	b.n	8002544 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002492:	4b22      	ldr	r3, [pc, #136]	; (800251c <HAL_RCC_OscConfig+0x780>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d0f0      	beq.n	8002480 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800249e:	e050      	b.n	8002542 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e04f      	b.n	8002544 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024a4:	4b1d      	ldr	r3, [pc, #116]	; (800251c <HAL_RCC_OscConfig+0x780>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d148      	bne.n	8002542 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80024b0:	4b1a      	ldr	r3, [pc, #104]	; (800251c <HAL_RCC_OscConfig+0x780>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a19      	ldr	r2, [pc, #100]	; (800251c <HAL_RCC_OscConfig+0x780>)
 80024b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024ba:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024bc:	4b17      	ldr	r3, [pc, #92]	; (800251c <HAL_RCC_OscConfig+0x780>)
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	4a16      	ldr	r2, [pc, #88]	; (800251c <HAL_RCC_OscConfig+0x780>)
 80024c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024c6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80024c8:	f7ff fb12 	bl	8001af0 <HAL_GetTick>
 80024cc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024ce:	e008      	b.n	80024e2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024d0:	f7ff fb0e 	bl	8001af0 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e030      	b.n	8002544 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024e2:	4b0e      	ldr	r3, [pc, #56]	; (800251c <HAL_RCC_OscConfig+0x780>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d0f0      	beq.n	80024d0 <HAL_RCC_OscConfig+0x734>
 80024ee:	e028      	b.n	8002542 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	2b0c      	cmp	r3, #12
 80024f4:	d023      	beq.n	800253e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024f6:	4b09      	ldr	r3, [pc, #36]	; (800251c <HAL_RCC_OscConfig+0x780>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a08      	ldr	r2, [pc, #32]	; (800251c <HAL_RCC_OscConfig+0x780>)
 80024fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002500:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002502:	f7ff faf5 	bl	8001af0 <HAL_GetTick>
 8002506:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002508:	e00c      	b.n	8002524 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800250a:	f7ff faf1 	bl	8001af0 <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	2b02      	cmp	r3, #2
 8002516:	d905      	bls.n	8002524 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002518:	2303      	movs	r3, #3
 800251a:	e013      	b.n	8002544 <HAL_RCC_OscConfig+0x7a8>
 800251c:	40021000 	.word	0x40021000
 8002520:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002524:	4b09      	ldr	r3, [pc, #36]	; (800254c <HAL_RCC_OscConfig+0x7b0>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d1ec      	bne.n	800250a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002530:	4b06      	ldr	r3, [pc, #24]	; (800254c <HAL_RCC_OscConfig+0x7b0>)
 8002532:	68da      	ldr	r2, [r3, #12]
 8002534:	4905      	ldr	r1, [pc, #20]	; (800254c <HAL_RCC_OscConfig+0x7b0>)
 8002536:	4b06      	ldr	r3, [pc, #24]	; (8002550 <HAL_RCC_OscConfig+0x7b4>)
 8002538:	4013      	ands	r3, r2
 800253a:	60cb      	str	r3, [r1, #12]
 800253c:	e001      	b.n	8002542 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e000      	b.n	8002544 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002542:	2300      	movs	r3, #0
}
 8002544:	4618      	mov	r0, r3
 8002546:	3720      	adds	r7, #32
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	40021000 	.word	0x40021000
 8002550:	feeefffc 	.word	0xfeeefffc

08002554 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d101      	bne.n	8002568 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e0e7      	b.n	8002738 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002568:	4b75      	ldr	r3, [pc, #468]	; (8002740 <HAL_RCC_ClockConfig+0x1ec>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0307 	and.w	r3, r3, #7
 8002570:	683a      	ldr	r2, [r7, #0]
 8002572:	429a      	cmp	r2, r3
 8002574:	d910      	bls.n	8002598 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002576:	4b72      	ldr	r3, [pc, #456]	; (8002740 <HAL_RCC_ClockConfig+0x1ec>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f023 0207 	bic.w	r2, r3, #7
 800257e:	4970      	ldr	r1, [pc, #448]	; (8002740 <HAL_RCC_ClockConfig+0x1ec>)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	4313      	orrs	r3, r2
 8002584:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002586:	4b6e      	ldr	r3, [pc, #440]	; (8002740 <HAL_RCC_ClockConfig+0x1ec>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0307 	and.w	r3, r3, #7
 800258e:	683a      	ldr	r2, [r7, #0]
 8002590:	429a      	cmp	r2, r3
 8002592:	d001      	beq.n	8002598 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e0cf      	b.n	8002738 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0302 	and.w	r3, r3, #2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d010      	beq.n	80025c6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	689a      	ldr	r2, [r3, #8]
 80025a8:	4b66      	ldr	r3, [pc, #408]	; (8002744 <HAL_RCC_ClockConfig+0x1f0>)
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d908      	bls.n	80025c6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025b4:	4b63      	ldr	r3, [pc, #396]	; (8002744 <HAL_RCC_ClockConfig+0x1f0>)
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	4960      	ldr	r1, [pc, #384]	; (8002744 <HAL_RCC_ClockConfig+0x1f0>)
 80025c2:	4313      	orrs	r3, r2
 80025c4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0301 	and.w	r3, r3, #1
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d04c      	beq.n	800266c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	2b03      	cmp	r3, #3
 80025d8:	d107      	bne.n	80025ea <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025da:	4b5a      	ldr	r3, [pc, #360]	; (8002744 <HAL_RCC_ClockConfig+0x1f0>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d121      	bne.n	800262a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e0a6      	b.n	8002738 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d107      	bne.n	8002602 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025f2:	4b54      	ldr	r3, [pc, #336]	; (8002744 <HAL_RCC_ClockConfig+0x1f0>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d115      	bne.n	800262a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e09a      	b.n	8002738 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d107      	bne.n	800261a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800260a:	4b4e      	ldr	r3, [pc, #312]	; (8002744 <HAL_RCC_ClockConfig+0x1f0>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d109      	bne.n	800262a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e08e      	b.n	8002738 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800261a:	4b4a      	ldr	r3, [pc, #296]	; (8002744 <HAL_RCC_ClockConfig+0x1f0>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002622:	2b00      	cmp	r3, #0
 8002624:	d101      	bne.n	800262a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e086      	b.n	8002738 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800262a:	4b46      	ldr	r3, [pc, #280]	; (8002744 <HAL_RCC_ClockConfig+0x1f0>)
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f023 0203 	bic.w	r2, r3, #3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	4943      	ldr	r1, [pc, #268]	; (8002744 <HAL_RCC_ClockConfig+0x1f0>)
 8002638:	4313      	orrs	r3, r2
 800263a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800263c:	f7ff fa58 	bl	8001af0 <HAL_GetTick>
 8002640:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002642:	e00a      	b.n	800265a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002644:	f7ff fa54 	bl	8001af0 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002652:	4293      	cmp	r3, r2
 8002654:	d901      	bls.n	800265a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e06e      	b.n	8002738 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800265a:	4b3a      	ldr	r3, [pc, #232]	; (8002744 <HAL_RCC_ClockConfig+0x1f0>)
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f003 020c 	and.w	r2, r3, #12
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	429a      	cmp	r2, r3
 800266a:	d1eb      	bne.n	8002644 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0302 	and.w	r3, r3, #2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d010      	beq.n	800269a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689a      	ldr	r2, [r3, #8]
 800267c:	4b31      	ldr	r3, [pc, #196]	; (8002744 <HAL_RCC_ClockConfig+0x1f0>)
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002684:	429a      	cmp	r2, r3
 8002686:	d208      	bcs.n	800269a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002688:	4b2e      	ldr	r3, [pc, #184]	; (8002744 <HAL_RCC_ClockConfig+0x1f0>)
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	492b      	ldr	r1, [pc, #172]	; (8002744 <HAL_RCC_ClockConfig+0x1f0>)
 8002696:	4313      	orrs	r3, r2
 8002698:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800269a:	4b29      	ldr	r3, [pc, #164]	; (8002740 <HAL_RCC_ClockConfig+0x1ec>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0307 	and.w	r3, r3, #7
 80026a2:	683a      	ldr	r2, [r7, #0]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d210      	bcs.n	80026ca <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026a8:	4b25      	ldr	r3, [pc, #148]	; (8002740 <HAL_RCC_ClockConfig+0x1ec>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f023 0207 	bic.w	r2, r3, #7
 80026b0:	4923      	ldr	r1, [pc, #140]	; (8002740 <HAL_RCC_ClockConfig+0x1ec>)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026b8:	4b21      	ldr	r3, [pc, #132]	; (8002740 <HAL_RCC_ClockConfig+0x1ec>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0307 	and.w	r3, r3, #7
 80026c0:	683a      	ldr	r2, [r7, #0]
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d001      	beq.n	80026ca <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e036      	b.n	8002738 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0304 	and.w	r3, r3, #4
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d008      	beq.n	80026e8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026d6:	4b1b      	ldr	r3, [pc, #108]	; (8002744 <HAL_RCC_ClockConfig+0x1f0>)
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	4918      	ldr	r1, [pc, #96]	; (8002744 <HAL_RCC_ClockConfig+0x1f0>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0308 	and.w	r3, r3, #8
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d009      	beq.n	8002708 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026f4:	4b13      	ldr	r3, [pc, #76]	; (8002744 <HAL_RCC_ClockConfig+0x1f0>)
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	691b      	ldr	r3, [r3, #16]
 8002700:	00db      	lsls	r3, r3, #3
 8002702:	4910      	ldr	r1, [pc, #64]	; (8002744 <HAL_RCC_ClockConfig+0x1f0>)
 8002704:	4313      	orrs	r3, r2
 8002706:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002708:	f000 f824 	bl	8002754 <HAL_RCC_GetSysClockFreq>
 800270c:	4602      	mov	r2, r0
 800270e:	4b0d      	ldr	r3, [pc, #52]	; (8002744 <HAL_RCC_ClockConfig+0x1f0>)
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	091b      	lsrs	r3, r3, #4
 8002714:	f003 030f 	and.w	r3, r3, #15
 8002718:	490b      	ldr	r1, [pc, #44]	; (8002748 <HAL_RCC_ClockConfig+0x1f4>)
 800271a:	5ccb      	ldrb	r3, [r1, r3]
 800271c:	f003 031f 	and.w	r3, r3, #31
 8002720:	fa22 f303 	lsr.w	r3, r2, r3
 8002724:	4a09      	ldr	r2, [pc, #36]	; (800274c <HAL_RCC_ClockConfig+0x1f8>)
 8002726:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002728:	4b09      	ldr	r3, [pc, #36]	; (8002750 <HAL_RCC_ClockConfig+0x1fc>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4618      	mov	r0, r3
 800272e:	f7ff f98f 	bl	8001a50 <HAL_InitTick>
 8002732:	4603      	mov	r3, r0
 8002734:	72fb      	strb	r3, [r7, #11]

  return status;
 8002736:	7afb      	ldrb	r3, [r7, #11]
}
 8002738:	4618      	mov	r0, r3
 800273a:	3710      	adds	r7, #16
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	40022000 	.word	0x40022000
 8002744:	40021000 	.word	0x40021000
 8002748:	08003778 	.word	0x08003778
 800274c:	20000004 	.word	0x20000004
 8002750:	20000008 	.word	0x20000008

08002754 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002754:	b480      	push	{r7}
 8002756:	b089      	sub	sp, #36	; 0x24
 8002758:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800275a:	2300      	movs	r3, #0
 800275c:	61fb      	str	r3, [r7, #28]
 800275e:	2300      	movs	r3, #0
 8002760:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002762:	4b3e      	ldr	r3, [pc, #248]	; (800285c <HAL_RCC_GetSysClockFreq+0x108>)
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f003 030c 	and.w	r3, r3, #12
 800276a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800276c:	4b3b      	ldr	r3, [pc, #236]	; (800285c <HAL_RCC_GetSysClockFreq+0x108>)
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	f003 0303 	and.w	r3, r3, #3
 8002774:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d005      	beq.n	8002788 <HAL_RCC_GetSysClockFreq+0x34>
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	2b0c      	cmp	r3, #12
 8002780:	d121      	bne.n	80027c6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2b01      	cmp	r3, #1
 8002786:	d11e      	bne.n	80027c6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002788:	4b34      	ldr	r3, [pc, #208]	; (800285c <HAL_RCC_GetSysClockFreq+0x108>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0308 	and.w	r3, r3, #8
 8002790:	2b00      	cmp	r3, #0
 8002792:	d107      	bne.n	80027a4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002794:	4b31      	ldr	r3, [pc, #196]	; (800285c <HAL_RCC_GetSysClockFreq+0x108>)
 8002796:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800279a:	0a1b      	lsrs	r3, r3, #8
 800279c:	f003 030f 	and.w	r3, r3, #15
 80027a0:	61fb      	str	r3, [r7, #28]
 80027a2:	e005      	b.n	80027b0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80027a4:	4b2d      	ldr	r3, [pc, #180]	; (800285c <HAL_RCC_GetSysClockFreq+0x108>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	091b      	lsrs	r3, r3, #4
 80027aa:	f003 030f 	and.w	r3, r3, #15
 80027ae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80027b0:	4a2b      	ldr	r2, [pc, #172]	; (8002860 <HAL_RCC_GetSysClockFreq+0x10c>)
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027b8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d10d      	bne.n	80027dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027c4:	e00a      	b.n	80027dc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	2b04      	cmp	r3, #4
 80027ca:	d102      	bne.n	80027d2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80027cc:	4b25      	ldr	r3, [pc, #148]	; (8002864 <HAL_RCC_GetSysClockFreq+0x110>)
 80027ce:	61bb      	str	r3, [r7, #24]
 80027d0:	e004      	b.n	80027dc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	2b08      	cmp	r3, #8
 80027d6:	d101      	bne.n	80027dc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80027d8:	4b23      	ldr	r3, [pc, #140]	; (8002868 <HAL_RCC_GetSysClockFreq+0x114>)
 80027da:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	2b0c      	cmp	r3, #12
 80027e0:	d134      	bne.n	800284c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80027e2:	4b1e      	ldr	r3, [pc, #120]	; (800285c <HAL_RCC_GetSysClockFreq+0x108>)
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	f003 0303 	and.w	r3, r3, #3
 80027ea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d003      	beq.n	80027fa <HAL_RCC_GetSysClockFreq+0xa6>
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	2b03      	cmp	r3, #3
 80027f6:	d003      	beq.n	8002800 <HAL_RCC_GetSysClockFreq+0xac>
 80027f8:	e005      	b.n	8002806 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80027fa:	4b1a      	ldr	r3, [pc, #104]	; (8002864 <HAL_RCC_GetSysClockFreq+0x110>)
 80027fc:	617b      	str	r3, [r7, #20]
      break;
 80027fe:	e005      	b.n	800280c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002800:	4b19      	ldr	r3, [pc, #100]	; (8002868 <HAL_RCC_GetSysClockFreq+0x114>)
 8002802:	617b      	str	r3, [r7, #20]
      break;
 8002804:	e002      	b.n	800280c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	617b      	str	r3, [r7, #20]
      break;
 800280a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800280c:	4b13      	ldr	r3, [pc, #76]	; (800285c <HAL_RCC_GetSysClockFreq+0x108>)
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	091b      	lsrs	r3, r3, #4
 8002812:	f003 0307 	and.w	r3, r3, #7
 8002816:	3301      	adds	r3, #1
 8002818:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800281a:	4b10      	ldr	r3, [pc, #64]	; (800285c <HAL_RCC_GetSysClockFreq+0x108>)
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	0a1b      	lsrs	r3, r3, #8
 8002820:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002824:	697a      	ldr	r2, [r7, #20]
 8002826:	fb03 f202 	mul.w	r2, r3, r2
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002830:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002832:	4b0a      	ldr	r3, [pc, #40]	; (800285c <HAL_RCC_GetSysClockFreq+0x108>)
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	0e5b      	lsrs	r3, r3, #25
 8002838:	f003 0303 	and.w	r3, r3, #3
 800283c:	3301      	adds	r3, #1
 800283e:	005b      	lsls	r3, r3, #1
 8002840:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002842:	697a      	ldr	r2, [r7, #20]
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	fbb2 f3f3 	udiv	r3, r2, r3
 800284a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800284c:	69bb      	ldr	r3, [r7, #24]
}
 800284e:	4618      	mov	r0, r3
 8002850:	3724      	adds	r7, #36	; 0x24
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	40021000 	.word	0x40021000
 8002860:	08003788 	.word	0x08003788
 8002864:	00f42400 	.word	0x00f42400
 8002868:	007a1200 	.word	0x007a1200

0800286c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b086      	sub	sp, #24
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002874:	2300      	movs	r3, #0
 8002876:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002878:	4b2a      	ldr	r3, [pc, #168]	; (8002924 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800287a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800287c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d003      	beq.n	800288c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002884:	f7ff fa26 	bl	8001cd4 <HAL_PWREx_GetVoltageRange>
 8002888:	6178      	str	r0, [r7, #20]
 800288a:	e014      	b.n	80028b6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800288c:	4b25      	ldr	r3, [pc, #148]	; (8002924 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800288e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002890:	4a24      	ldr	r2, [pc, #144]	; (8002924 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002892:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002896:	6593      	str	r3, [r2, #88]	; 0x58
 8002898:	4b22      	ldr	r3, [pc, #136]	; (8002924 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800289a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800289c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a0:	60fb      	str	r3, [r7, #12]
 80028a2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80028a4:	f7ff fa16 	bl	8001cd4 <HAL_PWREx_GetVoltageRange>
 80028a8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80028aa:	4b1e      	ldr	r3, [pc, #120]	; (8002924 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ae:	4a1d      	ldr	r2, [pc, #116]	; (8002924 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028b4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028bc:	d10b      	bne.n	80028d6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2b80      	cmp	r3, #128	; 0x80
 80028c2:	d919      	bls.n	80028f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2ba0      	cmp	r3, #160	; 0xa0
 80028c8:	d902      	bls.n	80028d0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80028ca:	2302      	movs	r3, #2
 80028cc:	613b      	str	r3, [r7, #16]
 80028ce:	e013      	b.n	80028f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80028d0:	2301      	movs	r3, #1
 80028d2:	613b      	str	r3, [r7, #16]
 80028d4:	e010      	b.n	80028f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2b80      	cmp	r3, #128	; 0x80
 80028da:	d902      	bls.n	80028e2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80028dc:	2303      	movs	r3, #3
 80028de:	613b      	str	r3, [r7, #16]
 80028e0:	e00a      	b.n	80028f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2b80      	cmp	r3, #128	; 0x80
 80028e6:	d102      	bne.n	80028ee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80028e8:	2302      	movs	r3, #2
 80028ea:	613b      	str	r3, [r7, #16]
 80028ec:	e004      	b.n	80028f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2b70      	cmp	r3, #112	; 0x70
 80028f2:	d101      	bne.n	80028f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80028f4:	2301      	movs	r3, #1
 80028f6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80028f8:	4b0b      	ldr	r3, [pc, #44]	; (8002928 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f023 0207 	bic.w	r2, r3, #7
 8002900:	4909      	ldr	r1, [pc, #36]	; (8002928 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	4313      	orrs	r3, r2
 8002906:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002908:	4b07      	ldr	r3, [pc, #28]	; (8002928 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0307 	and.w	r3, r3, #7
 8002910:	693a      	ldr	r2, [r7, #16]
 8002912:	429a      	cmp	r2, r3
 8002914:	d001      	beq.n	800291a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e000      	b.n	800291c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800291a:	2300      	movs	r3, #0
}
 800291c:	4618      	mov	r0, r3
 800291e:	3718      	adds	r7, #24
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	40021000 	.word	0x40021000
 8002928:	40022000 	.word	0x40022000

0800292c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b086      	sub	sp, #24
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002934:	2300      	movs	r3, #0
 8002936:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002938:	2300      	movs	r3, #0
 800293a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002944:	2b00      	cmp	r3, #0
 8002946:	d041      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800294c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002950:	d02a      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002952:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002956:	d824      	bhi.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002958:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800295c:	d008      	beq.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800295e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002962:	d81e      	bhi.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002964:	2b00      	cmp	r3, #0
 8002966:	d00a      	beq.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002968:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800296c:	d010      	beq.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800296e:	e018      	b.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002970:	4b86      	ldr	r3, [pc, #536]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	4a85      	ldr	r2, [pc, #532]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002976:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800297a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800297c:	e015      	b.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	3304      	adds	r3, #4
 8002982:	2100      	movs	r1, #0
 8002984:	4618      	mov	r0, r3
 8002986:	f000 fabb 	bl	8002f00 <RCCEx_PLLSAI1_Config>
 800298a:	4603      	mov	r3, r0
 800298c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800298e:	e00c      	b.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	3320      	adds	r3, #32
 8002994:	2100      	movs	r1, #0
 8002996:	4618      	mov	r0, r3
 8002998:	f000 fba6 	bl	80030e8 <RCCEx_PLLSAI2_Config>
 800299c:	4603      	mov	r3, r0
 800299e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029a0:	e003      	b.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	74fb      	strb	r3, [r7, #19]
      break;
 80029a6:	e000      	b.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80029a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029aa:	7cfb      	ldrb	r3, [r7, #19]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d10b      	bne.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029b0:	4b76      	ldr	r3, [pc, #472]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029be:	4973      	ldr	r1, [pc, #460]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80029c6:	e001      	b.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029c8:	7cfb      	ldrb	r3, [r7, #19]
 80029ca:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d041      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029dc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80029e0:	d02a      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80029e2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80029e6:	d824      	bhi.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80029e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80029ec:	d008      	beq.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80029ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80029f2:	d81e      	bhi.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d00a      	beq.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80029f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029fc:	d010      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80029fe:	e018      	b.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002a00:	4b62      	ldr	r3, [pc, #392]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	4a61      	ldr	r2, [pc, #388]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a0a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a0c:	e015      	b.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	3304      	adds	r3, #4
 8002a12:	2100      	movs	r1, #0
 8002a14:	4618      	mov	r0, r3
 8002a16:	f000 fa73 	bl	8002f00 <RCCEx_PLLSAI1_Config>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a1e:	e00c      	b.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	3320      	adds	r3, #32
 8002a24:	2100      	movs	r1, #0
 8002a26:	4618      	mov	r0, r3
 8002a28:	f000 fb5e 	bl	80030e8 <RCCEx_PLLSAI2_Config>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a30:	e003      	b.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	74fb      	strb	r3, [r7, #19]
      break;
 8002a36:	e000      	b.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002a38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a3a:	7cfb      	ldrb	r3, [r7, #19]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d10b      	bne.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002a40:	4b52      	ldr	r3, [pc, #328]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a46:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a4e:	494f      	ldr	r1, [pc, #316]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002a56:	e001      	b.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a58:	7cfb      	ldrb	r3, [r7, #19]
 8002a5a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	f000 80a0 	beq.w	8002baa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a6e:	4b47      	ldr	r3, [pc, #284]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d101      	bne.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e000      	b.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002a7e:	2300      	movs	r3, #0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d00d      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a84:	4b41      	ldr	r3, [pc, #260]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a88:	4a40      	ldr	r2, [pc, #256]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a8e:	6593      	str	r3, [r2, #88]	; 0x58
 8002a90:	4b3e      	ldr	r3, [pc, #248]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a98:	60bb      	str	r3, [r7, #8]
 8002a9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002aa0:	4b3b      	ldr	r3, [pc, #236]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a3a      	ldr	r2, [pc, #232]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002aa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aaa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002aac:	f7ff f820 	bl	8001af0 <HAL_GetTick>
 8002ab0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ab2:	e009      	b.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ab4:	f7ff f81c 	bl	8001af0 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d902      	bls.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	74fb      	strb	r3, [r7, #19]
        break;
 8002ac6:	e005      	b.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ac8:	4b31      	ldr	r3, [pc, #196]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d0ef      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002ad4:	7cfb      	ldrb	r3, [r7, #19]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d15c      	bne.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002ada:	4b2c      	ldr	r3, [pc, #176]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ae0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ae4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d01f      	beq.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002af2:	697a      	ldr	r2, [r7, #20]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d019      	beq.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002af8:	4b24      	ldr	r3, [pc, #144]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002afe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b02:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b04:	4b21      	ldr	r3, [pc, #132]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b0a:	4a20      	ldr	r2, [pc, #128]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b14:	4b1d      	ldr	r3, [pc, #116]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b1a:	4a1c      	ldr	r2, [pc, #112]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b24:	4a19      	ldr	r2, [pc, #100]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	f003 0301 	and.w	r3, r3, #1
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d016      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b36:	f7fe ffdb 	bl	8001af0 <HAL_GetTick>
 8002b3a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b3c:	e00b      	b.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b3e:	f7fe ffd7 	bl	8001af0 <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d902      	bls.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	74fb      	strb	r3, [r7, #19]
            break;
 8002b54:	e006      	b.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b56:	4b0d      	ldr	r3, [pc, #52]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b5c:	f003 0302 	and.w	r3, r3, #2
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d0ec      	beq.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002b64:	7cfb      	ldrb	r3, [r7, #19]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d10c      	bne.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b6a:	4b08      	ldr	r3, [pc, #32]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b7a:	4904      	ldr	r1, [pc, #16]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002b82:	e009      	b.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b84:	7cfb      	ldrb	r3, [r7, #19]
 8002b86:	74bb      	strb	r3, [r7, #18]
 8002b88:	e006      	b.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002b8a:	bf00      	nop
 8002b8c:	40021000 	.word	0x40021000
 8002b90:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b94:	7cfb      	ldrb	r3, [r7, #19]
 8002b96:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b98:	7c7b      	ldrb	r3, [r7, #17]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d105      	bne.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b9e:	4b9e      	ldr	r3, [pc, #632]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba2:	4a9d      	ldr	r2, [pc, #628]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ba4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ba8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0301 	and.w	r3, r3, #1
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00a      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002bb6:	4b98      	ldr	r3, [pc, #608]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bbc:	f023 0203 	bic.w	r2, r3, #3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc4:	4994      	ldr	r1, [pc, #592]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0302 	and.w	r3, r3, #2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d00a      	beq.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002bd8:	4b8f      	ldr	r3, [pc, #572]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bde:	f023 020c 	bic.w	r2, r3, #12
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002be6:	498c      	ldr	r1, [pc, #560]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002be8:	4313      	orrs	r3, r2
 8002bea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0304 	and.w	r3, r3, #4
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d00a      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002bfa:	4b87      	ldr	r3, [pc, #540]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c00:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c08:	4983      	ldr	r1, [pc, #524]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0308 	and.w	r3, r3, #8
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d00a      	beq.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c1c:	4b7e      	ldr	r3, [pc, #504]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c22:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c2a:	497b      	ldr	r1, [pc, #492]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0310 	and.w	r3, r3, #16
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00a      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c3e:	4b76      	ldr	r3, [pc, #472]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c4c:	4972      	ldr	r1, [pc, #456]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0320 	and.w	r3, r3, #32
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d00a      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c60:	4b6d      	ldr	r3, [pc, #436]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c66:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c6e:	496a      	ldr	r1, [pc, #424]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c70:	4313      	orrs	r3, r2
 8002c72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d00a      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c82:	4b65      	ldr	r3, [pc, #404]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c88:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c90:	4961      	ldr	r1, [pc, #388]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d00a      	beq.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002ca4:	4b5c      	ldr	r3, [pc, #368]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002caa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cb2:	4959      	ldr	r1, [pc, #356]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d00a      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cc6:	4b54      	ldr	r3, [pc, #336]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ccc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cd4:	4950      	ldr	r1, [pc, #320]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d00a      	beq.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ce8:	4b4b      	ldr	r3, [pc, #300]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cee:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cf6:	4948      	ldr	r1, [pc, #288]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d00a      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d0a:	4b43      	ldr	r3, [pc, #268]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d10:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d18:	493f      	ldr	r1, [pc, #252]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d028      	beq.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d2c:	4b3a      	ldr	r3, [pc, #232]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d32:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d3a:	4937      	ldr	r1, [pc, #220]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d4a:	d106      	bne.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d4c:	4b32      	ldr	r3, [pc, #200]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	4a31      	ldr	r2, [pc, #196]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d56:	60d3      	str	r3, [r2, #12]
 8002d58:	e011      	b.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d5e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d62:	d10c      	bne.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	3304      	adds	r3, #4
 8002d68:	2101      	movs	r1, #1
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f000 f8c8 	bl	8002f00 <RCCEx_PLLSAI1_Config>
 8002d70:	4603      	mov	r3, r0
 8002d72:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002d74:	7cfb      	ldrb	r3, [r7, #19]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002d7a:	7cfb      	ldrb	r3, [r7, #19]
 8002d7c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d028      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002d8a:	4b23      	ldr	r3, [pc, #140]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d90:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d98:	491f      	ldr	r1, [pc, #124]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002da8:	d106      	bne.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002daa:	4b1b      	ldr	r3, [pc, #108]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	4a1a      	ldr	r2, [pc, #104]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002db0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002db4:	60d3      	str	r3, [r2, #12]
 8002db6:	e011      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dbc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002dc0:	d10c      	bne.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	3304      	adds	r3, #4
 8002dc6:	2101      	movs	r1, #1
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f000 f899 	bl	8002f00 <RCCEx_PLLSAI1_Config>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002dd2:	7cfb      	ldrb	r3, [r7, #19]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d001      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002dd8:	7cfb      	ldrb	r3, [r7, #19]
 8002dda:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d02b      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002de8:	4b0b      	ldr	r3, [pc, #44]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002df6:	4908      	ldr	r1, [pc, #32]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e06:	d109      	bne.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e08:	4b03      	ldr	r3, [pc, #12]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	4a02      	ldr	r2, [pc, #8]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e12:	60d3      	str	r3, [r2, #12]
 8002e14:	e014      	b.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002e16:	bf00      	nop
 8002e18:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e20:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e24:	d10c      	bne.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	3304      	adds	r3, #4
 8002e2a:	2101      	movs	r1, #1
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f000 f867 	bl	8002f00 <RCCEx_PLLSAI1_Config>
 8002e32:	4603      	mov	r3, r0
 8002e34:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e36:	7cfb      	ldrb	r3, [r7, #19]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d001      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002e3c:	7cfb      	ldrb	r3, [r7, #19]
 8002e3e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d02f      	beq.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e4c:	4b2b      	ldr	r3, [pc, #172]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e52:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e5a:	4928      	ldr	r1, [pc, #160]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e6a:	d10d      	bne.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	3304      	adds	r3, #4
 8002e70:	2102      	movs	r1, #2
 8002e72:	4618      	mov	r0, r3
 8002e74:	f000 f844 	bl	8002f00 <RCCEx_PLLSAI1_Config>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e7c:	7cfb      	ldrb	r3, [r7, #19]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d014      	beq.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002e82:	7cfb      	ldrb	r3, [r7, #19]
 8002e84:	74bb      	strb	r3, [r7, #18]
 8002e86:	e011      	b.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e90:	d10c      	bne.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	3320      	adds	r3, #32
 8002e96:	2102      	movs	r1, #2
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f000 f925 	bl	80030e8 <RCCEx_PLLSAI2_Config>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ea2:	7cfb      	ldrb	r3, [r7, #19]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d001      	beq.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002ea8:	7cfb      	ldrb	r3, [r7, #19]
 8002eaa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d00a      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002eb8:	4b10      	ldr	r3, [pc, #64]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ebe:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ec6:	490d      	ldr	r1, [pc, #52]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d00b      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002eda:	4b08      	ldr	r3, [pc, #32]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ee0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002eea:	4904      	ldr	r1, [pc, #16]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002ef2:	7cbb      	ldrb	r3, [r7, #18]
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3718      	adds	r7, #24
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	40021000 	.word	0x40021000

08002f00 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f0e:	4b75      	ldr	r3, [pc, #468]	; (80030e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	f003 0303 	and.w	r3, r3, #3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d018      	beq.n	8002f4c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002f1a:	4b72      	ldr	r3, [pc, #456]	; (80030e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	f003 0203 	and.w	r2, r3, #3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d10d      	bne.n	8002f46 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
       ||
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d009      	beq.n	8002f46 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002f32:	4b6c      	ldr	r3, [pc, #432]	; (80030e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	091b      	lsrs	r3, r3, #4
 8002f38:	f003 0307 	and.w	r3, r3, #7
 8002f3c:	1c5a      	adds	r2, r3, #1
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
       ||
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d047      	beq.n	8002fd6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	73fb      	strb	r3, [r7, #15]
 8002f4a:	e044      	b.n	8002fd6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2b03      	cmp	r3, #3
 8002f52:	d018      	beq.n	8002f86 <RCCEx_PLLSAI1_Config+0x86>
 8002f54:	2b03      	cmp	r3, #3
 8002f56:	d825      	bhi.n	8002fa4 <RCCEx_PLLSAI1_Config+0xa4>
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d002      	beq.n	8002f62 <RCCEx_PLLSAI1_Config+0x62>
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d009      	beq.n	8002f74 <RCCEx_PLLSAI1_Config+0x74>
 8002f60:	e020      	b.n	8002fa4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002f62:	4b60      	ldr	r3, [pc, #384]	; (80030e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d11d      	bne.n	8002faa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f72:	e01a      	b.n	8002faa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f74:	4b5b      	ldr	r3, [pc, #364]	; (80030e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d116      	bne.n	8002fae <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f84:	e013      	b.n	8002fae <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f86:	4b57      	ldr	r3, [pc, #348]	; (80030e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d10f      	bne.n	8002fb2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f92:	4b54      	ldr	r3, [pc, #336]	; (80030e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d109      	bne.n	8002fb2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002fa2:	e006      	b.n	8002fb2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	73fb      	strb	r3, [r7, #15]
      break;
 8002fa8:	e004      	b.n	8002fb4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002faa:	bf00      	nop
 8002fac:	e002      	b.n	8002fb4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002fae:	bf00      	nop
 8002fb0:	e000      	b.n	8002fb4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002fb2:	bf00      	nop
    }

    if(status == HAL_OK)
 8002fb4:	7bfb      	ldrb	r3, [r7, #15]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d10d      	bne.n	8002fd6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002fba:	4b4a      	ldr	r3, [pc, #296]	; (80030e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6819      	ldr	r1, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	011b      	lsls	r3, r3, #4
 8002fce:	430b      	orrs	r3, r1
 8002fd0:	4944      	ldr	r1, [pc, #272]	; (80030e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002fd6:	7bfb      	ldrb	r3, [r7, #15]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d17d      	bne.n	80030d8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002fdc:	4b41      	ldr	r3, [pc, #260]	; (80030e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a40      	ldr	r2, [pc, #256]	; (80030e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fe2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002fe6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fe8:	f7fe fd82 	bl	8001af0 <HAL_GetTick>
 8002fec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002fee:	e009      	b.n	8003004 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ff0:	f7fe fd7e 	bl	8001af0 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d902      	bls.n	8003004 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	73fb      	strb	r3, [r7, #15]
        break;
 8003002:	e005      	b.n	8003010 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003004:	4b37      	ldr	r3, [pc, #220]	; (80030e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d1ef      	bne.n	8002ff0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003010:	7bfb      	ldrb	r3, [r7, #15]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d160      	bne.n	80030d8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d111      	bne.n	8003040 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800301c:	4b31      	ldr	r3, [pc, #196]	; (80030e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800301e:	691b      	ldr	r3, [r3, #16]
 8003020:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003024:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	6892      	ldr	r2, [r2, #8]
 800302c:	0211      	lsls	r1, r2, #8
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	68d2      	ldr	r2, [r2, #12]
 8003032:	0912      	lsrs	r2, r2, #4
 8003034:	0452      	lsls	r2, r2, #17
 8003036:	430a      	orrs	r2, r1
 8003038:	492a      	ldr	r1, [pc, #168]	; (80030e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800303a:	4313      	orrs	r3, r2
 800303c:	610b      	str	r3, [r1, #16]
 800303e:	e027      	b.n	8003090 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	2b01      	cmp	r3, #1
 8003044:	d112      	bne.n	800306c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003046:	4b27      	ldr	r3, [pc, #156]	; (80030e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800304e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	6892      	ldr	r2, [r2, #8]
 8003056:	0211      	lsls	r1, r2, #8
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	6912      	ldr	r2, [r2, #16]
 800305c:	0852      	lsrs	r2, r2, #1
 800305e:	3a01      	subs	r2, #1
 8003060:	0552      	lsls	r2, r2, #21
 8003062:	430a      	orrs	r2, r1
 8003064:	491f      	ldr	r1, [pc, #124]	; (80030e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003066:	4313      	orrs	r3, r2
 8003068:	610b      	str	r3, [r1, #16]
 800306a:	e011      	b.n	8003090 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800306c:	4b1d      	ldr	r3, [pc, #116]	; (80030e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800306e:	691b      	ldr	r3, [r3, #16]
 8003070:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003074:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	6892      	ldr	r2, [r2, #8]
 800307c:	0211      	lsls	r1, r2, #8
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	6952      	ldr	r2, [r2, #20]
 8003082:	0852      	lsrs	r2, r2, #1
 8003084:	3a01      	subs	r2, #1
 8003086:	0652      	lsls	r2, r2, #25
 8003088:	430a      	orrs	r2, r1
 800308a:	4916      	ldr	r1, [pc, #88]	; (80030e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800308c:	4313      	orrs	r3, r2
 800308e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003090:	4b14      	ldr	r3, [pc, #80]	; (80030e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a13      	ldr	r2, [pc, #76]	; (80030e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003096:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800309a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800309c:	f7fe fd28 	bl	8001af0 <HAL_GetTick>
 80030a0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80030a2:	e009      	b.n	80030b8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80030a4:	f7fe fd24 	bl	8001af0 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d902      	bls.n	80030b8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	73fb      	strb	r3, [r7, #15]
          break;
 80030b6:	e005      	b.n	80030c4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80030b8:	4b0a      	ldr	r3, [pc, #40]	; (80030e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d0ef      	beq.n	80030a4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80030c4:	7bfb      	ldrb	r3, [r7, #15]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d106      	bne.n	80030d8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80030ca:	4b06      	ldr	r3, [pc, #24]	; (80030e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030cc:	691a      	ldr	r2, [r3, #16]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	4904      	ldr	r1, [pc, #16]	; (80030e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80030d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3710      	adds	r7, #16
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	40021000 	.word	0x40021000

080030e8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80030f2:	2300      	movs	r3, #0
 80030f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80030f6:	4b6a      	ldr	r3, [pc, #424]	; (80032a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	f003 0303 	and.w	r3, r3, #3
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d018      	beq.n	8003134 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003102:	4b67      	ldr	r3, [pc, #412]	; (80032a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	f003 0203 	and.w	r2, r3, #3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	429a      	cmp	r2, r3
 8003110:	d10d      	bne.n	800312e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
       ||
 8003116:	2b00      	cmp	r3, #0
 8003118:	d009      	beq.n	800312e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800311a:	4b61      	ldr	r3, [pc, #388]	; (80032a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	091b      	lsrs	r3, r3, #4
 8003120:	f003 0307 	and.w	r3, r3, #7
 8003124:	1c5a      	adds	r2, r3, #1
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
       ||
 800312a:	429a      	cmp	r2, r3
 800312c:	d047      	beq.n	80031be <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	73fb      	strb	r3, [r7, #15]
 8003132:	e044      	b.n	80031be <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2b03      	cmp	r3, #3
 800313a:	d018      	beq.n	800316e <RCCEx_PLLSAI2_Config+0x86>
 800313c:	2b03      	cmp	r3, #3
 800313e:	d825      	bhi.n	800318c <RCCEx_PLLSAI2_Config+0xa4>
 8003140:	2b01      	cmp	r3, #1
 8003142:	d002      	beq.n	800314a <RCCEx_PLLSAI2_Config+0x62>
 8003144:	2b02      	cmp	r3, #2
 8003146:	d009      	beq.n	800315c <RCCEx_PLLSAI2_Config+0x74>
 8003148:	e020      	b.n	800318c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800314a:	4b55      	ldr	r3, [pc, #340]	; (80032a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	2b00      	cmp	r3, #0
 8003154:	d11d      	bne.n	8003192 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800315a:	e01a      	b.n	8003192 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800315c:	4b50      	ldr	r3, [pc, #320]	; (80032a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003164:	2b00      	cmp	r3, #0
 8003166:	d116      	bne.n	8003196 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800316c:	e013      	b.n	8003196 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800316e:	4b4c      	ldr	r3, [pc, #304]	; (80032a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d10f      	bne.n	800319a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800317a:	4b49      	ldr	r3, [pc, #292]	; (80032a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d109      	bne.n	800319a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800318a:	e006      	b.n	800319a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	73fb      	strb	r3, [r7, #15]
      break;
 8003190:	e004      	b.n	800319c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003192:	bf00      	nop
 8003194:	e002      	b.n	800319c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003196:	bf00      	nop
 8003198:	e000      	b.n	800319c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800319a:	bf00      	nop
    }

    if(status == HAL_OK)
 800319c:	7bfb      	ldrb	r3, [r7, #15]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d10d      	bne.n	80031be <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80031a2:	4b3f      	ldr	r3, [pc, #252]	; (80032a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6819      	ldr	r1, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	3b01      	subs	r3, #1
 80031b4:	011b      	lsls	r3, r3, #4
 80031b6:	430b      	orrs	r3, r1
 80031b8:	4939      	ldr	r1, [pc, #228]	; (80032a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80031be:	7bfb      	ldrb	r3, [r7, #15]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d167      	bne.n	8003294 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80031c4:	4b36      	ldr	r3, [pc, #216]	; (80032a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a35      	ldr	r2, [pc, #212]	; (80032a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031d0:	f7fe fc8e 	bl	8001af0 <HAL_GetTick>
 80031d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80031d6:	e009      	b.n	80031ec <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80031d8:	f7fe fc8a 	bl	8001af0 <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d902      	bls.n	80031ec <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	73fb      	strb	r3, [r7, #15]
        break;
 80031ea:	e005      	b.n	80031f8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80031ec:	4b2c      	ldr	r3, [pc, #176]	; (80032a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d1ef      	bne.n	80031d8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80031f8:	7bfb      	ldrb	r3, [r7, #15]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d14a      	bne.n	8003294 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d111      	bne.n	8003228 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003204:	4b26      	ldr	r3, [pc, #152]	; (80032a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003206:	695b      	ldr	r3, [r3, #20]
 8003208:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800320c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	6892      	ldr	r2, [r2, #8]
 8003214:	0211      	lsls	r1, r2, #8
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	68d2      	ldr	r2, [r2, #12]
 800321a:	0912      	lsrs	r2, r2, #4
 800321c:	0452      	lsls	r2, r2, #17
 800321e:	430a      	orrs	r2, r1
 8003220:	491f      	ldr	r1, [pc, #124]	; (80032a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003222:	4313      	orrs	r3, r2
 8003224:	614b      	str	r3, [r1, #20]
 8003226:	e011      	b.n	800324c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003228:	4b1d      	ldr	r3, [pc, #116]	; (80032a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800322a:	695b      	ldr	r3, [r3, #20]
 800322c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003230:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	6892      	ldr	r2, [r2, #8]
 8003238:	0211      	lsls	r1, r2, #8
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	6912      	ldr	r2, [r2, #16]
 800323e:	0852      	lsrs	r2, r2, #1
 8003240:	3a01      	subs	r2, #1
 8003242:	0652      	lsls	r2, r2, #25
 8003244:	430a      	orrs	r2, r1
 8003246:	4916      	ldr	r1, [pc, #88]	; (80032a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003248:	4313      	orrs	r3, r2
 800324a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800324c:	4b14      	ldr	r3, [pc, #80]	; (80032a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a13      	ldr	r2, [pc, #76]	; (80032a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003252:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003256:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003258:	f7fe fc4a 	bl	8001af0 <HAL_GetTick>
 800325c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800325e:	e009      	b.n	8003274 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003260:	f7fe fc46 	bl	8001af0 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b02      	cmp	r3, #2
 800326c:	d902      	bls.n	8003274 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	73fb      	strb	r3, [r7, #15]
          break;
 8003272:	e005      	b.n	8003280 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003274:	4b0a      	ldr	r3, [pc, #40]	; (80032a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800327c:	2b00      	cmp	r3, #0
 800327e:	d0ef      	beq.n	8003260 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003280:	7bfb      	ldrb	r3, [r7, #15]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d106      	bne.n	8003294 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003286:	4b06      	ldr	r3, [pc, #24]	; (80032a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003288:	695a      	ldr	r2, [r3, #20]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	4904      	ldr	r1, [pc, #16]	; (80032a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003290:	4313      	orrs	r3, r2
 8003292:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003294:	7bfb      	ldrb	r3, [r7, #15]
}
 8003296:	4618      	mov	r0, r3
 8003298:	3710      	adds	r7, #16
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	40021000 	.word	0x40021000

080032a4 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d101      	bne.n	80032b6 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e049      	b.n	800334a <HAL_RNG_Init+0xa6>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	795b      	ldrb	r3, [r3, #5]
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d105      	bne.n	80032cc <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f7fe faca 	bl	8001860 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2202      	movs	r2, #2
 80032d0:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* defined(RNG_CR_CED) */
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f042 0204 	orr.w	r2, r2, #4
 80032e0:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ec:	2b40      	cmp	r3, #64	; 0x40
 80032ee:	d104      	bne.n	80032fa <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2204      	movs	r2, #4
 80032f4:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e027      	b.n	800334a <HAL_RNG_Init+0xa6>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 80032fa:	f7fe fbf9 	bl	8001af0 <HAL_GetTick>
 80032fe:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8003300:	e015      	b.n	800332e <HAL_RNG_Init+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8003302:	f7fe fbf5 	bl	8001af0 <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	2b02      	cmp	r3, #2
 800330e:	d90e      	bls.n	800332e <HAL_RNG_Init+0x8a>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f003 0304 	and.w	r3, r3, #4
 800331a:	2b04      	cmp	r3, #4
 800331c:	d107      	bne.n	800332e <HAL_RNG_Init+0x8a>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2204      	movs	r2, #4
 8003322:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2202      	movs	r2, #2
 8003328:	609a      	str	r2, [r3, #8]
        return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e00d      	b.n	800334a <HAL_RNG_Init+0xa6>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f003 0304 	and.w	r3, r3, #4
 8003338:	2b04      	cmp	r3, #4
 800333a:	d0e2      	beq.n	8003302 <HAL_RNG_Init+0x5e>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	3710      	adds	r7, #16
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
	...

08003354 <__errno>:
 8003354:	4b01      	ldr	r3, [pc, #4]	; (800335c <__errno+0x8>)
 8003356:	6818      	ldr	r0, [r3, #0]
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	20000010 	.word	0x20000010

08003360 <__libc_init_array>:
 8003360:	b570      	push	{r4, r5, r6, lr}
 8003362:	4d0d      	ldr	r5, [pc, #52]	; (8003398 <__libc_init_array+0x38>)
 8003364:	4c0d      	ldr	r4, [pc, #52]	; (800339c <__libc_init_array+0x3c>)
 8003366:	1b64      	subs	r4, r4, r5
 8003368:	10a4      	asrs	r4, r4, #2
 800336a:	2600      	movs	r6, #0
 800336c:	42a6      	cmp	r6, r4
 800336e:	d109      	bne.n	8003384 <__libc_init_array+0x24>
 8003370:	4d0b      	ldr	r5, [pc, #44]	; (80033a0 <__libc_init_array+0x40>)
 8003372:	4c0c      	ldr	r4, [pc, #48]	; (80033a4 <__libc_init_array+0x44>)
 8003374:	f000 f8e2 	bl	800353c <_init>
 8003378:	1b64      	subs	r4, r4, r5
 800337a:	10a4      	asrs	r4, r4, #2
 800337c:	2600      	movs	r6, #0
 800337e:	42a6      	cmp	r6, r4
 8003380:	d105      	bne.n	800338e <__libc_init_array+0x2e>
 8003382:	bd70      	pop	{r4, r5, r6, pc}
 8003384:	f855 3b04 	ldr.w	r3, [r5], #4
 8003388:	4798      	blx	r3
 800338a:	3601      	adds	r6, #1
 800338c:	e7ee      	b.n	800336c <__libc_init_array+0xc>
 800338e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003392:	4798      	blx	r3
 8003394:	3601      	adds	r6, #1
 8003396:	e7f2      	b.n	800337e <__libc_init_array+0x1e>
 8003398:	080037b8 	.word	0x080037b8
 800339c:	080037b8 	.word	0x080037b8
 80033a0:	080037b8 	.word	0x080037b8
 80033a4:	080037bc 	.word	0x080037bc

080033a8 <malloc>:
 80033a8:	4b02      	ldr	r3, [pc, #8]	; (80033b4 <malloc+0xc>)
 80033aa:	4601      	mov	r1, r0
 80033ac:	6818      	ldr	r0, [r3, #0]
 80033ae:	f000 b82b 	b.w	8003408 <_malloc_r>
 80033b2:	bf00      	nop
 80033b4:	20000010 	.word	0x20000010

080033b8 <memset>:
 80033b8:	4402      	add	r2, r0
 80033ba:	4603      	mov	r3, r0
 80033bc:	4293      	cmp	r3, r2
 80033be:	d100      	bne.n	80033c2 <memset+0xa>
 80033c0:	4770      	bx	lr
 80033c2:	f803 1b01 	strb.w	r1, [r3], #1
 80033c6:	e7f9      	b.n	80033bc <memset+0x4>

080033c8 <sbrk_aligned>:
 80033c8:	b570      	push	{r4, r5, r6, lr}
 80033ca:	4e0e      	ldr	r6, [pc, #56]	; (8003404 <sbrk_aligned+0x3c>)
 80033cc:	460c      	mov	r4, r1
 80033ce:	6831      	ldr	r1, [r6, #0]
 80033d0:	4605      	mov	r5, r0
 80033d2:	b911      	cbnz	r1, 80033da <sbrk_aligned+0x12>
 80033d4:	f000 f88c 	bl	80034f0 <_sbrk_r>
 80033d8:	6030      	str	r0, [r6, #0]
 80033da:	4621      	mov	r1, r4
 80033dc:	4628      	mov	r0, r5
 80033de:	f000 f887 	bl	80034f0 <_sbrk_r>
 80033e2:	1c43      	adds	r3, r0, #1
 80033e4:	d00a      	beq.n	80033fc <sbrk_aligned+0x34>
 80033e6:	1cc4      	adds	r4, r0, #3
 80033e8:	f024 0403 	bic.w	r4, r4, #3
 80033ec:	42a0      	cmp	r0, r4
 80033ee:	d007      	beq.n	8003400 <sbrk_aligned+0x38>
 80033f0:	1a21      	subs	r1, r4, r0
 80033f2:	4628      	mov	r0, r5
 80033f4:	f000 f87c 	bl	80034f0 <_sbrk_r>
 80033f8:	3001      	adds	r0, #1
 80033fa:	d101      	bne.n	8003400 <sbrk_aligned+0x38>
 80033fc:	f04f 34ff 	mov.w	r4, #4294967295
 8003400:	4620      	mov	r0, r4
 8003402:	bd70      	pop	{r4, r5, r6, pc}
 8003404:	200000b4 	.word	0x200000b4

08003408 <_malloc_r>:
 8003408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800340c:	1ccd      	adds	r5, r1, #3
 800340e:	f025 0503 	bic.w	r5, r5, #3
 8003412:	3508      	adds	r5, #8
 8003414:	2d0c      	cmp	r5, #12
 8003416:	bf38      	it	cc
 8003418:	250c      	movcc	r5, #12
 800341a:	2d00      	cmp	r5, #0
 800341c:	4607      	mov	r7, r0
 800341e:	db01      	blt.n	8003424 <_malloc_r+0x1c>
 8003420:	42a9      	cmp	r1, r5
 8003422:	d905      	bls.n	8003430 <_malloc_r+0x28>
 8003424:	230c      	movs	r3, #12
 8003426:	603b      	str	r3, [r7, #0]
 8003428:	2600      	movs	r6, #0
 800342a:	4630      	mov	r0, r6
 800342c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003430:	4e2e      	ldr	r6, [pc, #184]	; (80034ec <_malloc_r+0xe4>)
 8003432:	f000 f875 	bl	8003520 <__malloc_lock>
 8003436:	6833      	ldr	r3, [r6, #0]
 8003438:	461c      	mov	r4, r3
 800343a:	bb34      	cbnz	r4, 800348a <_malloc_r+0x82>
 800343c:	4629      	mov	r1, r5
 800343e:	4638      	mov	r0, r7
 8003440:	f7ff ffc2 	bl	80033c8 <sbrk_aligned>
 8003444:	1c43      	adds	r3, r0, #1
 8003446:	4604      	mov	r4, r0
 8003448:	d14d      	bne.n	80034e6 <_malloc_r+0xde>
 800344a:	6834      	ldr	r4, [r6, #0]
 800344c:	4626      	mov	r6, r4
 800344e:	2e00      	cmp	r6, #0
 8003450:	d140      	bne.n	80034d4 <_malloc_r+0xcc>
 8003452:	6823      	ldr	r3, [r4, #0]
 8003454:	4631      	mov	r1, r6
 8003456:	4638      	mov	r0, r7
 8003458:	eb04 0803 	add.w	r8, r4, r3
 800345c:	f000 f848 	bl	80034f0 <_sbrk_r>
 8003460:	4580      	cmp	r8, r0
 8003462:	d13a      	bne.n	80034da <_malloc_r+0xd2>
 8003464:	6821      	ldr	r1, [r4, #0]
 8003466:	3503      	adds	r5, #3
 8003468:	1a6d      	subs	r5, r5, r1
 800346a:	f025 0503 	bic.w	r5, r5, #3
 800346e:	3508      	adds	r5, #8
 8003470:	2d0c      	cmp	r5, #12
 8003472:	bf38      	it	cc
 8003474:	250c      	movcc	r5, #12
 8003476:	4629      	mov	r1, r5
 8003478:	4638      	mov	r0, r7
 800347a:	f7ff ffa5 	bl	80033c8 <sbrk_aligned>
 800347e:	3001      	adds	r0, #1
 8003480:	d02b      	beq.n	80034da <_malloc_r+0xd2>
 8003482:	6823      	ldr	r3, [r4, #0]
 8003484:	442b      	add	r3, r5
 8003486:	6023      	str	r3, [r4, #0]
 8003488:	e00e      	b.n	80034a8 <_malloc_r+0xa0>
 800348a:	6822      	ldr	r2, [r4, #0]
 800348c:	1b52      	subs	r2, r2, r5
 800348e:	d41e      	bmi.n	80034ce <_malloc_r+0xc6>
 8003490:	2a0b      	cmp	r2, #11
 8003492:	d916      	bls.n	80034c2 <_malloc_r+0xba>
 8003494:	1961      	adds	r1, r4, r5
 8003496:	42a3      	cmp	r3, r4
 8003498:	6025      	str	r5, [r4, #0]
 800349a:	bf18      	it	ne
 800349c:	6059      	strne	r1, [r3, #4]
 800349e:	6863      	ldr	r3, [r4, #4]
 80034a0:	bf08      	it	eq
 80034a2:	6031      	streq	r1, [r6, #0]
 80034a4:	5162      	str	r2, [r4, r5]
 80034a6:	604b      	str	r3, [r1, #4]
 80034a8:	4638      	mov	r0, r7
 80034aa:	f104 060b 	add.w	r6, r4, #11
 80034ae:	f000 f83d 	bl	800352c <__malloc_unlock>
 80034b2:	f026 0607 	bic.w	r6, r6, #7
 80034b6:	1d23      	adds	r3, r4, #4
 80034b8:	1af2      	subs	r2, r6, r3
 80034ba:	d0b6      	beq.n	800342a <_malloc_r+0x22>
 80034bc:	1b9b      	subs	r3, r3, r6
 80034be:	50a3      	str	r3, [r4, r2]
 80034c0:	e7b3      	b.n	800342a <_malloc_r+0x22>
 80034c2:	6862      	ldr	r2, [r4, #4]
 80034c4:	42a3      	cmp	r3, r4
 80034c6:	bf0c      	ite	eq
 80034c8:	6032      	streq	r2, [r6, #0]
 80034ca:	605a      	strne	r2, [r3, #4]
 80034cc:	e7ec      	b.n	80034a8 <_malloc_r+0xa0>
 80034ce:	4623      	mov	r3, r4
 80034d0:	6864      	ldr	r4, [r4, #4]
 80034d2:	e7b2      	b.n	800343a <_malloc_r+0x32>
 80034d4:	4634      	mov	r4, r6
 80034d6:	6876      	ldr	r6, [r6, #4]
 80034d8:	e7b9      	b.n	800344e <_malloc_r+0x46>
 80034da:	230c      	movs	r3, #12
 80034dc:	603b      	str	r3, [r7, #0]
 80034de:	4638      	mov	r0, r7
 80034e0:	f000 f824 	bl	800352c <__malloc_unlock>
 80034e4:	e7a1      	b.n	800342a <_malloc_r+0x22>
 80034e6:	6025      	str	r5, [r4, #0]
 80034e8:	e7de      	b.n	80034a8 <_malloc_r+0xa0>
 80034ea:	bf00      	nop
 80034ec:	200000b0 	.word	0x200000b0

080034f0 <_sbrk_r>:
 80034f0:	b538      	push	{r3, r4, r5, lr}
 80034f2:	4d06      	ldr	r5, [pc, #24]	; (800350c <_sbrk_r+0x1c>)
 80034f4:	2300      	movs	r3, #0
 80034f6:	4604      	mov	r4, r0
 80034f8:	4608      	mov	r0, r1
 80034fa:	602b      	str	r3, [r5, #0]
 80034fc:	f7fe fa1e 	bl	800193c <_sbrk>
 8003500:	1c43      	adds	r3, r0, #1
 8003502:	d102      	bne.n	800350a <_sbrk_r+0x1a>
 8003504:	682b      	ldr	r3, [r5, #0]
 8003506:	b103      	cbz	r3, 800350a <_sbrk_r+0x1a>
 8003508:	6023      	str	r3, [r4, #0]
 800350a:	bd38      	pop	{r3, r4, r5, pc}
 800350c:	200000b8 	.word	0x200000b8

08003510 <strcpy>:
 8003510:	4603      	mov	r3, r0
 8003512:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003516:	f803 2b01 	strb.w	r2, [r3], #1
 800351a:	2a00      	cmp	r2, #0
 800351c:	d1f9      	bne.n	8003512 <strcpy+0x2>
 800351e:	4770      	bx	lr

08003520 <__malloc_lock>:
 8003520:	4801      	ldr	r0, [pc, #4]	; (8003528 <__malloc_lock+0x8>)
 8003522:	f000 b809 	b.w	8003538 <__retarget_lock_acquire_recursive>
 8003526:	bf00      	nop
 8003528:	200000bc 	.word	0x200000bc

0800352c <__malloc_unlock>:
 800352c:	4801      	ldr	r0, [pc, #4]	; (8003534 <__malloc_unlock+0x8>)
 800352e:	f000 b804 	b.w	800353a <__retarget_lock_release_recursive>
 8003532:	bf00      	nop
 8003534:	200000bc 	.word	0x200000bc

08003538 <__retarget_lock_acquire_recursive>:
 8003538:	4770      	bx	lr

0800353a <__retarget_lock_release_recursive>:
 800353a:	4770      	bx	lr

0800353c <_init>:
 800353c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800353e:	bf00      	nop
 8003540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003542:	bc08      	pop	{r3}
 8003544:	469e      	mov	lr, r3
 8003546:	4770      	bx	lr

08003548 <_fini>:
 8003548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800354a:	bf00      	nop
 800354c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800354e:	bc08      	pop	{r3}
 8003550:	469e      	mov	lr, r3
 8003552:	4770      	bx	lr
